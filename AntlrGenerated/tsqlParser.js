// Generated from tsql.g4 by ANTLR 4.6
// jshint ignore: start
var antlr4 = require('antlr4/index');
var tsqlListener = require('./tsqlListener').tsqlListener;
var grammarFileName = "tsql.g4";

var serializedATN = ["\u0003\u0430\ud6d1\u8206\uad2d\u4417\uaef1\u8d80\uaadd",
    "\u0003\u01d3\u041e\u0004\u0002\t\u0002\u0004\u0003\t\u0003\u0004\u0004",
    "\t\u0004\u0004\u0005\t\u0005\u0004\u0006\t\u0006\u0004\u0007\t\u0007",
    "\u0004\b\t\b\u0004\t\t\t\u0004\n\t\n\u0004\u000b\t\u000b\u0004\f\t\f",
    "\u0004\r\t\r\u0004\u000e\t\u000e\u0004\u000f\t\u000f\u0004\u0010\t\u0010",
    "\u0004\u0011\t\u0011\u0004\u0012\t\u0012\u0004\u0013\t\u0013\u0004\u0014",
    "\t\u0014\u0004\u0015\t\u0015\u0004\u0016\t\u0016\u0004\u0017\t\u0017",
    "\u0004\u0018\t\u0018\u0004\u0019\t\u0019\u0004\u001a\t\u001a\u0004\u001b",
    "\t\u001b\u0004\u001c\t\u001c\u0004\u001d\t\u001d\u0004\u001e\t\u001e",
    "\u0004\u001f\t\u001f\u0004 \t \u0004!\t!\u0004\"\t\"\u0004#\t#\u0004",
    "$\t$\u0004%\t%\u0004&\t&\u0004\'\t\'\u0004(\t(\u0004)\t)\u0004*\t*\u0004",
    "+\t+\u0004,\t,\u0004-\t-\u0004.\t.\u0004/\t/\u00040\t0\u00041\t1\u0004",
    "2\t2\u00043\t3\u00044\t4\u00045\t5\u00046\t6\u00047\t7\u00048\t8\u0004",
    "9\t9\u0004:\t:\u0004;\t;\u0004<\t<\u0004=\t=\u0004>\t>\u0004?\t?\u0004",
    "@\t@\u0004A\tA\u0004B\tB\u0004C\tC\u0003\u0002\u0007\u0002\u0088\n\u0002",
    "\f\u0002\u000e\u0002\u008b\u000b\u0002\u0003\u0002\u0003\u0002\u0003",
    "\u0003\u0003\u0003\u0005\u0003\u0091\n\u0003\u0003\u0004\u0003\u0004",
    "\u0005\u0004\u0095\n\u0004\u0006\u0004\u0097\n\u0004\r\u0004\u000e\u0004",
    "\u0098\u0003\u0005\u0003\u0005\u0003\u0006\u0003\u0006\u0003\u0007\u0003",
    "\u0007\u0005\u0007\u00a1\n\u0007\u0003\b\u0003\b\u0005\b\u00a5\n\b\u0003",
    "\t\u0003\t\u0003\t\u0003\t\u0003\t\u0003\t\u0003\t\u0003\t\u0006\t\u00af",
    "\n\t\r\t\u000e\t\u00b0\u0003\t\u0003\t\u0005\t\u00b5\n\t\u0003\t\u0003",
    "\t\u0003\t\u0003\t\u0006\t\u00bb\n\t\r\t\u000e\t\u00bc\u0003\t\u0003",
    "\t\u0005\t\u00c1\n\t\u0003\t\u0003\t\u0003\t\u0003\t\u0003\t\u0003\t",
    "\u0003\t\u0003\t\u0003\t\u0003\t\u0003\t\u0003\t\u0003\t\u0003\t\u0003",
    "\t\u0003\t\u0005\t\u00d3\n\t\u0003\t\u0003\t\u0003\t\u0003\t\u0003\t",
    "\u0003\t\u0003\t\u0003\t\u0003\t\u0003\t\u0003\t\u0003\t\u0003\t\u0007",
    "\t\u00e2\n\t\f\t\u000e\t\u00e5\u000b\t\u0003\n\u0003\n\u0003\n\u0003",
    "\n\u0003\n\u0003\n\u0003\n\u0003\n\u0005\n\u00ef\n\n\u0003\u000b\u0003",
    "\u000b\u0003\f\u0003\f\u0003\f\u0007\f\u00f6\n\f\f\f\u000e\f\u00f9\u000b",
    "\f\u0003\r\u0003\r\u0003\r\u0007\r\u00fe\n\r\f\r\u000e\r\u0101\u000b",
    "\r\u0003\u000e\u0005\u000e\u0104\n\u000e\u0003\u000e\u0003\u000e\u0003",
    "\u000f\u0003\u000f\u0003\u000f\u0003\u000f\u0003\u000f\u0003\u000f\u0003",
    "\u000f\u0003\u000f\u0003\u000f\u0003\u000f\u0003\u000f\u0003\u000f\u0003",
    "\u000f\u0003\u000f\u0003\u000f\u0003\u000f\u0003\u000f\u0003\u000f\u0005",
    "\u000f\u011a\n\u000f\u0003\u000f\u0003\u000f\u0003\u000f\u0003\u000f",
    "\u0003\u000f\u0003\u000f\u0003\u000f\u0005\u000f\u0123\n\u000f\u0003",
    "\u000f\u0003\u000f\u0003\u000f\u0003\u000f\u0005\u000f\u0129\n\u000f",
    "\u0003\u000f\u0003\u000f\u0003\u000f\u0003\u000f\u0005\u000f\u012f\n",
    "\u000f\u0003\u000f\u0003\u000f\u0003\u000f\u0003\u000f\u0005\u000f\u0135",
    "\n\u000f\u0003\u000f\u0003\u000f\u0003\u000f\u0003\u000f\u0003\u000f",
    "\u0003\u000f\u0003\u000f\u0003\u000f\u0003\u000f\u0005\u000f\u0140\n",
    "\u000f\u0003\u0010\u0003\u0010\u0003\u0010\u0003\u0010\u0003\u0010\u0005",
    "\u0010\u0147\n\u0010\u0003\u0010\u0007\u0010\u014a\n\u0010\f\u0010\u000e",
    "\u0010\u014d\u000b\u0010\u0003\u0011\u0003\u0011\u0005\u0011\u0151\n",
    "\u0011\u0003\u0011\u0003\u0011\u0005\u0011\u0155\n\u0011\u0003\u0011",
    "\u0003\u0011\u0003\u0011\u0003\u0011\u0003\u0011\u0006\u0011\u015c\n",
    "\u0011\r\u0011\u000e\u0011\u015d\u0005\u0011\u0160\n\u0011\u0003\u0012",
    "\u0003\u0012\u0005\u0012\u0164\n\u0012\u0003\u0012\u0003\u0012\u0003",
    "\u0012\u0005\u0012\u0169\n\u0012\u0003\u0012\u0003\u0012\u0005\u0012",
    "\u016d\n\u0012\u0005\u0012\u016f\n\u0012\u0003\u0012\u0003\u0012\u0003",
    "\u0012\u0005\u0012\u0174\n\u0012\u0003\u0012\u0003\u0012\u0005\u0012",
    "\u0178\n\u0012\u0003\u0012\u0003\u0012\u0005\u0012\u017c\n\u0012\u0003",
    "\u0012\u0003\u0012\u0003\u0012\u0003\u0012\u0003\u0012\u0007\u0012\u0183",
    "\n\u0012\f\u0012\u000e\u0012\u0186\u000b\u0012\u0005\u0012\u0188\n\u0012",
    "\u0003\u0012\u0003\u0012\u0005\u0012\u018c\n\u0012\u0003\u0013\u0003",
    "\u0013\u0003\u0013\u0003\u0013\u0003\u0013\u0007\u0013\u0193\n\u0013",
    "\f\u0013\u000e\u0013\u0196\u000b\u0013\u0003\u0013\u0003\u0013\u0003",
    "\u0013\u0003\u0013\u0003\u0013\u0003\u0013\u0003\u0013\u0003\u0013\u0003",
    "\u0013\u0005\u0013\u01a1\n\u0013\u0005\u0013\u01a3\n\u0013\u0003\u0014",
    "\u0003\u0014\u0005\u0014\u01a7\n\u0014\u0003\u0015\u0003\u0015\u0003",
    "\u0016\u0003\u0016\u0003\u0016\u0007\u0016\u01ae\n\u0016\f\u0016\u000e",
    "\u0016\u01b1\u000b\u0016\u0003\u0017\u0003\u0017\u0003\u0017\u0005\u0017",
    "\u01b6\n\u0017\u0003\u0017\u0003\u0017\u0003\u0017\u0005\u0017\u01bb",
    "\n\u0017\u0003\u0017\u0003\u0017\u0003\u0017\u0003\u0017\u0003\u0017",
    "\u0003\u0017\u0005\u0017\u01c3\n\u0017\u0003\u0017\u0005\u0017\u01c6",
    "\n\u0017\u0005\u0017\u01c8\n\u0017\u0003\u0018\u0003\u0018\u0003\u0018",
    "\u0007\u0018\u01cd\n\u0018\f\u0018\u000e\u0018\u01d0\u000b\u0018\u0003",
    "\u0019\u0003\u0019\u0003\u0019\u0003\u0019\u0003\u0019\u0005\u0019\u01d7",
    "\n\u0019\u0003\u001a\u0003\u001a\u0007\u001a\u01db\n\u001a\f\u001a\u000e",
    "\u001a\u01de\u000b\u001a\u0003\u001b\u0003\u001b\u0005\u001b\u01e2\n",
    "\u001b\u0003\u001b\u0003\u001b\u0005\u001b\u01e6\n\u001b\u0003\u001b",
    "\u0003\u001b\u0003\u001b\u0005\u001b\u01eb\n\u001b\u0005\u001b\u01ed",
    "\n\u001b\u0003\u001b\u0003\u001b\u0003\u001b\u0003\u001b\u0003\u001b",
    "\u0005\u001b\u01f4\n\u001b\u0003\u001b\u0003\u001b\u0005\u001b\u01f8",
    "\n\u001b\u0003\u001b\u0003\u001b\u0003\u001b\u0003\u001b\u0003\u001b",
    "\u0005\u001b\u01ff\n\u001b\u0005\u001b\u0201\n\u001b\u0005\u001b\u0203",
    "\n\u001b\u0003\u001c\u0003\u001c\u0003\u001c\u0003\u001c\u0003\u001c",
    "\u0003\u001c\u0003\u001c\u0003\u001c\u0003\u001d\u0005\u001d\u020e\n",
    "\u001d\u0003\u001d\u0003\u001d\u0005\u001d\u0212\n\u001d\u0005\u001d",
    "\u0214\n\u001d\u0003\u001d\u0005\u001d\u0217\n\u001d\u0003\u001d\u0003",
    "\u001d\u0003\u001d\u0003\u001d\u0003\u001d\u0003\u001d\u0003\u001d\u0003",
    "\u001d\u0003\u001d\u0003\u001d\u0003\u001d\u0003\u001d\u0003\u001d\u0003",
    "\u001d\u0005\u001d\u0227\n\u001d\u0003\u001e\u0003\u001e\u0003\u001f",
    "\u0003\u001f\u0003\u001f\u0003\u001f\u0003\u001f\u0003\u001f\u0003\u001f",
    "\u0003\u001f\u0003\u001f\u0003\u001f\u0003\u001f\u0003\u001f\u0003\u001f",
    "\u0003\u001f\u0003\u001f\u0003\u001f\u0007\u001f\u023b\n\u001f\f\u001f",
    "\u000e\u001f\u023e\u000b\u001f\u0003\u001f\u0005\u001f\u0241\n\u001f",
    "\u0003\u001f\u0003\u001f\u0005\u001f\u0245\n\u001f\u0003 \u0003 \u0003",
    " \u0003 \u0003!\u0003!\u0003!\u0003!\u0003!\u0005!\u0250\n!\u0003\"",
    "\u0003\"\u0003\"\u0003\"\u0003\"\u0005\"\u0257\n\"\u0003\"\u0003\"\u0003",
    "\"\u0003\"\u0003\"\u0003\"\u0003\"\u0003\"\u0003\"\u0003\"\u0003\"\u0003",
    "\"\u0003\"\u0003\"\u0003\"\u0003\"\u0003\"\u0003\"\u0003\"\u0003\"\u0005",
    "\"\u026d\n\"\u0003\"\u0003\"\u0003\"\u0003\"\u0003\"\u0003\"\u0003\"",
    "\u0003\"\u0003\"\u0003\"\u0003\"\u0003\"\u0003\"\u0003\"\u0003\"\u0003",
    "\"\u0003\"\u0003\"\u0003\"\u0003\"\u0003\"\u0003\"\u0003\"\u0003\"\u0003",
    "\"\u0003\"\u0003\"\u0003\"\u0003\"\u0003\"\u0003\"\u0003\"\u0003\"\u0003",
    "\"\u0003\"\u0003\"\u0003\"\u0003\"\u0003\"\u0003\"\u0003\"\u0003\"\u0003",
    "\"\u0003\"\u0003\"\u0003\"\u0003\"\u0003\"\u0003\"\u0003\"\u0005\"\u02a1",
    "\n\"\u0003\"\u0003\"\u0005\"\u02a5\n\"\u0003\"\u0003\"\u0003\"\u0003",
    "\"\u0003\"\u0003\"\u0003\"\u0003\"\u0003\"\u0003\"\u0003\"\u0003\"\u0005",
    "\"\u02b3\n\"\u0003#\u0003#\u0003#\u0003#\u0003#\u0003$\u0003$\u0003",
    "$\u0003$\u0003$\u0003%\u0005%\u02c0\n%\u0003%\u0003%\u0003&\u0003&\u0003",
    "\'\u0003\'\u0003\'\u0003\'\u0007\'\u02ca\n\'\f\'\u000e\'\u02cd\u000b",
    "\'\u0003\'\u0003\'\u0003(\u0003(\u0005(\u02d3\n(\u0003)\u0003)\u0003",
    ")\u0007)\u02d8\n)\f)\u000e)\u02db\u000b)\u0003*\u0003*\u0003*\u0003",
    "*\u0003*\u0003*\u0003*\u0003*\u0003*\u0003*\u0005*\u02e7\n*\u0003+\u0003",
    "+\u0003+\u0003+\u0003+\u0005+\u02ee\n+\u0003+\u0003+\u0003+\u0003+\u0005",
    "+\u02f4\n+\u0003+\u0003+\u0005+\u02f8\n+\u0003+\u0003+\u0003+\u0003",
    "+\u0003+\u0003+\u0003+\u0003+\u0003+\u0003+\u0003+\u0003+\u0003+\u0003",
    "+\u0003+\u0005+\u0309\n+\u0003,\u0005,\u030c\n,\u0003,\u0003,\u0003",
    "-\u0003-\u0003-\u0003-\u0003-\u0005-\u0315\n-\u0003-\u0005-\u0318\n",
    "-\u0003-\u0005-\u031b\n-\u0003-\u0003-\u0003.\u0003.\u0003.\u0003/\u0003",
    "/\u0003/\u0003/\u0003/\u0003/\u0005/\u0328\n/\u00030\u00030\u00050\u032c",
    "\n0\u00031\u00031\u00031\u00031\u00031\u00031\u00051\u0334\n1\u0003",
    "2\u00032\u00032\u00032\u00052\u033a\n2\u00033\u00033\u00033\u00033\u0003",
    "3\u00033\u00033\u00033\u00033\u00033\u00053\u0346\n3\u00033\u00033\u0003",
    "3\u00033\u00033\u00053\u034d\n3\u00033\u00033\u00034\u00034\u00034\u0005",
    "4\u0354\n4\u00034\u00034\u00034\u00034\u00034\u00054\u035b\n4\u0003",
    "4\u00034\u00035\u00035\u00035\u00055\u0362\n5\u00035\u00035\u00036\u0003",
    "6\u00036\u00056\u0369\n6\u00036\u00036\u00036\u00036\u00036\u00056\u0370",
    "\n6\u00036\u00036\u00037\u00037\u00037\u00057\u0377\n7\u00037\u0003",
    "7\u00038\u00038\u00038\u00078\u037e\n8\f8\u000e8\u0381\u000b8\u0003",
    "9\u00059\u0384\n9\u00039\u00039\u0003:\u0003:\u0003:\u0003:\u0003:\u0005",
    ":\u038d\n:\u0003;\u0003;\u0003;\u0003;\u0003;\u0003;\u0003;\u0003;\u0003",
    ";\u0003;\u0003;\u0003;\u0003;\u0003;\u0003;\u0003;\u0003;\u0003;\u0003",
    ";\u0003;\u0003;\u0003;\u0003;\u0003;\u0003;\u0003;\u0003;\u0003;\u0003",
    ";\u0003;\u0003;\u0003;\u0003;\u0003;\u0003;\u0003;\u0003;\u0003;\u0003",
    ";\u0003;\u0003;\u0003;\u0003;\u0003;\u0003;\u0003;\u0003;\u0003;\u0003",
    ";\u0003;\u0003;\u0003;\u0003;\u0003;\u0003;\u0003;\u0003;\u0003;\u0003",
    ";\u0003;\u0003;\u0003;\u0003;\u0003;\u0003;\u0003;\u0003;\u0003;\u0003",
    ";\u0003;\u0007;\u03d5\n;\f;\u000e;\u03d8\u000b;\u0003;\u0003;\u0005",
    ";\u03dc\n;\u0003;\u0003;\u0003;\u0003;\u0005;\u03e2\n;\u0003;\u0005",
    ";\u03e5\n;\u0005;\u03e7\n;\u0003<\u0003<\u0005<\u03eb\n<\u0003=\u0003",
    "=\u0003=\u0005=\u03f0\n=\u0003=\u0003=\u0005=\u03f4\n=\u0003=\u0003",
    "=\u0005=\u03f8\n=\u0003=\u0003=\u0005=\u03fc\n=\u0003>\u0003>\u0003",
    "?\u0003?\u0003?\u0005?\u0403\n?\u0003@\u0003@\u0003A\u0003A\u0003A\u0003",
    "A\u0003A\u0003A\u0003A\u0003A\u0003A\u0003A\u0003A\u0003A\u0003A\u0003",
    "A\u0003A\u0005A\u0416\nA\u0003B\u0003B\u0003C\u0003C\u0005C\u041c\n",
    "C\u0003C\u0002\u0003\u0010D\u0002\u0004\u0006\b\n\f\u000e\u0010\u0012",
    "\u0014\u0016\u0018\u001a\u001c\u001e \"$&(*,.02468:<>@BDFHJLNPRTVXZ",
    "\\^`bdfhjlnprtvxz|~\u0080\u0082\u0084\u0002\u0019\u0003\u0002\u01b3",
    "\u01b4\u0003\u0002\u01b0\u01b2\u0004\u0002\u01b3\u01b4\u01b6\u01b8\u0005",
    "\u0002\u0004\u0004\u0007\u0007\u00a2\u00a2\u0004\u0002\u0004\u00046",
    "6\u0004\u0002\u015d\u015d\u015f\u015f\u0004\u0002\u0104\u0104\u0134",
    "\u0134\u0004\u0002\t\t44\u0004\u0002TT\u015e\u015e\u0004\u0002mm\u0193",
    "\u0194\u0005\u0002NNbb\u0092\u0092\u0006\u0002gg\u0110\u0110\u0123\u0123",
    "\u0158\u0158\u0004\u0002\u0194\u0194\u0196\u0196\u0005\u0002\u00f4\u00f4",
    "\u014f\u014f\u0160\u0160\u0007\u0002\u00d3\u00d3\u0125\u0125\u012b\u012b",
    "\u0170\u0172\u0186\u0187\u0003\u0002\u00e4\u00e5\u0004\u0002\u014e\u014e",
    "\u015f\u015f\u0004\u0002\u0125\u0125\u0194\u0194\u0003\u0002\u0198\u0199",
    "\u0004\u0002\u0194\u0194\u0198\u0198-\u0002II\u00c2\u00c2\u00ca\u00ca",
    "\u00cc\u00cc\u00d3\u00d4\u00d7\u00d9\u00dd\u00de\u00e0\u00e0\u00e2\u00e5",
    "\u00f1\u00f1\u00f3\u00f4\u00f6\u00f6\u00f9\u00f9\u00fc\u00fc\u00fe\u0100",
    "\u0104\u0109\u010b\u010e\u0110\u0110\u0113\u0113\u0115\u0115\u0117\u0119",
    "\u011b\u0127\u012b\u012b\u012f\u012f\u0131\u0131\u0134\u0136\u0138\u0138",
    "\u013a\u013b\u013e\u0145\u0147\u014c\u014e\u0150\u0152\u0152\u0154\u0154",
    "\u0157\u0159\u015b\u0164\u0166\u0167\u0169\u0169\u016c\u0172\u0176\u0179",
    "\u017d\u017d\u017f\u0183\u0185\u018c\u0195\u0195\u0003\u0002\u019e\u01a5",
    "\u0007\u0002\u010a\u010a\u011a\u011a\u0129\u0129\u0175\u0175\u01b2\u01b2",
    "\u04b8\u0002\u0089\u0003\u0002\u0002\u0002\u0004\u008e\u0003\u0002\u0002",
    "\u0002\u0006\u0096\u0003\u0002\u0002\u0002\b\u009a\u0003\u0002\u0002",
    "\u0002\n\u009c\u0003\u0002\u0002\u0002\f\u009e\u0003\u0002\u0002\u0002",
    "\u000e\u00a2\u0003\u0002\u0002\u0002\u0010\u00d2\u0003\u0002\u0002\u0002",
    "\u0012\u00ee\u0003\u0002\u0002\u0002\u0014\u00f0\u0003\u0002\u0002\u0002",
    "\u0016\u00f2\u0003\u0002\u0002\u0002\u0018\u00fa\u0003\u0002\u0002\u0002",
    "\u001a\u0103\u0003\u0002\u0002\u0002\u001c\u013f\u0003\u0002\u0002\u0002",
    "\u001e\u0146\u0003\u0002\u0002\u0002 \u0154\u0003\u0002\u0002\u0002",
    "\"\u0161\u0003\u0002\u0002\u0002$\u018d\u0003\u0002\u0002\u0002&\u01a4",
    "\u0003\u0002\u0002\u0002(\u01a8\u0003\u0002\u0002\u0002*\u01aa\u0003",
    "\u0002\u0002\u0002,\u01c7\u0003\u0002\u0002\u0002.\u01c9\u0003\u0002",
    "\u0002\u00020\u01d6\u0003\u0002\u0002\u00022\u01d8\u0003\u0002\u0002",
    "\u00024\u0202\u0003\u0002\u0002\u00026\u0204\u0003\u0002\u0002\u0002",
    "8\u0226\u0003\u0002\u0002\u0002:\u0228\u0003\u0002\u0002\u0002<\u0244",
    "\u0003\u0002\u0002\u0002>\u0246\u0003\u0002\u0002\u0002@\u024f\u0003",
    "\u0002\u0002\u0002B\u02b2\u0003\u0002\u0002\u0002D\u02b4\u0003\u0002",
    "\u0002\u0002F\u02b9\u0003\u0002\u0002\u0002H\u02bf\u0003\u0002\u0002",
    "\u0002J\u02c3\u0003\u0002\u0002\u0002L\u02c5\u0003\u0002\u0002\u0002",
    "N\u02d2\u0003\u0002\u0002\u0002P\u02d4\u0003\u0002\u0002\u0002R\u02e6",
    "\u0003\u0002\u0002\u0002T\u0308\u0003\u0002\u0002\u0002V\u030b\u0003",
    "\u0002\u0002\u0002X\u030f\u0003\u0002\u0002\u0002Z\u031e\u0003\u0002",
    "\u0002\u0002\\\u0327\u0003\u0002\u0002\u0002^\u032b\u0003\u0002\u0002",
    "\u0002`\u0333\u0003\u0002\u0002\u0002b\u0339\u0003\u0002\u0002\u0002",
    "d\u034c\u0003\u0002\u0002\u0002f\u035a\u0003\u0002\u0002\u0002h\u0361",
    "\u0003\u0002\u0002\u0002j\u036f\u0003\u0002\u0002\u0002l\u0376\u0003",
    "\u0002\u0002\u0002n\u037a\u0003\u0002\u0002\u0002p\u0383\u0003\u0002",
    "\u0002\u0002r\u038c\u0003\u0002\u0002\u0002t\u03e6\u0003\u0002\u0002",
    "\u0002v\u03ea\u0003\u0002\u0002\u0002x\u03fb\u0003\u0002\u0002\u0002",
    "z\u03fd\u0003\u0002\u0002\u0002|\u0402\u0003\u0002\u0002\u0002~\u0404",
    "\u0003\u0002\u0002\u0002\u0080\u0415\u0003\u0002\u0002\u0002\u0082\u0417",
    "\u0003\u0002\u0002\u0002\u0084\u0419\u0003\u0002\u0002\u0002\u0086\u0088",
    "\u0005\u0004\u0003\u0002\u0087\u0086\u0003\u0002\u0002\u0002\u0088\u008b",
    "\u0003\u0002\u0002\u0002\u0089\u0087\u0003\u0002\u0002\u0002\u0089\u008a",
    "\u0003\u0002\u0002\u0002\u008a\u008c\u0003\u0002\u0002\u0002\u008b\u0089",
    "\u0003\u0002\u0002\u0002\u008c\u008d\u0007\u0002\u0002\u0003\u008d\u0003",
    "\u0003\u0002\u0002\u0002\u008e\u0090\u0005\u0006\u0004\u0002\u008f\u0091",
    "\u0005\u000e\b\u0002\u0090\u008f\u0003\u0002\u0002\u0002\u0090\u0091",
    "\u0003\u0002\u0002\u0002\u0091\u0005\u0003\u0002\u0002\u0002\u0092\u0094",
    "\u0005\b\u0005\u0002\u0093\u0095\u0007\u01ae\u0002\u0002\u0094\u0093",
    "\u0003\u0002\u0002\u0002\u0094\u0095\u0003\u0002\u0002\u0002\u0095\u0097",
    "\u0003\u0002\u0002\u0002\u0096\u0092\u0003\u0002\u0002\u0002\u0097\u0098",
    "\u0003\u0002\u0002\u0002\u0098\u0096\u0003\u0002\u0002\u0002\u0098\u0099",
    "\u0003\u0002\u0002\u0002\u0099\u0007\u0003\u0002\u0002\u0002\u009a\u009b",
    "\u0005\n\u0006\u0002\u009b\t\u0003\u0002\u0002\u0002\u009c\u009d\u0005",
    "\f\u0007\u0002\u009d\u000b\u0003\u0002\u0002\u0002\u009e\u00a0\u0005",
    "\u001e\u0010\u0002\u009f\u00a1\u0005$\u0013\u0002\u00a0\u009f\u0003",
    "\u0002\u0002\u0002\u00a0\u00a1\u0003\u0002\u0002\u0002\u00a1\r\u0003",
    "\u0002\u0002\u0002\u00a2\u00a4\u0007\u010c\u0002\u0002\u00a3\u00a5\u0007",
    "\u0194\u0002\u0002\u00a4\u00a3\u0003\u0002\u0002\u0002\u00a4\u00a5\u0003",
    "\u0002\u0002\u0002\u00a5\u000f\u0003\u0002\u0002\u0002\u00a6\u00a7\b",
    "\t\u0001\u0002\u00a7\u00d3\u00071\u0002\u0002\u00a8\u00d3\u0007m\u0002",
    "\u0002\u00a9\u00d3\u0007\u0193\u0002\u0002\u00aa\u00d3\u0005x=\u0002",
    "\u00ab\u00ac\u0007\u0013\u0002\u0002\u00ac\u00ae\u0005\u0010\t\u0002",
    "\u00ad\u00af\u0005D#\u0002\u00ae\u00ad\u0003\u0002\u0002\u0002\u00af",
    "\u00b0\u0003\u0002\u0002\u0002\u00b0\u00ae\u0003\u0002\u0002\u0002\u00b0",
    "\u00b1\u0003\u0002\u0002\u0002\u00b1\u00b4\u0003\u0002\u0002\u0002\u00b2",
    "\u00b3\u0007;\u0002\u0002\u00b3\u00b5\u0005\u0010\t\u0002\u00b4\u00b2",
    "\u0003\u0002\u0002\u0002\u00b4\u00b5\u0003\u0002\u0002\u0002\u00b5\u00b6",
    "\u0003\u0002\u0002\u0002\u00b6\u00b7\u0007<\u0002\u0002\u00b7\u00d3",
    "\u0003\u0002\u0002\u0002\u00b8\u00ba\u0007\u0013\u0002\u0002\u00b9\u00bb",
    "\u0005F$\u0002\u00ba\u00b9\u0003\u0002\u0002\u0002\u00bb\u00bc\u0003",
    "\u0002\u0002\u0002\u00bc\u00ba\u0003\u0002\u0002\u0002\u00bc\u00bd\u0003",
    "\u0002\u0002\u0002\u00bd\u00c0\u0003\u0002\u0002\u0002\u00be\u00bf\u0007",
    ";\u0002\u0002\u00bf\u00c1\u0005\u0010\t\u0002\u00c0\u00be\u0003\u0002",
    "\u0002\u0002\u00c0\u00c1\u0003\u0002\u0002\u0002\u00c1\u00c2\u0003\u0002",
    "\u0002\u0002\u00c2\u00c3\u0007<\u0002\u0002\u00c3\u00d3\u0003\u0002",
    "\u0002\u0002\u00c4\u00d3\u0005l7\u0002\u00c5\u00c6\u0007\u01ab\u0002",
    "\u0002\u00c6\u00c7\u0005\u0010\t\u0002\u00c7\u00c8\u0007\u01ac\u0002",
    "\u0002\u00c8\u00d3\u0003\u0002\u0002\u0002\u00c9\u00ca\u0007\u01ab\u0002",
    "\u0002\u00ca\u00cb\u0005\u0014\u000b\u0002\u00cb\u00cc\u0007\u01ac\u0002",
    "\u0002\u00cc\u00d3\u0003\u0002\u0002\u0002\u00cd\u00ce\u0007\u01b5\u0002",
    "\u0002\u00ce\u00d3\u0005\u0010\t\b\u00cf\u00d0\t\u0002\u0002\u0002\u00d0",
    "\u00d3\u0005\u0010\t\u0006\u00d1\u00d3\u0005X-\u0002\u00d2\u00a6\u0003",
    "\u0002\u0002\u0002\u00d2\u00a8\u0003\u0002\u0002\u0002\u00d2\u00a9\u0003",
    "\u0002\u0002\u0002\u00d2\u00aa\u0003\u0002\u0002\u0002\u00d2\u00ab\u0003",
    "\u0002\u0002\u0002\u00d2\u00b8\u0003\u0002\u0002\u0002\u00d2\u00c4\u0003",
    "\u0002\u0002\u0002\u00d2\u00c5\u0003\u0002\u0002\u0002\u00d2\u00c9\u0003",
    "\u0002\u0002\u0002\u00d2\u00cd\u0003\u0002\u0002\u0002\u00d2\u00cf\u0003",
    "\u0002\u0002\u0002\u00d2\u00d1\u0003\u0002\u0002\u0002\u00d3\u00e3\u0003",
    "\u0002\u0002\u0002\u00d4\u00d5\f\u0007\u0002\u0002\u00d5\u00d6\t\u0003",
    "\u0002\u0002\u00d6\u00e2\u0005\u0010\t\b\u00d7\u00d8\f\u0005\u0002\u0002",
    "\u00d8\u00d9\t\u0004\u0002\u0002\u00d9\u00e2\u0005\u0010\t\u0006\u00da",
    "\u00db\f\u0004\u0002\u0002\u00db\u00dc\u0005\u0080A\u0002\u00dc\u00dd",
    "\u0005\u0010\t\u0005\u00dd\u00e2\u0003\u0002\u0002\u0002\u00de\u00df",
    "\f\u000e\u0002\u0002\u00df\u00e0\u0007\u001b\u0002\u0002\u00e0\u00e2",
    "\u0005|?\u0002\u00e1\u00d4\u0003\u0002\u0002\u0002\u00e1\u00d7\u0003",
    "\u0002\u0002\u0002\u00e1\u00da\u0003\u0002\u0002\u0002\u00e1\u00de\u0003",
    "\u0002\u0002\u0002\u00e2\u00e5\u0003\u0002\u0002\u0002\u00e3\u00e1\u0003",
    "\u0002\u0002\u0002\u00e3\u00e4\u0003\u0002\u0002\u0002\u00e4\u0011\u0003",
    "\u0002\u0002\u0002\u00e5\u00e3\u0003\u0002\u0002\u0002\u00e6\u00ef\u0007",
    "m\u0002\u0002\u00e7\u00ef\u0005x=\u0002\u00e8\u00ef\u0005B\"\u0002\u00e9",
    "\u00ef\u0007\u0193\u0002\u0002\u00ea\u00eb\u0007\u01ab\u0002\u0002\u00eb",
    "\u00ec\u0005\u0012\n\u0002\u00ec\u00ed\u0007\u01ac\u0002\u0002\u00ed",
    "\u00ef\u0003\u0002\u0002\u0002\u00ee\u00e6\u0003\u0002\u0002\u0002\u00ee",
    "\u00e7\u0003\u0002\u0002\u0002\u00ee\u00e8\u0003\u0002\u0002\u0002\u00ee",
    "\u00e9\u0003\u0002\u0002\u0002\u00ee\u00ea\u0003\u0002\u0002\u0002\u00ef",
    "\u0013\u0003\u0002\u0002\u0002\u00f0\u00f1\u0005\f\u0007\u0002\u00f1",
    "\u0015\u0003\u0002\u0002\u0002\u00f2\u00f7\u0005\u0018\r\u0002\u00f3",
    "\u00f4\u0007y\u0002\u0002\u00f4\u00f6\u0005\u0018\r\u0002\u00f5\u00f3",
    "\u0003\u0002\u0002\u0002\u00f6\u00f9\u0003\u0002\u0002\u0002\u00f7\u00f5",
    "\u0003\u0002\u0002\u0002\u00f7\u00f8\u0003\u0002\u0002\u0002\u00f8\u0017",
    "\u0003\u0002\u0002\u0002\u00f9\u00f7\u0003\u0002\u0002\u0002\u00fa\u00ff",
    "\u0005\u001a\u000e\u0002\u00fb\u00fc\u0007\u0006\u0002\u0002\u00fc\u00fe",
    "\u0005\u001a\u000e\u0002\u00fd\u00fb\u0003\u0002\u0002\u0002\u00fe\u0101",
    "\u0003\u0002\u0002\u0002\u00ff\u00fd\u0003\u0002\u0002\u0002\u00ff\u0100",
    "\u0003\u0002\u0002\u0002\u0100\u0019\u0003\u0002\u0002\u0002\u0101\u00ff",
    "\u0003\u0002\u0002\u0002\u0102\u0104\u0007l\u0002\u0002\u0103\u0102",
    "\u0003\u0002\u0002\u0002\u0103\u0104\u0003\u0002\u0002\u0002\u0104\u0105",
    "\u0003\u0002\u0002\u0002\u0105\u0106\u0005\u001c\u000f\u0002\u0106\u001b",
    "\u0003\u0002\u0002\u0002\u0107\u0108\u0007A\u0002\u0002\u0108\u0109",
    "\u0007\u01ab\u0002\u0002\u0109\u010a\u0005\u0014\u000b\u0002\u010a\u010b",
    "\u0007\u01ac\u0002\u0002\u010b\u0140\u0003\u0002\u0002\u0002\u010c\u010d",
    "\u0005\u0010\t\u0002\u010d\u010e\u0005\u0080A\u0002\u010e\u010f\u0005",
    "\u0010\t\u0002\u010f\u0140\u0003\u0002\u0002\u0002\u0110\u0111\u0005",
    "\u0010\t\u0002\u0111\u0112\u0005\u0080A\u0002\u0112\u0113\t\u0005\u0002",
    "\u0002\u0113\u0114\u0007\u01ab\u0002\u0002\u0114\u0115\u0005\u0014\u000b",
    "\u0002\u0115\u0116\u0007\u01ac\u0002\u0002\u0116\u0140\u0003\u0002\u0002",
    "\u0002\u0117\u0119\u0005\u0010\t\u0002\u0118\u011a\u0007l\u0002\u0002",
    "\u0119\u0118\u0003\u0002\u0002\u0002\u0119\u011a\u0003\u0002\u0002\u0002",
    "\u011a\u011b\u0003\u0002\u0002\u0002\u011b\u011c\u0007\r\u0002\u0002",
    "\u011c\u011d\u0005\u0010\t\u0002\u011d\u011e\u0007\u0006\u0002\u0002",
    "\u011e\u011f\u0005\u0010\t\u0002\u011f\u0140\u0003\u0002\u0002\u0002",
    "\u0120\u0122\u0005\u0010\t\u0002\u0121\u0123\u0007l\u0002\u0002\u0122",
    "\u0121\u0003\u0002\u0002\u0002\u0122\u0123\u0003\u0002\u0002\u0002\u0123",
    "\u0124\u0003\u0002\u0002\u0002\u0124\u0125\u0007X\u0002\u0002\u0125",
    "\u0128\u0007\u01ab\u0002\u0002\u0126\u0129\u0005\u0014\u000b\u0002\u0127",
    "\u0129\u0005P)\u0002\u0128\u0126\u0003\u0002\u0002\u0002\u0128\u0127",
    "\u0003\u0002\u0002\u0002\u0129\u012a\u0003\u0002\u0002\u0002\u012a\u012b",
    "\u0007\u01ac\u0002\u0002\u012b\u0140\u0003\u0002\u0002\u0002\u012c\u012e",
    "\u0005\u0010\t\u0002\u012d\u012f\u0007l\u0002\u0002\u012e\u012d\u0003",
    "\u0002\u0002\u0002\u012e\u012f\u0003\u0002\u0002\u0002\u012f\u0130\u0003",
    "\u0002\u0002\u0002\u0130\u0131\u0007c\u0002\u0002\u0131\u0134\u0005",
    "\u0010\t\u0002\u0132\u0133\u0007>\u0002\u0002\u0133\u0135\u0005\u0010",
    "\t\u0002\u0134\u0132\u0003\u0002\u0002\u0002\u0134\u0135\u0003\u0002",
    "\u0002\u0002\u0135\u0140\u0003\u0002\u0002\u0002\u0136\u0137\u0005\u0010",
    "\t\u0002\u0137\u0138\u0007^\u0002\u0002\u0138\u0139\u0005p9\u0002\u0139",
    "\u0140\u0003\u0002\u0002\u0002\u013a\u013b\u0007\u01ab\u0002\u0002\u013b",
    "\u013c\u0005\u0016\f\u0002\u013c\u013d\u0007\u01ac\u0002\u0002\u013d",
    "\u0140\u0003\u0002\u0002\u0002\u013e\u0140\u0007\u0194\u0002\u0002\u013f",
    "\u0107\u0003\u0002\u0002\u0002\u013f\u010c\u0003\u0002\u0002\u0002\u013f",
    "\u0110\u0003\u0002\u0002\u0002\u013f\u0117\u0003\u0002\u0002\u0002\u013f",
    "\u0120\u0003\u0002\u0002\u0002\u013f\u012c\u0003\u0002\u0002\u0002\u013f",
    "\u0136\u0003\u0002\u0002\u0002\u013f\u013a\u0003\u0002\u0002\u0002\u013f",
    "\u013e\u0003\u0002\u0002\u0002\u0140\u001d\u0003\u0002\u0002\u0002\u0141",
    "\u0147\u0005\"\u0012\u0002\u0142\u0143\u0007\u01ab\u0002\u0002\u0143",
    "\u0144\u0005\u001e\u0010\u0002\u0144\u0145\u0007\u01ac\u0002\u0002\u0145",
    "\u0147\u0003\u0002\u0002\u0002\u0146\u0141\u0003\u0002\u0002\u0002\u0146",
    "\u0142\u0003\u0002\u0002\u0002\u0147\u014b\u0003\u0002\u0002\u0002\u0148",
    "\u014a\u0005 \u0011\u0002\u0149\u0148\u0003\u0002\u0002\u0002\u014a",
    "\u014d\u0003\u0002\u0002\u0002\u014b\u0149\u0003\u0002\u0002\u0002\u014b",
    "\u014c\u0003\u0002\u0002\u0002\u014c\u001f\u0003\u0002\u0002\u0002\u014d",
    "\u014b\u0003\u0002\u0002\u0002\u014e\u0150\u0007\u00b1\u0002\u0002\u014f",
    "\u0151\u0007\u0004\u0002\u0002\u0150\u014f\u0003\u0002\u0002\u0002\u0150",
    "\u0151\u0003\u0002\u0002\u0002\u0151\u0155\u0003\u0002\u0002\u0002\u0152",
    "\u0155\u0007?\u0002\u0002\u0153\u0155\u0007\\\u0002\u0002\u0154\u014e",
    "\u0003\u0002\u0002\u0002\u0154\u0152\u0003\u0002\u0002\u0002\u0154\u0153",
    "\u0003\u0002\u0002\u0002\u0155\u015f\u0003\u0002\u0002\u0002\u0156\u0160",
    "\u0005\"\u0012\u0002\u0157\u0158\u0007\u01ab\u0002\u0002\u0158\u0159",
    "\u0005\u001e\u0010\u0002\u0159\u015a\u0007\u01ac\u0002\u0002\u015a\u015c",
    "\u0003\u0002\u0002\u0002\u015b\u0157\u0003\u0002\u0002\u0002\u015c\u015d",
    "\u0003\u0002\u0002\u0002\u015d\u015b\u0003\u0002\u0002\u0002\u015d\u015e",
    "\u0003\u0002\u0002\u0002\u015e\u0160\u0003\u0002\u0002\u0002\u015f\u0156",
    "\u0003\u0002\u0002\u0002\u015f\u015b\u0003\u0002\u0002\u0002\u0160!",
    "\u0003\u0002\u0002\u0002\u0161\u0163\u0007\u009a\u0002\u0002\u0162\u0164",
    "\t\u0006\u0002\u0002\u0163\u0162\u0003\u0002\u0002\u0002\u0163\u0164",
    "\u0003\u0002\u0002\u0002\u0164\u016e\u0003\u0002\u0002\u0002\u0165\u0166",
    "\u0007\u00aa\u0002\u0002\u0166\u0168\u0005\u0010\t\u0002\u0167\u0169",
    "\u0007~\u0002\u0002\u0168\u0167\u0003\u0002\u0002\u0002\u0168\u0169",
    "\u0003\u0002\u0002\u0002\u0169\u016c\u0003\u0002\u0002\u0002\u016a\u016b",
    "\u0007\u00bf\u0002\u0002\u016b\u016d\u0007\u0178\u0002\u0002\u016c\u016a",
    "\u0003\u0002\u0002\u0002\u016c\u016d\u0003\u0002\u0002\u0002\u016d\u016f",
    "\u0003\u0002\u0002\u0002\u016e\u0165\u0003\u0002\u0002\u0002\u016e\u016f",
    "\u0003\u0002\u0002\u0002\u016f\u0170\u0003\u0002\u0002\u0002\u0170\u0173",
    "\u0005*\u0016\u0002\u0171\u0172\u0007]\u0002\u0002\u0172\u0174\u0005",
    "f4\u0002\u0173\u0171\u0003\u0002\u0002\u0002\u0173\u0174\u0003\u0002",
    "\u0002\u0002\u0174\u0177\u0003\u0002\u0002\u0002\u0175\u0176\u0007M",
    "\u0002\u0002\u0176\u0178\u0005.\u0018\u0002\u0177\u0175\u0003\u0002",
    "\u0002\u0002\u0177\u0178\u0003\u0002\u0002\u0002\u0178\u017b\u0003\u0002",
    "\u0002\u0002\u0179\u017a\u0007\u00bd\u0002\u0002\u017a\u017c\u0005\u0016",
    "\f\u0002\u017b\u0179\u0003\u0002\u0002\u0002\u017b\u017c\u0003\u0002",
    "\u0002\u0002\u017c\u0187\u0003\u0002\u0002\u0002\u017d\u017e\u0007R",
    "\u0002\u0002\u017e\u017f\u0007\u0011\u0002\u0002\u017f\u0184\u0005(",
    "\u0015\u0002\u0180\u0181\u0007\u01ad\u0002\u0002\u0181\u0183\u0005(",
    "\u0015\u0002\u0182\u0180\u0003\u0002\u0002\u0002\u0183\u0186\u0003\u0002",
    "\u0002\u0002\u0184\u0182\u0003\u0002\u0002\u0002\u0184\u0185\u0003\u0002",
    "\u0002\u0002\u0185\u0188\u0003\u0002\u0002\u0002\u0186\u0184\u0003\u0002",
    "\u0002\u0002\u0187\u017d\u0003\u0002\u0002\u0002\u0187\u0188\u0003\u0002",
    "\u0002\u0002\u0188\u018b\u0003\u0002\u0002\u0002\u0189\u018a\u0007S",
    "\u0002\u0002\u018a\u018c\u0005\u0016\f\u0002\u018b\u0189\u0003\u0002",
    "\u0002\u0002\u018b\u018c\u0003\u0002\u0002\u0002\u018c#\u0003\u0002",
    "\u0002\u0002\u018d\u018e\u0007z\u0002\u0002\u018e\u018f\u0007\u0011",
    "\u0002\u0002\u018f\u0194\u0005&\u0014\u0002\u0190\u0191\u0007\u01ad",
    "\u0002\u0002\u0191\u0193\u0005&\u0014\u0002\u0192\u0190\u0003\u0002",
    "\u0002\u0002\u0193\u0196\u0003\u0002\u0002\u0002\u0194\u0192\u0003\u0002",
    "\u0002\u0002\u0194\u0195\u0003\u0002\u0002\u0002\u0195\u01a2\u0003\u0002",
    "\u0002\u0002\u0196\u0194\u0003\u0002\u0002\u0002\u0197\u0198\u0007\u013e",
    "\u0002\u0002\u0198\u0199\u0005\u0010\t\u0002\u0199\u01a0\t\u0007\u0002",
    "\u0002\u019a\u019b\u0007D\u0002\u0002\u019b\u019c\t\b\u0002\u0002\u019c",
    "\u019d\u0005\u0010\t\u0002\u019d\u019e\t\u0007\u0002\u0002\u019e\u019f",
    "\u0007\u0140\u0002\u0002\u019f\u01a1\u0003\u0002\u0002\u0002\u01a0\u019a",
    "\u0003\u0002\u0002\u0002\u01a0\u01a1\u0003\u0002\u0002\u0002\u01a1\u01a3",
    "\u0003\u0002\u0002\u0002\u01a2\u0197\u0003\u0002\u0002\u0002\u01a2\u01a3",
    "\u0003\u0002\u0002\u0002\u01a3%\u0003\u0002\u0002\u0002\u01a4\u01a6",
    "\u0005\u0010\t\u0002\u01a5\u01a7\t\t\u0002\u0002\u01a6\u01a5\u0003\u0002",
    "\u0002\u0002\u01a6\u01a7\u0003\u0002\u0002\u0002\u01a7\'\u0003\u0002",
    "\u0002\u0002\u01a8\u01a9\u0005\u0010\t\u0002\u01a9)\u0003\u0002\u0002",
    "\u0002\u01aa\u01af\u0005,\u0017\u0002\u01ab\u01ac\u0007\u01ad\u0002",
    "\u0002\u01ac\u01ae\u0005,\u0017\u0002\u01ad\u01ab\u0003\u0002\u0002",
    "\u0002\u01ae\u01b1\u0003\u0002\u0002\u0002\u01af\u01ad\u0003\u0002\u0002",
    "\u0002\u01af\u01b0\u0003\u0002\u0002\u0002\u01b0+\u0003\u0002\u0002",
    "\u0002\u01b1\u01af\u0003\u0002\u0002\u0002\u01b2\u01b3\u0005f4\u0002",
    "\u01b3\u01b4\u0007\u01a6\u0002\u0002\u01b4\u01b6\u0003\u0002\u0002\u0002",
    "\u01b5\u01b2\u0003\u0002\u0002\u0002\u01b5\u01b6\u0003\u0002\u0002\u0002",
    "\u01b6\u01ba\u0003\u0002\u0002\u0002\u01b7\u01bb\u0007\u01b0\u0002\u0002",
    "\u01b8\u01b9\u0007\u01aa\u0002\u0002\u01b9\u01bb\t\n\u0002\u0002\u01ba",
    "\u01b7\u0003\u0002\u0002\u0002\u01ba\u01b8\u0003\u0002\u0002\u0002\u01bb",
    "\u01c8\u0003\u0002\u0002\u0002\u01bc\u01bd\u0005N(\u0002\u01bd\u01be",
    "\u0007\u019a\u0002\u0002\u01be\u01bf\u0005\u0010\t\u0002\u01bf\u01c8",
    "\u0003\u0002\u0002\u0002\u01c0\u01c5\u0005\u0010\t\u0002\u01c1\u01c3",
    "\u0007\b\u0002\u0002\u01c2\u01c1\u0003\u0002\u0002\u0002\u01c2\u01c3",
    "\u0003\u0002\u0002\u0002\u01c3\u01c4\u0003\u0002\u0002\u0002\u01c4\u01c6",
    "\u0005N(\u0002\u01c5\u01c2\u0003\u0002\u0002\u0002\u01c5\u01c6\u0003",
    "\u0002\u0002\u0002\u01c6\u01c8\u0003\u0002\u0002\u0002\u01c7\u01b5\u0003",
    "\u0002\u0002\u0002\u01c7\u01bc\u0003\u0002\u0002\u0002\u01c7\u01c0\u0003",
    "\u0002\u0002\u0002\u01c8-\u0003\u0002\u0002\u0002\u01c9\u01ce\u0005",
    "0\u0019\u0002\u01ca\u01cb\u0007\u01ad\u0002\u0002\u01cb\u01cd\u0005",
    "0\u0019\u0002\u01cc\u01ca\u0003\u0002\u0002\u0002\u01cd\u01d0\u0003",
    "\u0002\u0002\u0002\u01ce\u01cc\u0003\u0002\u0002\u0002\u01ce\u01cf\u0003",
    "\u0002\u0002\u0002\u01cf/\u0003\u0002\u0002\u0002\u01d0\u01ce\u0003",
    "\u0002\u0002\u0002\u01d1\u01d7\u00052\u001a\u0002\u01d2\u01d3\u0007",
    "\u01ab\u0002\u0002\u01d3\u01d4\u00052\u001a\u0002\u01d4\u01d5\u0007",
    "\u01ac\u0002\u0002\u01d5\u01d7\u0003\u0002\u0002\u0002\u01d6\u01d1\u0003",
    "\u0002\u0002\u0002\u01d6\u01d2\u0003\u0002\u0002\u0002\u01d71\u0003",
    "\u0002\u0002\u0002\u01d8\u01dc\u00054\u001b\u0002\u01d9\u01db\u0005",
    "8\u001d\u0002\u01da\u01d9\u0003\u0002\u0002\u0002\u01db\u01de\u0003",
    "\u0002\u0002\u0002\u01dc\u01da\u0003\u0002\u0002\u0002\u01dc\u01dd\u0003",
    "\u0002\u0002\u0002\u01dd3\u0003\u0002\u0002\u0002\u01de\u01dc\u0003",
    "\u0002\u0002\u0002\u01df\u01e1\u0005:\u001e\u0002\u01e0\u01e2\u0005",
    "H%\u0002\u01e1\u01e0\u0003\u0002\u0002\u0002\u01e1\u01e2\u0003\u0002",
    "\u0002\u0002\u01e2\u0203\u0003\u0002\u0002\u0002\u01e3\u01e5\u0005<",
    "\u001f\u0002\u01e4\u01e6\u0005H%\u0002\u01e5\u01e4\u0003\u0002\u0002",
    "\u0002\u01e5\u01e6\u0003\u0002\u0002\u0002\u01e6\u0203\u0003\u0002\u0002",
    "\u0002\u01e7\u01ec\u0005@!\u0002\u01e8\u01ea\u0005H%\u0002\u01e9\u01eb",
    "\u0005L\'\u0002\u01ea\u01e9\u0003\u0002\u0002\u0002\u01ea\u01eb\u0003",
    "\u0002\u0002\u0002\u01eb\u01ed\u0003\u0002\u0002\u0002\u01ec\u01e8\u0003",
    "\u0002\u0002\u0002\u01ec\u01ed\u0003\u0002\u0002\u0002\u01ed\u0203\u0003",
    "\u0002\u0002\u0002\u01ee\u01ef\u00056\u001c\u0002\u01ef\u01f0\u0005",
    "H%\u0002\u01f0\u0203\u0003\u0002\u0002\u0002\u01f1\u01f3\u0005B\"\u0002",
    "\u01f2\u01f4\u0005H%\u0002\u01f3\u01f2\u0003\u0002\u0002\u0002\u01f3",
    "\u01f4\u0003\u0002\u0002\u0002\u01f4\u0203\u0003\u0002\u0002\u0002\u01f5",
    "\u01f7\u0007\u0193\u0002\u0002\u01f6\u01f8\u0005H%\u0002\u01f7\u01f6",
    "\u0003\u0002\u0002\u0002\u01f7\u01f8\u0003\u0002\u0002\u0002\u01f8\u0203",
    "\u0003\u0002\u0002\u0002\u01f9\u01fa\u0007\u0193\u0002\u0002\u01fa\u01fb",
    "\u0007\u01a6\u0002\u0002\u01fb\u0200\u0005B\"\u0002\u01fc\u01fe\u0005",
    "H%\u0002\u01fd\u01ff\u0005L\'\u0002\u01fe\u01fd\u0003\u0002\u0002\u0002",
    "\u01fe\u01ff\u0003\u0002\u0002\u0002\u01ff\u0201\u0003\u0002\u0002\u0002",
    "\u0200\u01fc\u0003\u0002\u0002\u0002\u0200\u0201\u0003\u0002\u0002\u0002",
    "\u0201\u0203\u0003\u0002\u0002\u0002\u0202\u01df\u0003\u0002\u0002\u0002",
    "\u0202\u01e3\u0003\u0002\u0002\u0002\u0202\u01e7\u0003\u0002\u0002\u0002",
    "\u0202\u01ee\u0003\u0002\u0002\u0002\u0202\u01f1\u0003\u0002\u0002\u0002",
    "\u0202\u01f5\u0003\u0002\u0002\u0002\u0202\u01f9\u0003\u0002\u0002\u0002",
    "\u02035\u0003\u0002\u0002\u0002\u0204\u0205\u0007\u0014\u0002\u0002",
    "\u0205\u0206\u0007\u01ab\u0002\u0002\u0206\u0207\u0007\u0015\u0002\u0002",
    "\u0207\u0208\u0005f4\u0002\u0208\u0209\u0007\u01ad\u0002\u0002\u0209",
    "\u020a\t\u000b\u0002\u0002\u020a\u020b\u0007\u01ac\u0002\u0002\u020b",
    "7\u0003\u0002\u0002\u0002\u020c\u020e\u0007Z\u0002\u0002\u020d\u020c",
    "\u0003\u0002\u0002\u0002\u020d\u020e\u0003\u0002\u0002\u0002\u020e\u0214",
    "\u0003\u0002\u0002\u0002\u020f\u0211\t\f\u0002\u0002\u0210\u0212\u0007",
    "{\u0002\u0002\u0211\u0210\u0003\u0002\u0002\u0002\u0211\u0212\u0003",
    "\u0002\u0002\u0002\u0212\u0214\u0003\u0002\u0002\u0002\u0213\u020d\u0003",
    "\u0002\u0002\u0002\u0213\u020f\u0003\u0002\u0002\u0002\u0214\u0216\u0003",
    "\u0002\u0002\u0002\u0215\u0217\t\r\u0002\u0002\u0216\u0215\u0003\u0002",
    "\u0002\u0002\u0216\u0217\u0003\u0002\u0002\u0002\u0217\u0218\u0003\u0002",
    "\u0002\u0002\u0218\u0219\u0007_\u0002\u0002\u0219\u021a\u00050\u0019",
    "\u0002\u021a\u021b\u0007r\u0002\u0002\u021b\u021c\u0005\u0016\f\u0002",
    "\u021c\u0227\u0003\u0002\u0002\u0002\u021d\u021e\u0007&\u0002\u0002",
    "\u021e\u021f\u0007_\u0002\u0002\u021f\u0227\u00050\u0019\u0002\u0220",
    "\u0221\u0007&\u0002\u0002\u0221\u0222\u0007\u00ca\u0002\u0002\u0222",
    "\u0227\u00050\u0019\u0002\u0223\u0224\u0007{\u0002\u0002\u0224\u0225",
    "\u0007\u00ca\u0002\u0002\u0225\u0227\u00050\u0019\u0002\u0226\u0213",
    "\u0003\u0002\u0002\u0002\u0226\u021d\u0003\u0002\u0002\u0002\u0226\u0220",
    "\u0003\u0002\u0002\u0002\u0226\u0223\u0003\u0002\u0002\u0002\u02279",
    "\u0003\u0002\u0002\u0002\u0228\u0229\u0005f4\u0002\u0229;\u0003\u0002",
    "\u0002\u0002\u022a\u022b\u0007v\u0002\u0002\u022b\u022c\u0007\u01ab",
    "\u0002\u0002\u022c\u022d\u0007\u0196\u0002\u0002\u022d\u022e\u0007\u01ad",
    "\u0002\u0002\u022e\u022f\u0007\u0196\u0002\u0002\u022f\u0230\u0007\u01ad",
    "\u0002\u0002\u0230\u0231\u0007\u0196\u0002\u0002\u0231\u0245\u0007\u01ac",
    "\u0002\u0002\u0232\u0233\u0007v\u0002\u0002\u0233\u0234\u0007\u01ab",
    "\u0002\u0002\u0234\u0235\u0007\u0010\u0002\u0002\u0235\u0236\u0007\u0196",
    "\u0002\u0002\u0236\u0240\u0007\u01ad\u0002\u0002\u0237\u023c\u0005>",
    " \u0002\u0238\u0239\u0007\u01ad\u0002\u0002\u0239\u023b\u0005> \u0002",
    "\u023a\u0238\u0003\u0002\u0002\u0002\u023b\u023e\u0003\u0002\u0002\u0002",
    "\u023c\u023a\u0003\u0002\u0002\u0002\u023c\u023d\u0003\u0002\u0002\u0002",
    "\u023d\u0241\u0003\u0002\u0002\u0002\u023e\u023c\u0003\u0002\u0002\u0002",
    "\u023f\u0241\u0005|?\u0002\u0240\u0237\u0003\u0002\u0002\u0002\u0240",
    "\u023f\u0003\u0002\u0002\u0002\u0241\u0242\u0003\u0002\u0002\u0002\u0242",
    "\u0243\u0007\u01ac\u0002\u0002\u0243\u0245\u0003\u0002\u0002\u0002\u0244",
    "\u022a\u0003\u0002\u0002\u0002\u0244\u0232\u0003\u0002\u0002\u0002\u0245",
    "=\u0003\u0002\u0002\u0002\u0246\u0247\u0005|?\u0002\u0247\u0248\u0007",
    "\u019a\u0002\u0002\u0248\u0249\t\u000e\u0002\u0002\u0249?\u0003\u0002",
    "\u0002\u0002\u024a\u0250\u0005\u0014\u000b\u0002\u024b\u024c\u0007\u01ab",
    "\u0002\u0002\u024c\u024d\u0005\u0014\u000b\u0002\u024d\u024e\u0007\u01ac",
    "\u0002\u0002\u024e\u0250\u0003\u0002\u0002\u0002\u024f\u024a\u0003\u0002",
    "\u0002\u0002\u024f\u024b\u0003\u0002\u0002\u0002\u0250A\u0003\u0002",
    "\u0002\u0002\u0251\u02b3\u0005R*\u0002\u0252\u02b3\u0005T+\u0002\u0253",
    "\u0254\u0005r:\u0002\u0254\u0256\u0007\u01ab\u0002\u0002\u0255\u0257",
    "\u0005P)\u0002\u0256\u0255\u0003\u0002\u0002\u0002\u0256\u0257\u0003",
    "\u0002\u0002\u0002\u0257\u0258\u0003\u0002\u0002\u0002\u0258\u0259\u0007",
    "\u01ac\u0002\u0002\u0259\u02b3\u0003\u0002\u0002\u0002\u025a\u025b\u0007",
    "\u00d5\u0002\u0002\u025b\u025c\u0007\u01ab\u0002\u0002\u025c\u025d\u0007",
    "\u01b0\u0002\u0002\u025d\u02b3\u0007\u01ac\u0002\u0002\u025e\u025f\u0007",
    "\u00d8\u0002\u0002\u025f\u0260\u0007\u01ab\u0002\u0002\u0260\u0261\u0005",
    "\u0010\t\u0002\u0261\u0262\u0007\b\u0002\u0002\u0262\u0263\u0005t;\u0002",
    "\u0263\u0264\u0007\u01ac\u0002\u0002\u0264\u02b3\u0003\u0002\u0002\u0002",
    "\u0265\u0266\u0007$\u0002\u0002\u0266\u0267\u0007\u01ab\u0002\u0002",
    "\u0267\u0268\u0005t;\u0002\u0268\u0269\u0007\u01ad\u0002\u0002\u0269",
    "\u026c\u0005\u0010\t\u0002\u026a\u026b\u0007\u01ad\u0002\u0002\u026b",
    "\u026d\u0005\u0010\t\u0002\u026c\u026a\u0003\u0002\u0002\u0002\u026c",
    "\u026d\u0003\u0002\u0002\u0002\u026d\u026e\u0003\u0002\u0002\u0002\u026e",
    "\u026f\u0007\u01ac\u0002\u0002\u026f\u02b3\u0003\u0002\u0002\u0002\u0270",
    "\u0271\u0007\u00dc\u0002\u0002\u0271\u0272\u0007\u01ab\u0002\u0002\u0272",
    "\u0273\u0007\u01b0\u0002\u0002\u0273\u02b3\u0007\u01ac\u0002\u0002\u0274",
    "\u0275\u0007\u001a\u0002\u0002\u0275\u0276\u0007\u01ab\u0002\u0002\u0276",
    "\u0277\u0005P)\u0002\u0277\u0278\u0007\u01ac\u0002\u0002\u0278\u02b3",
    "\u0003\u0002\u0002\u0002\u0279\u02b3\u0007*\u0002\u0002\u027a\u02b3",
    "\u0007+\u0002\u0002\u027b\u027c\u0007\u00e8\u0002\u0002\u027c\u027d",
    "\u0007\u01ab\u0002\u0002\u027d\u027e\u0007\u0195\u0002\u0002\u027e\u027f",
    "\u0007\u01ad\u0002\u0002\u027f\u0280\u0005\u0010\t\u0002\u0280\u0281",
    "\u0007\u01ad\u0002\u0002\u0281\u0282\u0005\u0010\t\u0002\u0282\u0283",
    "\u0007\u01ac\u0002\u0002\u0283\u02b3\u0003\u0002\u0002\u0002\u0284\u0285",
    "\u0007\u00e9\u0002\u0002\u0285\u0286\u0007\u01ab\u0002\u0002\u0286\u0287",
    "\u0007\u0195\u0002\u0002\u0287\u0288\u0007\u01ad\u0002\u0002\u0288\u0289",
    "\u0005\u0010\t\u0002\u0289\u028a\u0007\u01ad\u0002\u0002\u028a\u028b",
    "\u0005\u0010\t\u0002\u028b\u028c\u0007\u01ac\u0002\u0002\u028c\u02b3",
    "\u0003\u0002\u0002\u0002\u028d\u028e\u0007\u00ea\u0002\u0002\u028e\u028f",
    "\u0007\u01ab\u0002\u0002\u028f\u0290\u0007\u0195\u0002\u0002\u0290\u0291",
    "\u0007\u01ad\u0002\u0002\u0291\u0292\u0005\u0010\t\u0002\u0292\u0293",
    "\u0007\u01ac\u0002\u0002\u0293\u02b3\u0003\u0002\u0002\u0002\u0294\u0295",
    "\u0007\u00eb\u0002\u0002\u0295\u0296\u0007\u01ab\u0002\u0002\u0296\u0297",
    "\u0007\u0195\u0002\u0002\u0297\u0298\u0007\u01ad\u0002\u0002\u0298\u0299",
    "\u0005\u0010\t\u0002\u0299\u029a\u0007\u01ac\u0002\u0002\u029a\u02b3",
    "\u0003\u0002\u0002\u0002\u029b\u029c\u0007T\u0002\u0002\u029c\u029d",
    "\u0007\u01ab\u0002\u0002\u029d\u02a0\u0005t;\u0002\u029e\u029f\u0007",
    "\u01ad\u0002\u0002\u029f\u02a1\u0007\u0194\u0002\u0002\u02a0\u029e\u0003",
    "\u0002\u0002\u0002\u02a0\u02a1\u0003\u0002\u0002\u0002\u02a1\u02a4\u0003",
    "\u0002\u0002\u0002\u02a2\u02a3\u0007\u01ad\u0002\u0002\u02a3\u02a5\u0007",
    "\u0194\u0002\u0002\u02a4\u02a2\u0003\u0002\u0002\u0002\u02a4\u02a5\u0003",
    "\u0002\u0002\u0002\u02a5\u02a6\u0003\u0002\u0002\u0002\u02a6\u02a7\u0007",
    "\u01ac\u0002\u0002\u02a7\u02b3\u0003\u0002\u0002\u0002\u02a8\u02b3\u0007",
    "\u012d\u0002\u0002\u02a9\u02aa\u0007n\u0002\u0002\u02aa\u02ab\u0007",
    "\u01ab\u0002\u0002\u02ab\u02ac\u0005\u0010\t\u0002\u02ac\u02ad\u0007",
    "\u01ad\u0002\u0002\u02ad\u02ae\u0005\u0010\t\u0002\u02ae\u02af\u0007",
    "\u01ac\u0002\u0002\u02af\u02b3\u0003\u0002\u0002\u0002\u02b0\u02b3\u0007",
    "\u009e\u0002\u0002\u02b1\u02b3\u0007\u00a4\u0002\u0002\u02b2\u0251\u0003",
    "\u0002\u0002\u0002\u02b2\u0252\u0003\u0002\u0002\u0002\u02b2\u0253\u0003",
    "\u0002\u0002\u0002\u02b2\u025a\u0003\u0002\u0002\u0002\u02b2\u025e\u0003",
    "\u0002\u0002\u0002\u02b2\u0265\u0003\u0002\u0002\u0002\u02b2\u0270\u0003",
    "\u0002\u0002\u0002\u02b2\u0274\u0003\u0002\u0002\u0002\u02b2\u0279\u0003",
    "\u0002\u0002\u0002\u02b2\u027a\u0003\u0002\u0002\u0002\u02b2\u027b\u0003",
    "\u0002\u0002\u0002\u02b2\u0284\u0003\u0002\u0002\u0002\u02b2\u028d\u0003",
    "\u0002\u0002\u0002\u02b2\u0294\u0003\u0002\u0002\u0002\u02b2\u029b\u0003",
    "\u0002\u0002\u0002\u02b2\u02a8\u0003\u0002\u0002\u0002\u02b2\u02a9\u0003",
    "\u0002\u0002\u0002\u02b2\u02b0\u0003\u0002\u0002\u0002\u02b2\u02b1\u0003",
    "\u0002\u0002\u0002\u02b3C\u0003\u0002\u0002\u0002\u02b4\u02b5\u0007",
    "\u00bc\u0002\u0002\u02b5\u02b6\u0005\u0010\t\u0002\u02b6\u02b7\u0007",
    "\u00a8\u0002\u0002\u02b7\u02b8\u0005\u0010\t\u0002\u02b8E\u0003\u0002",
    "\u0002\u0002\u02b9\u02ba\u0007\u00bc\u0002\u0002\u02ba\u02bb\u0005\u0016",
    "\f\u0002\u02bb\u02bc\u0007\u00a8\u0002\u0002\u02bc\u02bd\u0005\u0010",
    "\t\u0002\u02bdG\u0003\u0002\u0002\u0002\u02be\u02c0\u0007\b\u0002\u0002",
    "\u02bf\u02be\u0003\u0002\u0002\u0002\u02bf\u02c0\u0003\u0002\u0002\u0002",
    "\u02c0\u02c1\u0003\u0002\u0002\u0002\u02c1\u02c2\u0005J&\u0002\u02c2",
    "I\u0003\u0002\u0002\u0002\u02c3\u02c4\u0005|?\u0002\u02c4K\u0003\u0002",
    "\u0002\u0002\u02c5\u02c6\u0007\u01ab\u0002\u0002\u02c6\u02cb\u0005N",
    "(\u0002\u02c7\u02c8\u0007\u01ad\u0002\u0002\u02c8\u02ca\u0005N(\u0002",
    "\u02c9\u02c7\u0003\u0002\u0002\u0002\u02ca\u02cd\u0003\u0002\u0002\u0002",
    "\u02cb\u02c9\u0003\u0002\u0002\u0002\u02cb\u02cc\u0003\u0002\u0002\u0002",
    "\u02cc\u02ce\u0003\u0002\u0002\u0002\u02cd\u02cb\u0003\u0002\u0002\u0002",
    "\u02ce\u02cf\u0007\u01ac\u0002\u0002\u02cfM\u0003\u0002\u0002\u0002",
    "\u02d0\u02d3\u0005|?\u0002\u02d1\u02d3\u0007\u0196\u0002\u0002\u02d2",
    "\u02d0\u0003\u0002\u0002\u0002\u02d2\u02d1\u0003\u0002\u0002\u0002\u02d3",
    "O\u0003\u0002\u0002\u0002\u02d4\u02d9\u0005\u0010\t\u0002\u02d5\u02d6",
    "\u0007\u01ad\u0002\u0002\u02d6\u02d8\u0005\u0010\t\u0002\u02d7\u02d5",
    "\u0003\u0002\u0002\u0002\u02d8\u02db\u0003\u0002\u0002\u0002\u02d9\u02d7",
    "\u0003\u0002\u0002\u0002\u02d9\u02da\u0003\u0002\u0002\u0002\u02daQ",
    "\u0003\u0002\u0002\u0002\u02db\u02d9\u0003\u0002\u0002\u0002\u02dc\u02dd",
    "\t\u000f\u0002\u0002\u02dd\u02de\u0007\u01ab\u0002\u0002\u02de\u02df",
    "\u0007\u01ac\u0002\u0002\u02df\u02e7\u0005X-\u0002\u02e0\u02e1\u0007",
    "\u013a\u0002\u0002\u02e1\u02e2\u0007\u01ab\u0002\u0002\u02e2\u02e3\u0005",
    "\u0010\t\u0002\u02e3\u02e4\u0007\u01ac\u0002\u0002\u02e4\u02e5\u0005",
    "X-\u0002\u02e5\u02e7\u0003\u0002\u0002\u0002\u02e6\u02dc\u0003\u0002",
    "\u0002\u0002\u02e6\u02e0\u0003\u0002\u0002\u0002\u02e7S\u0003\u0002",
    "\u0002\u0002\u02e8\u02e9\t\u0010\u0002\u0002\u02e9\u02ea\u0007\u01ab",
    "\u0002\u0002\u02ea\u02eb\u0005V,\u0002\u02eb\u02ed\u0007\u01ac\u0002",
    "\u0002\u02ec\u02ee\u0005X-\u0002\u02ed\u02ec\u0003\u0002\u0002\u0002",
    "\u02ed\u02ee\u0003\u0002\u0002\u0002\u02ee\u0309\u0003\u0002\u0002\u0002",
    "\u02ef\u02f0\t\u0011\u0002\u0002\u02f0\u02f3\u0007\u01ab\u0002\u0002",
    "\u02f1\u02f4\u0007\u01b0\u0002\u0002\u02f2\u02f4\u0005V,\u0002\u02f3",
    "\u02f1\u0003\u0002\u0002\u0002\u02f3\u02f2\u0003\u0002\u0002\u0002\u02f4",
    "\u02f5\u0003\u0002\u0002\u0002\u02f5\u02f7\u0007\u01ac\u0002\u0002\u02f6",
    "\u02f8\u0005X-\u0002\u02f7\u02f6\u0003\u0002\u0002\u0002\u02f7\u02f8",
    "\u0003\u0002\u0002\u0002\u02f8\u0309\u0003\u0002\u0002\u0002\u02f9\u02fa",
    "\u0007\u00dd\u0002\u0002\u02fa\u02fb\u0007\u01ab\u0002\u0002\u02fb\u02fc",
    "\u0005V,\u0002\u02fc\u02fd\u0007\u01ac\u0002\u0002\u02fd\u0309\u0003",
    "\u0002\u0002\u0002\u02fe\u02ff\u0007\u010d\u0002\u0002\u02ff\u0300\u0007",
    "\u01ab\u0002\u0002\u0300\u0301\u0005\u0010\t\u0002\u0301\u0302\u0007",
    "\u01ac\u0002\u0002\u0302\u0309\u0003\u0002\u0002\u0002\u0303\u0304\u0007",
    "\u010e\u0002\u0002\u0304\u0305\u0007\u01ab\u0002\u0002\u0305\u0306\u0005",
    "P)\u0002\u0306\u0307\u0007\u01ac\u0002\u0002\u0307\u0309\u0003\u0002",
    "\u0002\u0002\u0308\u02e8\u0003\u0002\u0002\u0002\u0308\u02ef\u0003\u0002",
    "\u0002\u0002\u0308\u02f9\u0003\u0002\u0002\u0002\u0308\u02fe\u0003\u0002",
    "\u0002\u0002\u0308\u0303\u0003\u0002\u0002\u0002\u0309U\u0003\u0002",
    "\u0002\u0002\u030a\u030c\t\u0006\u0002\u0002\u030b\u030a\u0003\u0002",
    "\u0002\u0002\u030b\u030c\u0003\u0002\u0002\u0002\u030c\u030d\u0003\u0002",
    "\u0002\u0002\u030d\u030e\u0005\u0010\t\u0002\u030eW\u0003\u0002\u0002",
    "\u0002\u030f\u0310\u0007|\u0002\u0002\u0310\u0314\u0007\u01ab\u0002",
    "\u0002\u0311\u0312\u0007\u0148\u0002\u0002\u0312\u0313\u0007\u0011\u0002",
    "\u0002\u0313\u0315\u0005P)\u0002\u0314\u0311\u0003\u0002\u0002\u0002",
    "\u0314\u0315\u0003\u0002\u0002\u0002\u0315\u0317\u0003\u0002\u0002\u0002",
    "\u0316\u0318\u0005$\u0013\u0002\u0317\u0316\u0003\u0002\u0002\u0002",
    "\u0317\u0318\u0003\u0002\u0002\u0002\u0318\u031a\u0003\u0002\u0002\u0002",
    "\u0319\u031b\u0005Z.\u0002\u031a\u0319\u0003\u0002\u0002\u0002\u031a",
    "\u031b\u0003\u0002\u0002\u0002\u031b\u031c\u0003\u0002\u0002\u0002\u031c",
    "\u031d\u0007\u01ac\u0002\u0002\u031dY\u0003\u0002\u0002\u0002\u031e",
    "\u031f\t\u0012\u0002\u0002\u031f\u0320\u0005\\/\u0002\u0320[\u0003\u0002",
    "\u0002\u0002\u0321\u0328\u0005`1\u0002\u0322\u0323\u0007\r\u0002\u0002",
    "\u0323\u0324\u0005^0\u0002\u0324\u0325\u0007\u0006\u0002\u0002\u0325",
    "\u0326\u0005^0\u0002\u0326\u0328\u0003\u0002\u0002\u0002\u0327\u0321",
    "\u0003\u0002\u0002\u0002\u0327\u0322\u0003\u0002\u0002\u0002\u0328]",
    "\u0003\u0002\u0002\u0002\u0329\u032c\u0005`1\u0002\u032a\u032c\u0005",
    "b2\u0002\u032b\u0329\u0003\u0002\u0002\u0002\u032b\u032a\u0003\u0002",
    "\u0002\u0002\u032c_\u0003\u0002\u0002\u0002\u032d\u032e\u0007\u0181",
    "\u0002\u0002\u032e\u0334\u0007\u014a\u0002\u0002\u032f\u0330\u0007\u0194",
    "\u0002\u0002\u0330\u0334\u0007\u014a\u0002\u0002\u0331\u0332\u0007\'",
    "\u0002\u0002\u0332\u0334\u0007\u015d\u0002\u0002\u0333\u032d\u0003\u0002",
    "\u0002\u0002\u0333\u032f\u0003\u0002\u0002\u0002\u0333\u0331\u0003\u0002",
    "\u0002\u0002\u0334a\u0003\u0002\u0002\u0002\u0335\u0336\u0007\u0181",
    "\u0002\u0002\u0336\u033a\u0007\u0105\u0002\u0002\u0337\u0338\u0007\u0194",
    "\u0002\u0002\u0338\u033a\u0007\u0105\u0002\u0002\u0339\u0335\u0003\u0002",
    "\u0002\u0002\u0339\u0337\u0003\u0002\u0002\u0002\u033ac\u0003\u0002",
    "\u0002\u0002\u033b\u033c\u0005|?\u0002\u033c\u033d\u0007\u01a6\u0002",
    "\u0002\u033d\u033e\u0005|?\u0002\u033e\u033f\u0007\u01a6\u0002\u0002",
    "\u033f\u0340\u0005|?\u0002\u0340\u0341\u0007\u01a6\u0002\u0002\u0341",
    "\u034d\u0003\u0002\u0002\u0002\u0342\u0343\u0005|?\u0002\u0343\u0345",
    "\u0007\u01a6\u0002\u0002\u0344\u0346\u0005|?\u0002\u0345\u0344\u0003",
    "\u0002\u0002\u0002\u0345\u0346\u0003\u0002\u0002\u0002\u0346\u0347\u0003",
    "\u0002\u0002\u0002\u0347\u0348\u0007\u01a6\u0002\u0002\u0348\u034d\u0003",
    "\u0002\u0002\u0002\u0349\u034a\u0005|?\u0002\u034a\u034b\u0007\u01a6",
    "\u0002\u0002\u034b\u034d\u0003\u0002\u0002\u0002\u034c\u033b\u0003\u0002",
    "\u0002\u0002\u034c\u0342\u0003\u0002\u0002\u0002\u034c\u0349\u0003\u0002",
    "\u0002\u0002\u034c\u034d\u0003\u0002\u0002\u0002\u034d\u034e\u0003\u0002",
    "\u0002\u0002\u034e\u034f\u0005|?\u0002\u034fe\u0003\u0002\u0002\u0002",
    "\u0350\u0351\u0005|?\u0002\u0351\u0353\u0007\u01a6\u0002\u0002\u0352",
    "\u0354\u0005|?\u0002\u0353\u0352\u0003\u0002\u0002\u0002\u0353\u0354",
    "\u0003\u0002\u0002\u0002\u0354\u0355\u0003\u0002\u0002\u0002\u0355\u0356",
    "\u0007\u01a6\u0002\u0002\u0356\u035b\u0003\u0002\u0002\u0002\u0357\u0358",
    "\u0005|?\u0002\u0358\u0359\u0007\u01a6\u0002\u0002\u0359\u035b\u0003",
    "\u0002\u0002\u0002\u035a\u0350\u0003\u0002\u0002\u0002\u035a\u0357\u0003",
    "\u0002\u0002\u0002\u035a\u035b\u0003\u0002\u0002\u0002\u035b\u035c\u0003",
    "\u0002\u0002\u0002\u035c\u035d\u0005|?\u0002\u035dg\u0003\u0002\u0002",
    "\u0002\u035e\u035f\u0005|?\u0002\u035f\u0360\u0007\u01a6\u0002\u0002",
    "\u0360\u0362\u0003\u0002\u0002\u0002\u0361\u035e\u0003\u0002\u0002\u0002",
    "\u0361\u0362\u0003\u0002\u0002\u0002\u0362\u0363\u0003\u0002\u0002\u0002",
    "\u0363\u0364\u0005|?\u0002\u0364i\u0003\u0002\u0002\u0002\u0365\u0366",
    "\u0005|?\u0002\u0366\u0368\u0007\u01a6\u0002\u0002\u0367\u0369\u0005",
    "|?\u0002\u0368\u0367\u0003\u0002\u0002\u0002\u0368\u0369\u0003\u0002",
    "\u0002\u0002\u0369\u036a\u0003\u0002\u0002\u0002\u036a\u036b\u0007\u01a6",
    "\u0002\u0002\u036b\u0370\u0003\u0002\u0002\u0002\u036c\u036d\u0005|",
    "?\u0002\u036d\u036e\u0007\u01a6\u0002\u0002\u036e\u0370\u0003\u0002",
    "\u0002\u0002\u036f\u0365\u0003\u0002\u0002\u0002\u036f\u036c\u0003\u0002",
    "\u0002\u0002\u036f\u0370\u0003\u0002\u0002\u0002\u0370\u0371\u0003\u0002",
    "\u0002\u0002\u0371\u0372\u0005|?\u0002\u0372k\u0003\u0002\u0002\u0002",
    "\u0373\u0374\u0005f4\u0002\u0374\u0375\u0007\u01a6\u0002\u0002\u0375",
    "\u0377\u0003\u0002\u0002\u0002\u0376\u0373\u0003\u0002\u0002\u0002\u0376",
    "\u0377\u0003\u0002\u0002\u0002\u0377\u0378\u0003\u0002\u0002\u0002\u0378",
    "\u0379\u0005|?\u0002\u0379m\u0003\u0002\u0002\u0002\u037a\u037f\u0005",
    "|?\u0002\u037b\u037c\u0007\u01ad\u0002\u0002\u037c\u037e\u0005|?\u0002",
    "\u037d\u037b\u0003\u0002\u0002\u0002\u037e\u0381\u0003\u0002\u0002\u0002",
    "\u037f\u037d\u0003\u0002\u0002\u0002\u037f\u0380\u0003\u0002\u0002\u0002",
    "\u0380o\u0003\u0002\u0002\u0002\u0381\u037f\u0003\u0002\u0002\u0002",
    "\u0382\u0384\u0007l\u0002\u0002\u0383\u0382\u0003\u0002\u0002\u0002",
    "\u0383\u0384\u0003\u0002\u0002\u0002\u0384\u0385\u0003\u0002\u0002\u0002",
    "\u0385\u0386\u0007m\u0002\u0002\u0386q\u0003\u0002\u0002\u0002\u0387",
    "\u038d\u0005j6\u0002\u0388\u038d\u0007\u0092\u0002\u0002\u0389\u038d",
    "\u0007b\u0002\u0002\u038a\u038d\u0007\u00d5\u0002\u0002\u038b\u038d",
    "\u0007\u00dc\u0002\u0002\u038c\u0387\u0003\u0002\u0002\u0002\u038c\u0388",
    "\u0003\u0002\u0002\u0002\u038c\u0389\u0003\u0002\u0002\u0002\u038c\u038a",
    "\u0003\u0002\u0002\u0002\u038c\u038b\u0003\u0002\u0002\u0002\u038ds",
    "\u0003\u0002\u0002\u0002\u038e\u03e7\u0007\u01b9\u0002\u0002\u038f\u0390",
    "\u0007\u0197\u0002\u0002\u0390\u0391\u0007\u01ab\u0002\u0002\u0391\u0392",
    "\u0007\u0194\u0002\u0002\u0392\u03e7\u0007\u01ac\u0002\u0002\u0393\u03e7",
    "\u0007\u01ba\u0002\u0002\u0394\u0395\u0007\u01bb\u0002\u0002\u0395\u0396",
    "\u0007\u01ab\u0002\u0002\u0396\u0397\u0007\u0194\u0002\u0002\u0397\u03e7",
    "\u0007\u01ac\u0002\u0002\u0398\u03e7\u0007\u01bc\u0002\u0002\u0399\u03e7",
    "\u0007\u01bd\u0002\u0002\u039a\u03e7\u0007\u01be\u0002\u0002\u039b\u039c",
    "\u0007\u01bf\u0002\u0002\u039c\u039d\u0007\u01ab\u0002\u0002\u039d\u039e",
    "\u0007\u0194\u0002\u0002\u039e\u03e7\u0007\u01ac\u0002\u0002\u039f\u03a0",
    "\u0007\u0194\u0002\u0002\u03a0\u03a1\u0007\u01ab\u0002\u0002\u03a1\u03a2",
    "\u0007\u0194\u0002\u0002\u03a2\u03a3\u0007\u01ad\u0002\u0002\u03a3\u03a4",
    "\u0007\u0194\u0002\u0002\u03a4\u03e7\u0007\u01ac\u0002\u0002\u03a5\u03e7",
    "\u0007\u0198\u0002\u0002\u03a6\u03e7\u0007\u01c0\u0002\u0002\u03a7\u03e7",
    "\u0007\u01c1\u0002\u0002\u03a8\u03e7\u0007\u01c2\u0002\u0002\u03a9\u03e7",
    "\u0007\u01c3\u0002\u0002\u03aa\u03e7\u0007\u01c4\u0002\u0002\u03ab\u03e7",
    "\u0007\u01c5\u0002\u0002\u03ac\u03ad\u0007\u01c6\u0002\u0002\u03ad\u03ae",
    "\u0007\u01ab\u0002\u0002\u03ae\u03af\u0007\u0194\u0002\u0002\u03af\u03e7",
    "\u0007\u01ac\u0002\u0002\u03b0\u03e7\u0007\u01c7\u0002\u0002\u03b1\u03b2",
    "\u0007\u01c8\u0002\u0002\u03b2\u03b3\u0007\u01ab\u0002\u0002\u03b3\u03b4",
    "\u0007\u0194\u0002\u0002\u03b4\u03b5\u0007\u01ad\u0002\u0002\u03b5\u03b6",
    "\u0007\u0194\u0002\u0002\u03b6\u03e7\u0007\u01ac\u0002\u0002\u03b7\u03b8",
    "\u0007\u01c9\u0002\u0002\u03b8\u03b9\u0007\u01ab\u0002\u0002\u03b9\u03e7",
    "\u0007\u0194\u0002\u0002\u03ba\u03bb\u0007\u0125\u0002\u0002\u03bb\u03e7",
    "\u0007\u01ac\u0002\u0002\u03bc\u03e7\u0007\u0199\u0002\u0002\u03bd\u03e7",
    "\u0007\u01ca\u0002\u0002\u03be\u03e7\u0007\u01cb\u0002\u0002\u03bf\u03e7",
    "\u0007\u01cc\u0002\u0002\u03c0\u03e7\u0007\u01cd\u0002\u0002\u03c1\u03e7",
    "\u0007\u01ce\u0002\u0002\u03c2\u03c3\u0007\u0179\u0002\u0002\u03c3\u03c4",
    "\u0007\u01ab\u0002\u0002\u03c4\u03c5\u0007\u0194\u0002\u0002\u03c5\u03e7",
    "\u0007\u01ac\u0002\u0002\u03c6\u03e7\u0007\u01cf\u0002\u0002\u03c7\u03e7",
    "\u0007\u01d0\u0002\u0002\u03c8\u03e7\u0007\u01d1\u0002\u0002\u03c9\u03ca",
    "\u0007\u01d2\u0002\u0002\u03ca\u03cb\u0007\u01ab\u0002\u0002\u03cb\u03e7",
    "\u0007\u0194\u0002\u0002\u03cc\u03cd\u0007\u0125\u0002\u0002\u03cd\u03e7",
    "\u0007\u01ac\u0002\u0002\u03ce\u03cf\u0007\u01d3\u0002\u0002\u03cf\u03d0",
    "\u0007\u01ab\u0002\u0002\u03d0\u03e7\u0007\u0194\u0002\u0002\u03d1\u03d2",
    "\u0007\u0125\u0002\u0002\u03d2\u03e7\u0007\u01ac\u0002\u0002\u03d3\u03d5",
    "\u0007\u018b\u0002\u0002\u03d4\u03d3\u0003\u0002\u0002\u0002\u03d5\u03d8",
    "\u0003\u0002\u0002\u0002\u03d6\u03d4\u0003\u0002\u0002\u0002\u03d6\u03d7",
    "\u0003\u0002\u0002\u0002\u03d7\u03e7\u0003\u0002\u0002\u0002\u03d8\u03d6",
    "\u0003\u0002\u0002\u0002\u03d9\u03db\u0005|?\u0002\u03da\u03dc\u0007",
    "T\u0002\u0002\u03db\u03da\u0003\u0002\u0002\u0002\u03db\u03dc\u0003",
    "\u0002\u0002\u0002\u03dc\u03e4\u0003\u0002\u0002\u0002\u03dd\u03de\u0007",
    "\u01ab\u0002\u0002\u03de\u03e1\t\u0013\u0002\u0002\u03df\u03e0\u0007",
    "\u01ad\u0002\u0002\u03e0\u03e2\u0007\u0194\u0002\u0002\u03e1\u03df\u0003",
    "\u0002\u0002\u0002\u03e1\u03e2\u0003\u0002\u0002\u0002\u03e2\u03e3\u0003",
    "\u0002\u0002\u0002\u03e3\u03e5\u0007\u01ac\u0002\u0002\u03e4\u03dd\u0003",
    "\u0002\u0002\u0002\u03e4\u03e5\u0003\u0002\u0002\u0002\u03e5\u03e7\u0003",
    "\u0002\u0002\u0002\u03e6\u038e\u0003\u0002\u0002\u0002\u03e6\u038f\u0003",
    "\u0002\u0002\u0002\u03e6\u0393\u0003\u0002\u0002\u0002\u03e6\u0394\u0003",
    "\u0002\u0002\u0002\u03e6\u0398\u0003\u0002\u0002\u0002\u03e6\u0399\u0003",
    "\u0002\u0002\u0002\u03e6\u039a\u0003\u0002\u0002\u0002\u03e6\u039b\u0003",
    "\u0002\u0002\u0002\u03e6\u039f\u0003\u0002\u0002\u0002\u03e6\u03a5\u0003",
    "\u0002\u0002\u0002\u03e6\u03a6\u0003\u0002\u0002\u0002\u03e6\u03a7\u0003",
    "\u0002\u0002\u0002\u03e6\u03a8\u0003\u0002\u0002\u0002\u03e6\u03a9\u0003",
    "\u0002\u0002\u0002\u03e6\u03aa\u0003\u0002\u0002\u0002\u03e6\u03ab\u0003",
    "\u0002\u0002\u0002\u03e6\u03ac\u0003\u0002\u0002\u0002\u03e6\u03b0\u0003",
    "\u0002\u0002\u0002\u03e6\u03b1\u0003\u0002\u0002\u0002\u03e6\u03b7\u0003",
    "\u0002\u0002\u0002\u03e6\u03ba\u0003\u0002\u0002\u0002\u03e6\u03bc\u0003",
    "\u0002\u0002\u0002\u03e6\u03bd\u0003\u0002\u0002\u0002\u03e6\u03be\u0003",
    "\u0002\u0002\u0002\u03e6\u03bf\u0003\u0002\u0002\u0002\u03e6\u03c0\u0003",
    "\u0002\u0002\u0002\u03e6\u03c1\u0003\u0002\u0002\u0002\u03e6\u03c2\u0003",
    "\u0002\u0002\u0002\u03e6\u03c6\u0003\u0002\u0002\u0002\u03e6\u03c7\u0003",
    "\u0002\u0002\u0002\u03e6\u03c8\u0003\u0002\u0002\u0002\u03e6\u03c9\u0003",
    "\u0002\u0002\u0002\u03e6\u03cc\u0003\u0002\u0002\u0002\u03e6\u03ce\u0003",
    "\u0002\u0002\u0002\u03e6\u03d1\u0003\u0002\u0002\u0002\u03e6\u03d6\u0003",
    "\u0002\u0002\u0002\u03e6\u03d9\u0003\u0002\u0002\u0002\u03e7u\u0003",
    "\u0002\u0002\u0002\u03e8\u03eb\u0007m\u0002\u0002\u03e9\u03eb\u0005",
    "x=\u0002\u03ea\u03e8\u0003\u0002\u0002\u0002\u03ea\u03e9\u0003\u0002",
    "\u0002\u0002\u03ebw\u0003\u0002\u0002\u0002\u03ec\u03fc\u0007\u0196",
    "\u0002\u0002\u03ed\u03fc\u0007\u0197\u0002\u0002\u03ee\u03f0\u0005z",
    ">\u0002\u03ef\u03ee\u0003\u0002\u0002\u0002\u03ef\u03f0\u0003\u0002",
    "\u0002\u0002\u03f0\u03f1\u0003\u0002\u0002\u0002\u03f1\u03fc\u0007\u0194",
    "\u0002\u0002\u03f2\u03f4\u0005z>\u0002\u03f3\u03f2\u0003\u0002\u0002",
    "\u0002\u03f3\u03f4\u0003\u0002\u0002\u0002\u03f4\u03f5\u0003\u0002\u0002",
    "\u0002\u03f5\u03fc\t\u0014\u0002\u0002\u03f6\u03f8\u0005z>\u0002\u03f7",
    "\u03f6\u0003\u0002\u0002\u0002\u03f7\u03f8\u0003\u0002\u0002\u0002\u03f8",
    "\u03f9\u0003\u0002\u0002\u0002\u03f9\u03fa\u0007\u01aa\u0002\u0002\u03fa",
    "\u03fc\t\u0015\u0002\u0002\u03fb\u03ec\u0003\u0002\u0002\u0002\u03fb",
    "\u03ed\u0003\u0002\u0002\u0002\u03fb\u03ef\u0003\u0002\u0002\u0002\u03fb",
    "\u03f3\u0003\u0002\u0002\u0002\u03fb\u03f7\u0003\u0002\u0002\u0002\u03fc",
    "y\u0003\u0002\u0002\u0002\u03fd\u03fe\t\u0002\u0002\u0002\u03fe{\u0003",
    "\u0002\u0002\u0002\u03ff\u0403\u0005~@\u0002\u0400\u0403\u0007\u0191",
    "\u0002\u0002\u0401\u0403\u0007\u0192\u0002\u0002\u0402\u03ff\u0003\u0002",
    "\u0002\u0002\u0402\u0400\u0003\u0002\u0002\u0002\u0402\u0401\u0003\u0002",
    "\u0002\u0002\u0403}\u0003\u0002\u0002\u0002\u0404\u0405\t\u0016\u0002",
    "\u0002\u0405\u007f\u0003\u0002\u0002\u0002\u0406\u0416\u0007\u019a\u0002",
    "\u0002\u0407\u0416\u0007\u019b\u0002\u0002\u0408\u0416\u0007\u019c\u0002",
    "\u0002\u0409\u040a\u0007\u019c\u0002\u0002\u040a\u0416\u0007\u019a\u0002",
    "\u0002\u040b\u040c\u0007\u019b\u0002\u0002\u040c\u0416\u0007\u019a\u0002",
    "\u0002\u040d\u040e\u0007\u019c\u0002\u0002\u040e\u0416\u0007\u019b\u0002",
    "\u0002\u040f\u0410\u0007\u019d\u0002\u0002\u0410\u0416\u0007\u019a\u0002",
    "\u0002\u0411\u0412\u0007\u019d\u0002\u0002\u0412\u0416\u0007\u019b\u0002",
    "\u0002\u0413\u0414\u0007\u019d\u0002\u0002\u0414\u0416\u0007\u019c\u0002",
    "\u0002\u0415\u0406\u0003\u0002\u0002\u0002\u0415\u0407\u0003\u0002\u0002",
    "\u0002\u0415\u0408\u0003\u0002\u0002\u0002\u0415\u0409\u0003\u0002\u0002",
    "\u0002\u0415\u040b\u0003\u0002\u0002\u0002\u0415\u040d\u0003\u0002\u0002",
    "\u0002\u0415\u040f\u0003\u0002\u0002\u0002\u0415\u0411\u0003\u0002\u0002",
    "\u0002\u0415\u0413\u0003\u0002\u0002\u0002\u0416\u0081\u0003\u0002\u0002",
    "\u0002\u0417\u0418\t\u0017\u0002\u0002\u0418\u0083\u0003\u0002\u0002",
    "\u0002\u0419\u041b\u0007\u0194\u0002\u0002\u041a\u041c\t\u0018\u0002",
    "\u0002\u041b\u041a\u0003\u0002\u0002\u0002\u041b\u041c\u0003\u0002\u0002",
    "\u0002\u041c\u0085\u0003\u0002\u0002\u0002v\u0089\u0090\u0094\u0098",
    "\u00a0\u00a4\u00b0\u00b4\u00bc\u00c0\u00d2\u00e1\u00e3\u00ee\u00f7\u00ff",
    "\u0103\u0119\u0122\u0128\u012e\u0134\u013f\u0146\u014b\u0150\u0154\u015d",
    "\u015f\u0163\u0168\u016c\u016e\u0173\u0177\u017b\u0184\u0187\u018b\u0194",
    "\u01a0\u01a2\u01a6\u01af\u01b5\u01ba\u01c2\u01c5\u01c7\u01ce\u01d6\u01dc",
    "\u01e1\u01e5\u01ea\u01ec\u01f3\u01f7\u01fe\u0200\u0202\u020d\u0211\u0213",
    "\u0216\u0226\u023c\u0240\u0244\u024f\u0256\u026c\u02a0\u02a4\u02b2\u02bf",
    "\u02cb\u02d2\u02d9\u02e6\u02ed\u02f3\u02f7\u0308\u030b\u0314\u0317\u031a",
    "\u0327\u032b\u0333\u0339\u0345\u034c\u0353\u035a\u0361\u0368\u036f\u0376",
    "\u037f\u0383\u038c\u03d6\u03db\u03e1\u03e4\u03e6\u03ea\u03ef\u03f3\u03f7",
    "\u03fb\u0402\u0415\u041b"].join("");


var atn = new antlr4.atn.ATNDeserializer().deserialize(serializedATN);

var decisionsToDFA = atn.decisionToState.map( function(ds, index) { return new antlr4.dfa.DFA(ds, index); });

var sharedContextCache = new antlr4.PredictionContextCache();

var literalNames = [ null, null, null, null, null, null, null, null, null, 
                     null, null, null, null, null, null, null, null, null, 
                     null, null, null, null, null, null, null, null, null, 
                     null, null, null, null, null, null, null, null, null, 
                     null, null, null, null, null, null, null, null, null, 
                     null, null, null, null, null, null, null, null, null, 
                     null, null, null, null, null, null, null, null, null, 
                     null, null, null, null, null, null, null, null, null, 
                     null, null, null, null, null, null, null, null, null, 
                     null, null, null, null, null, null, null, null, null, 
                     null, null, null, null, null, null, null, null, null, 
                     null, null, null, null, null, null, null, null, null, 
                     null, null, null, null, null, null, null, null, null, 
                     null, null, null, null, null, null, null, null, null, 
                     null, null, null, null, null, null, null, null, null, 
                     null, null, null, null, null, null, null, null, null, 
                     null, null, null, null, null, null, null, null, null, 
                     null, null, null, null, null, null, null, null, null, 
                     null, null, null, null, null, null, null, null, null, 
                     null, null, null, null, null, null, null, null, null, 
                     null, null, null, null, null, null, null, null, null, 
                     null, null, null, null, null, null, null, null, null, 
                     null, null, null, null, null, null, null, null, null, 
                     null, null, null, null, null, null, null, null, null, 
                     null, null, null, null, null, null, null, null, null, 
                     null, null, null, null, null, null, null, null, null, 
                     null, null, null, null, null, null, null, null, null, 
                     null, null, null, null, null, null, null, null, null, 
                     null, null, null, null, null, null, null, null, null, 
                     null, null, null, null, null, null, null, null, null, 
                     null, null, null, null, null, null, null, null, null, 
                     null, null, null, null, null, null, null, null, null, 
                     null, null, null, null, null, null, null, null, null, 
                     null, null, null, null, null, null, null, null, null, 
                     null, null, null, null, null, null, null, null, null, 
                     null, null, null, null, null, null, null, null, null, 
                     null, null, null, null, null, null, null, null, null, 
                     null, null, null, null, null, null, null, null, null, 
                     null, null, null, null, null, null, null, null, null, 
                     null, null, null, null, null, null, null, null, null, 
                     null, null, null, null, null, null, null, null, null, 
                     null, null, null, null, null, null, null, null, null, 
                     null, null, null, null, null, null, null, null, null, 
                     null, null, null, null, null, null, null, null, null, 
                     null, null, null, null, null, null, null, null, null, 
                     null, null, null, "'='", "'>'", "'<'", "'!'", "'+='", 
                     "'-='", "'*='", "'/='", "'%='", "'&='", "'^='", "'|='", 
                     "'.'", "'_'", "'@'", "'#'", "'$'", "'('", "')'", "','", 
                     "';'", "':'", "'*'", "'/'", "'%'", "'+'", "'-'", "'~'", 
                     "'|'", "'&'", "'^'" ];

var symbolicNames = [ null, "ADD", "ALL", "ALTER", "AND", "ANY", "AS", "ASC", 
                      "AUTHORIZATION", "BACKUP", "BEGIN", "BETWEEN", "BREAK", 
                      "BROWSE", "BULK", "BY", "CASCADE", "CASE", "CHANGETABLE", 
                      "CHANGES", "CHECK", "CHECKPOINT", "CLOSE", "CLUSTERED", 
                      "COALESCE", "COLLATE", "COLUMN", "COMMIT", "COMPUTE", 
                      "CONSTRAINT", "CONTAINMENT", "CONTAINS", "CONTAINSTABLE", 
                      "CONTINUE", "CONVERT", "CREATE", "CROSS", "CURRENT", 
                      "CURRENT_DATE", "CURRENT_TIME", "CURRENT_TIMESTAMP", 
                      "CURRENT_USER", "CURSOR", "DATABASE", "DBCC", "DEALLOCATE", 
                      "DECLARE", "DEFAULT", "DELETE", "DENY", "DESC", "DISK", 
                      "DISTINCT", "DISTRIBUTED", "DOUBLE", "DROP", "DUMP", 
                      "ELSE", "END", "ERRLVL", "ESCAPE", "EXCEPT", "EXECUTE", 
                      "EXISTS", "EXIT", "EXTERNAL", "FETCH", "FILE", "FILENAME", 
                      "FILLFACTOR", "FOR", "FORCESEEK", "FOREIGN", "FREETEXT", 
                      "FREETEXTTABLE", "FROM", "FULL", "FUNCTION", "GOTO", 
                      "GRANT", "GROUP", "HAVING", "IDENTITY", "IDENTITYCOL", 
                      "IDENTITY_INSERT", "IF", "IN", "INDEX", "INNER", "INSERT", 
                      "INTERSECT", "INTO", "IS", "JOIN", "KEY", "KILL", 
                      "LEFT", "LIKE", "LINENO", "LOAD", "LOG", "MERGE", 
                      "NATIONAL", "NOCHECK", "NONCLUSTERED", "NONE", "NOT", 
                      "NULL", "NULLIF", "OF", "OFF", "OFFSETS", "ON", "OPEN", 
                      "OPENDATASOURCE", "OPENQUERY", "OPENROWSET", "OPENXML", 
                      "OPTION", "OR", "ORDER", "OUTER", "OVER", "PARTIAL", 
                      "PERCENT", "PIVOT", "PLAN", "PRECISION", "PRIMARY", 
                      "PRINT", "PROC", "PROCEDURE", "PUBLIC", "RAISERROR", 
                      "READ", "READTEXT", "RECONFIGURE", "REFERENCES", "REPLICATION", 
                      "RESTORE", "RESTRICT", "RETURN", "REVERT", "REVOKE", 
                      "RIGHT", "ROLLBACK", "ROWCOUNT", "ROWGUIDCOL", "RULE", 
                      "SAVE", "SCHEMA", "SECURITYAUDIT", "SELECT", "SEMANTICKEYPHRASETABLE", 
                      "SEMANTICSIMILARITYDETAILSTABLE", "SEMANTICSIMILARITYTABLE", 
                      "SESSION_USER", "SET", "SETUSER", "SHUTDOWN", "SOME", 
                      "STATISTICS", "SYSTEM_USER", "TABLE", "TABLESAMPLE", 
                      "TEXTSIZE", "THEN", "TO", "TOP", "TRAN", "TRANSACTION", 
                      "TRIGGER", "TRUNCATE", "TRY_CONVERT", "TSEQUAL", "UNION", 
                      "UNIQUE", "UNPIVOT", "UPDATE", "UPDATETEXT", "USE", 
                      "USER", "VALUES", "VARYING", "VIEW", "WAITFOR", "WHEN", 
                      "WHERE", "WHILE", "WITH", "WITHIN", "WRITETEXT", "ABSOLUTE", 
                      "AFTER", "ALLOWED", "ALLOW_SNAPSHOT_ISOLATION", "ANSI_NULLS", 
                      "ANSI_NULL_DEFAULT", "ANSI_PADDING", "ANSI_WARNINGS", 
                      "APPLY", "ARITHABORT", "AUTO", "AUTO_CLEANUP", "AUTO_CLOSE", 
                      "AUTO_CREATE_STATISTICS", "AUTO_SHRINK", "AUTO_UPDATE_STATISTICS", 
                      "AUTO_UPDATE_STATISTICS_ASYNC", "AVG", "BASE64", "BINARY_CHECKSUM", 
                      "BULK_LOGGED", "CALLER", "CAST", "CATCH", "CHANGE_RETENTION", 
                      "CHANGE_TRACKING", "CHECKSUM", "CHECKSUM_AGG", "COMMITTED", 
                      "COMPATIBILITY_LEVEL", "CONCAT", "CONCAT_NULL_YIELDS_NULL", 
                      "CONTROL", "COOKIE", "COUNT", "COUNT_BIG", "CURSOR_CLOSE_ON_COMMIT", 
                      "CURSOR_DEFAULT", "DATEADD", "DATEDIFF", "DATENAME", 
                      "DATEPART", "DATE_CORRELATION_OPTIMIZATION", "DAYS", 
                      "DB_CHAINING", "DEFAULT_FULLTEXT_LANGUAGE", "DEFAULT_LANGUAGE", 
                      "DELAY", "DELAYED_DURABILITY", "DELETED", "DENSE_RANK", 
                      "DIRECTORY_NAME", "DISABLE", "DISABLED", "DISABLE_BROKER", 
                      "DYNAMIC", "EMERGENCY", "ENABLE_BROKER", "ENCRYPTION", 
                      "ERROR_BROKER_CONVERSATIONS", "EXPAND", "FAST", "FAST_FORWARD", 
                      "FILEGROUP", "FILEGROWTH", "FILESTREAM", "FIRST", 
                      "FOLLOWING", "FORCE", "FORCED", "FORWARD_ONLY", "FULLSCAN", 
                      "GB", "GLOBAL", "GO", "GROUPING", "GROUPING_ID", "HADR", 
                      "HASH", "HONOR_BROKER_PRIORITY", "HOURS", "IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX", 
                      "IMMEDIATE", "IMPERSONATE", "INCREMENTAL", "INSENSITIVE", 
                      "INSERTED", "ISOLATION", "KB", "KEEP", "KEEPFIXED", 
                      "KEYSET", "LAST", "LEVEL", "LOCAL", "LOCK_ESCALATION", 
                      "LOGIN", "LOOP", "MARK", "MAX", "MAXDOP", "MAXRECURSION", 
                      "MAXSIZE", "MB", "MEMORY_OPTIMIZED_DATA", "MIN", "MINUTES", 
                      "MIN_ACTIVE_ROWVERSION", "MIXED_PAGE_ALLOCATION", 
                      "MODIFY", "MULTI_USER", "NAME", "NESTED_TRIGGERS", 
                      "NEW_BROKER", "NEXT", "NOCOUNT", "NOEXPAND", "NON_TRANSACTED_ACCESS", 
                      "NORECOMPUTE", "NO_WAIT", "NTILE", "NUMBER", "NUMERIC_ROUNDABORT", 
                      "OFFLINE", "OFFSET", "ONLINE", "ONLY", "OPTIMISTIC", 
                      "OPTIMIZE", "OUT", "OUTPUT", "OWNER", "PAGE_VERIFY", 
                      "PARAMETERIZATION", "PARTITION", "PATH", "PRECEDING", 
                      "PRIOR", "PRIVILEGES", "QUOTED_IDENTIFIER", "RANGE", 
                      "RANK", "READONLY", "READ_COMMITTED_SNAPSHOT", "READ_ONLY", 
                      "READ_WRITE", "RECOMPILE", "RECOVERY", "RECURSIVE_TRIGGERS", 
                      "RELATIVE", "REMOTE", "REPEATABLE", "RESTRICTED_USER", 
                      "ROBUST", "ROOT", "ROW", "ROWGUID", "ROWS", "ROW_NUMBER", 
                      "SAMPLE", "SCHEMABINDING", "SCROLL", "SCROLL_LOCKS", 
                      "SECONDS", "SELF", "SERIALIZABLE", "SHOWPLAN", "SIMPLE", 
                      "SINGLE_USER", "SIZE", "SNAPSHOT", "SPATIAL_WINDOW_MAX_CELLS", 
                      "STATIC", "STATS_STREAM", "STDEV", "STDEVP", "SUM", 
                      "TAKE", "TARGET_RECOVERY_TIME", "TB", "TEXTIMAGE_ON", 
                      "THROW", "TIES", "TIME", "TORN_PAGE_DETECTION", "TRANSFORM_NOISE_WORDS", 
                      "TRUSTWORTHY", "TRY", "TWO_DIGIT_YEAR_CUTOFF", "TYPE", 
                      "TYPE_WARNING", "UNBOUNDED", "UNCOMMITTED", "UNKNOWN", 
                      "UNLIMITED", "USING", "VAR", "VARP", "VIEWS", "VIEW_METADATA", 
                      "WORK", "XML", "XMLNAMESPACES", "DOLLAR_ACTION", "SPACE", 
                      "COMMENT", "LINE_COMMENT", "DOUBLE_QUOTE_ID", "SQUARE_BRACKET_ID", 
                      "LOCAL_ID", "DECIMAL", "ID", "STRING", "BINARY", "FLOAT", 
                      "REAL", "EQUAL", "GREATER", "LESS", "EXCLAMATION", 
                      "PLUS_ASSIGN", "MINUS_ASSIGN", "MULT_ASSIGN", "DIV_ASSIGN", 
                      "MOD_ASSIGN", "AND_ASSIGN", "XOR_ASSIGN", "OR_ASSIGN", 
                      "DOT", "UNDERLINE", "AT", "SHARP", "DOLLAR", "LR_BRACKET", 
                      "RR_BRACKET", "COMMA", "SEMI", "COLON", "STAR", "DIVIDE", 
                      "MODULE", "PLUS", "MINUS", "BIT_NOT", "BIT_OR", "BIT_AND", 
                      "BIT_XOR", "BIGINT", "BIT", "CHAR", "DATE", "DATETIME", 
                      "DATETIME2", "DATETIMEOFFSET", "GEOGRAPHY", "GEOMETRY", 
                      "HIERARCHYID", "IMAGE", "INT", "MONEY", "NCHAR", "NTEXT", 
                      "NUMERIC", "NVARCHAR", "SMALLDATETIME", "SMALLINT", 
                      "SMALLMONEY", "SQL_VARIANT", "TEXT", "TIMESTAMP", 
                      "TINYINT", "UNIQUEIDENTIFIER", "VARBINARY", "VARCHAR" ];

var ruleNames =  [ "tsql_file", "batch", "sql_clauses", "sql_clause", "dml_clause", 
                   "select_statement", "go_statement", "expression", "constant_expression", 
                   "subquery", "search_condition", "search_condition_and", 
                   "search_condition_not", "predicate", "query_expression", 
                   "union", "query_specification", "order_by_clause", "order_by_expression", 
                   "group_by_item", "select_list", "select_list_elem", "table_sources", 
                   "table_source", "table_source_item_joined", "table_source_item", 
                   "change_table", "join_part", "table_name_with_hint", 
                   "rowset_function", "bulk_option", "derived_table", "function_call", 
                   "switch_section", "switch_search_condition_section", 
                   "as_table_alias", "table_alias", "column_alias_list", 
                   "column_alias", "expression_list", "ranking_windowed_function", 
                   "aggregate_windowed_function", "all_distinct_expression", 
                   "over_clause", "row_or_range_clause", "window_frame_extent", 
                   "window_frame_bound", "window_frame_preceding", "window_frame_following", 
                   "full_table_name", "table_name", "simple_name", "func_proc_name", 
                   "full_column_name", "column_name_list", "null_notnull", 
                   "scalar_function_name", "data_type", "default_value", 
                   "constant", "sign", "id", "simple_id", "comparison_operator", 
                   "assignment_operator", "file_size" ];

function tsqlParser (input) {
	antlr4.Parser.call(this, input);
    this._interp = new antlr4.atn.ParserATNSimulator(this, atn, decisionsToDFA, sharedContextCache);
    this.ruleNames = ruleNames;
    this.literalNames = literalNames;
    this.symbolicNames = symbolicNames;
    return this;
}

tsqlParser.prototype = Object.create(antlr4.Parser.prototype);
tsqlParser.prototype.constructor = tsqlParser;

Object.defineProperty(tsqlParser.prototype, "atn", {
	get : function() {
		return atn;
	}
});

tsqlParser.EOF = antlr4.Token.EOF;
tsqlParser.ADD = 1;
tsqlParser.ALL = 2;
tsqlParser.ALTER = 3;
tsqlParser.AND = 4;
tsqlParser.ANY = 5;
tsqlParser.AS = 6;
tsqlParser.ASC = 7;
tsqlParser.AUTHORIZATION = 8;
tsqlParser.BACKUP = 9;
tsqlParser.BEGIN = 10;
tsqlParser.BETWEEN = 11;
tsqlParser.BREAK = 12;
tsqlParser.BROWSE = 13;
tsqlParser.BULK = 14;
tsqlParser.BY = 15;
tsqlParser.CASCADE = 16;
tsqlParser.CASE = 17;
tsqlParser.CHANGETABLE = 18;
tsqlParser.CHANGES = 19;
tsqlParser.CHECK = 20;
tsqlParser.CHECKPOINT = 21;
tsqlParser.CLOSE = 22;
tsqlParser.CLUSTERED = 23;
tsqlParser.COALESCE = 24;
tsqlParser.COLLATE = 25;
tsqlParser.COLUMN = 26;
tsqlParser.COMMIT = 27;
tsqlParser.COMPUTE = 28;
tsqlParser.CONSTRAINT = 29;
tsqlParser.CONTAINMENT = 30;
tsqlParser.CONTAINS = 31;
tsqlParser.CONTAINSTABLE = 32;
tsqlParser.CONTINUE = 33;
tsqlParser.CONVERT = 34;
tsqlParser.CREATE = 35;
tsqlParser.CROSS = 36;
tsqlParser.CURRENT = 37;
tsqlParser.CURRENT_DATE = 38;
tsqlParser.CURRENT_TIME = 39;
tsqlParser.CURRENT_TIMESTAMP = 40;
tsqlParser.CURRENT_USER = 41;
tsqlParser.CURSOR = 42;
tsqlParser.DATABASE = 43;
tsqlParser.DBCC = 44;
tsqlParser.DEALLOCATE = 45;
tsqlParser.DECLARE = 46;
tsqlParser.DEFAULT = 47;
tsqlParser.DELETE = 48;
tsqlParser.DENY = 49;
tsqlParser.DESC = 50;
tsqlParser.DISK = 51;
tsqlParser.DISTINCT = 52;
tsqlParser.DISTRIBUTED = 53;
tsqlParser.DOUBLE = 54;
tsqlParser.DROP = 55;
tsqlParser.DUMP = 56;
tsqlParser.ELSE = 57;
tsqlParser.END = 58;
tsqlParser.ERRLVL = 59;
tsqlParser.ESCAPE = 60;
tsqlParser.EXCEPT = 61;
tsqlParser.EXECUTE = 62;
tsqlParser.EXISTS = 63;
tsqlParser.EXIT = 64;
tsqlParser.EXTERNAL = 65;
tsqlParser.FETCH = 66;
tsqlParser.FILE = 67;
tsqlParser.FILENAME = 68;
tsqlParser.FILLFACTOR = 69;
tsqlParser.FOR = 70;
tsqlParser.FORCESEEK = 71;
tsqlParser.FOREIGN = 72;
tsqlParser.FREETEXT = 73;
tsqlParser.FREETEXTTABLE = 74;
tsqlParser.FROM = 75;
tsqlParser.FULL = 76;
tsqlParser.FUNCTION = 77;
tsqlParser.GOTO = 78;
tsqlParser.GRANT = 79;
tsqlParser.GROUP = 80;
tsqlParser.HAVING = 81;
tsqlParser.IDENTITY = 82;
tsqlParser.IDENTITYCOL = 83;
tsqlParser.IDENTITY_INSERT = 84;
tsqlParser.IF = 85;
tsqlParser.IN = 86;
tsqlParser.INDEX = 87;
tsqlParser.INNER = 88;
tsqlParser.INSERT = 89;
tsqlParser.INTERSECT = 90;
tsqlParser.INTO = 91;
tsqlParser.IS = 92;
tsqlParser.JOIN = 93;
tsqlParser.KEY = 94;
tsqlParser.KILL = 95;
tsqlParser.LEFT = 96;
tsqlParser.LIKE = 97;
tsqlParser.LINENO = 98;
tsqlParser.LOAD = 99;
tsqlParser.LOG = 100;
tsqlParser.MERGE = 101;
tsqlParser.NATIONAL = 102;
tsqlParser.NOCHECK = 103;
tsqlParser.NONCLUSTERED = 104;
tsqlParser.NONE = 105;
tsqlParser.NOT = 106;
tsqlParser.NULL = 107;
tsqlParser.NULLIF = 108;
tsqlParser.OF = 109;
tsqlParser.OFF = 110;
tsqlParser.OFFSETS = 111;
tsqlParser.ON = 112;
tsqlParser.OPEN = 113;
tsqlParser.OPENDATASOURCE = 114;
tsqlParser.OPENQUERY = 115;
tsqlParser.OPENROWSET = 116;
tsqlParser.OPENXML = 117;
tsqlParser.OPTION = 118;
tsqlParser.OR = 119;
tsqlParser.ORDER = 120;
tsqlParser.OUTER = 121;
tsqlParser.OVER = 122;
tsqlParser.PARTIAL = 123;
tsqlParser.PERCENT = 124;
tsqlParser.PIVOT = 125;
tsqlParser.PLAN = 126;
tsqlParser.PRECISION = 127;
tsqlParser.PRIMARY = 128;
tsqlParser.PRINT = 129;
tsqlParser.PROC = 130;
tsqlParser.PROCEDURE = 131;
tsqlParser.PUBLIC = 132;
tsqlParser.RAISERROR = 133;
tsqlParser.READ = 134;
tsqlParser.READTEXT = 135;
tsqlParser.RECONFIGURE = 136;
tsqlParser.REFERENCES = 137;
tsqlParser.REPLICATION = 138;
tsqlParser.RESTORE = 139;
tsqlParser.RESTRICT = 140;
tsqlParser.RETURN = 141;
tsqlParser.REVERT = 142;
tsqlParser.REVOKE = 143;
tsqlParser.RIGHT = 144;
tsqlParser.ROLLBACK = 145;
tsqlParser.ROWCOUNT = 146;
tsqlParser.ROWGUIDCOL = 147;
tsqlParser.RULE = 148;
tsqlParser.SAVE = 149;
tsqlParser.SCHEMA = 150;
tsqlParser.SECURITYAUDIT = 151;
tsqlParser.SELECT = 152;
tsqlParser.SEMANTICKEYPHRASETABLE = 153;
tsqlParser.SEMANTICSIMILARITYDETAILSTABLE = 154;
tsqlParser.SEMANTICSIMILARITYTABLE = 155;
tsqlParser.SESSION_USER = 156;
tsqlParser.SET = 157;
tsqlParser.SETUSER = 158;
tsqlParser.SHUTDOWN = 159;
tsqlParser.SOME = 160;
tsqlParser.STATISTICS = 161;
tsqlParser.SYSTEM_USER = 162;
tsqlParser.TABLE = 163;
tsqlParser.TABLESAMPLE = 164;
tsqlParser.TEXTSIZE = 165;
tsqlParser.THEN = 166;
tsqlParser.TO = 167;
tsqlParser.TOP = 168;
tsqlParser.TRAN = 169;
tsqlParser.TRANSACTION = 170;
tsqlParser.TRIGGER = 171;
tsqlParser.TRUNCATE = 172;
tsqlParser.TRY_CONVERT = 173;
tsqlParser.TSEQUAL = 174;
tsqlParser.UNION = 175;
tsqlParser.UNIQUE = 176;
tsqlParser.UNPIVOT = 177;
tsqlParser.UPDATE = 178;
tsqlParser.UPDATETEXT = 179;
tsqlParser.USE = 180;
tsqlParser.USER = 181;
tsqlParser.VALUES = 182;
tsqlParser.VARYING = 183;
tsqlParser.VIEW = 184;
tsqlParser.WAITFOR = 185;
tsqlParser.WHEN = 186;
tsqlParser.WHERE = 187;
tsqlParser.WHILE = 188;
tsqlParser.WITH = 189;
tsqlParser.WITHIN = 190;
tsqlParser.WRITETEXT = 191;
tsqlParser.ABSOLUTE = 192;
tsqlParser.AFTER = 193;
tsqlParser.ALLOWED = 194;
tsqlParser.ALLOW_SNAPSHOT_ISOLATION = 195;
tsqlParser.ANSI_NULLS = 196;
tsqlParser.ANSI_NULL_DEFAULT = 197;
tsqlParser.ANSI_PADDING = 198;
tsqlParser.ANSI_WARNINGS = 199;
tsqlParser.APPLY = 200;
tsqlParser.ARITHABORT = 201;
tsqlParser.AUTO = 202;
tsqlParser.AUTO_CLEANUP = 203;
tsqlParser.AUTO_CLOSE = 204;
tsqlParser.AUTO_CREATE_STATISTICS = 205;
tsqlParser.AUTO_SHRINK = 206;
tsqlParser.AUTO_UPDATE_STATISTICS = 207;
tsqlParser.AUTO_UPDATE_STATISTICS_ASYNC = 208;
tsqlParser.AVG = 209;
tsqlParser.BASE64 = 210;
tsqlParser.BINARY_CHECKSUM = 211;
tsqlParser.BULK_LOGGED = 212;
tsqlParser.CALLER = 213;
tsqlParser.CAST = 214;
tsqlParser.CATCH = 215;
tsqlParser.CHANGE_RETENTION = 216;
tsqlParser.CHANGE_TRACKING = 217;
tsqlParser.CHECKSUM = 218;
tsqlParser.CHECKSUM_AGG = 219;
tsqlParser.COMMITTED = 220;
tsqlParser.COMPATIBILITY_LEVEL = 221;
tsqlParser.CONCAT = 222;
tsqlParser.CONCAT_NULL_YIELDS_NULL = 223;
tsqlParser.CONTROL = 224;
tsqlParser.COOKIE = 225;
tsqlParser.COUNT = 226;
tsqlParser.COUNT_BIG = 227;
tsqlParser.CURSOR_CLOSE_ON_COMMIT = 228;
tsqlParser.CURSOR_DEFAULT = 229;
tsqlParser.DATEADD = 230;
tsqlParser.DATEDIFF = 231;
tsqlParser.DATENAME = 232;
tsqlParser.DATEPART = 233;
tsqlParser.DATE_CORRELATION_OPTIMIZATION = 234;
tsqlParser.DAYS = 235;
tsqlParser.DB_CHAINING = 236;
tsqlParser.DEFAULT_FULLTEXT_LANGUAGE = 237;
tsqlParser.DEFAULT_LANGUAGE = 238;
tsqlParser.DELAY = 239;
tsqlParser.DELAYED_DURABILITY = 240;
tsqlParser.DELETED = 241;
tsqlParser.DENSE_RANK = 242;
tsqlParser.DIRECTORY_NAME = 243;
tsqlParser.DISABLE = 244;
tsqlParser.DISABLED = 245;
tsqlParser.DISABLE_BROKER = 246;
tsqlParser.DYNAMIC = 247;
tsqlParser.EMERGENCY = 248;
tsqlParser.ENABLE_BROKER = 249;
tsqlParser.ENCRYPTION = 250;
tsqlParser.ERROR_BROKER_CONVERSATIONS = 251;
tsqlParser.EXPAND = 252;
tsqlParser.FAST = 253;
tsqlParser.FAST_FORWARD = 254;
tsqlParser.FILEGROUP = 255;
tsqlParser.FILEGROWTH = 256;
tsqlParser.FILESTREAM = 257;
tsqlParser.FIRST = 258;
tsqlParser.FOLLOWING = 259;
tsqlParser.FORCE = 260;
tsqlParser.FORCED = 261;
tsqlParser.FORWARD_ONLY = 262;
tsqlParser.FULLSCAN = 263;
tsqlParser.GB = 264;
tsqlParser.GLOBAL = 265;
tsqlParser.GO = 266;
tsqlParser.GROUPING = 267;
tsqlParser.GROUPING_ID = 268;
tsqlParser.HADR = 269;
tsqlParser.HASH = 270;
tsqlParser.HONOR_BROKER_PRIORITY = 271;
tsqlParser.HOURS = 272;
tsqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX = 273;
tsqlParser.IMMEDIATE = 274;
tsqlParser.IMPERSONATE = 275;
tsqlParser.INCREMENTAL = 276;
tsqlParser.INSENSITIVE = 277;
tsqlParser.INSERTED = 278;
tsqlParser.ISOLATION = 279;
tsqlParser.KB = 280;
tsqlParser.KEEP = 281;
tsqlParser.KEEPFIXED = 282;
tsqlParser.KEYSET = 283;
tsqlParser.LAST = 284;
tsqlParser.LEVEL = 285;
tsqlParser.LOCAL = 286;
tsqlParser.LOCK_ESCALATION = 287;
tsqlParser.LOGIN = 288;
tsqlParser.LOOP = 289;
tsqlParser.MARK = 290;
tsqlParser.MAX = 291;
tsqlParser.MAXDOP = 292;
tsqlParser.MAXRECURSION = 293;
tsqlParser.MAXSIZE = 294;
tsqlParser.MB = 295;
tsqlParser.MEMORY_OPTIMIZED_DATA = 296;
tsqlParser.MIN = 297;
tsqlParser.MINUTES = 298;
tsqlParser.MIN_ACTIVE_ROWVERSION = 299;
tsqlParser.MIXED_PAGE_ALLOCATION = 300;
tsqlParser.MODIFY = 301;
tsqlParser.MULTI_USER = 302;
tsqlParser.NAME = 303;
tsqlParser.NESTED_TRIGGERS = 304;
tsqlParser.NEW_BROKER = 305;
tsqlParser.NEXT = 306;
tsqlParser.NOCOUNT = 307;
tsqlParser.NOEXPAND = 308;
tsqlParser.NON_TRANSACTED_ACCESS = 309;
tsqlParser.NORECOMPUTE = 310;
tsqlParser.NO_WAIT = 311;
tsqlParser.NTILE = 312;
tsqlParser.NUMBER = 313;
tsqlParser.NUMERIC_ROUNDABORT = 314;
tsqlParser.OFFLINE = 315;
tsqlParser.OFFSET = 316;
tsqlParser.ONLINE = 317;
tsqlParser.ONLY = 318;
tsqlParser.OPTIMISTIC = 319;
tsqlParser.OPTIMIZE = 320;
tsqlParser.OUT = 321;
tsqlParser.OUTPUT = 322;
tsqlParser.OWNER = 323;
tsqlParser.PAGE_VERIFY = 324;
tsqlParser.PARAMETERIZATION = 325;
tsqlParser.PARTITION = 326;
tsqlParser.PATH = 327;
tsqlParser.PRECEDING = 328;
tsqlParser.PRIOR = 329;
tsqlParser.PRIVILEGES = 330;
tsqlParser.QUOTED_IDENTIFIER = 331;
tsqlParser.RANGE = 332;
tsqlParser.RANK = 333;
tsqlParser.READONLY = 334;
tsqlParser.READ_COMMITTED_SNAPSHOT = 335;
tsqlParser.READ_ONLY = 336;
tsqlParser.READ_WRITE = 337;
tsqlParser.RECOMPILE = 338;
tsqlParser.RECOVERY = 339;
tsqlParser.RECURSIVE_TRIGGERS = 340;
tsqlParser.RELATIVE = 341;
tsqlParser.REMOTE = 342;
tsqlParser.REPEATABLE = 343;
tsqlParser.RESTRICTED_USER = 344;
tsqlParser.ROBUST = 345;
tsqlParser.ROOT = 346;
tsqlParser.ROW = 347;
tsqlParser.ROWGUID = 348;
tsqlParser.ROWS = 349;
tsqlParser.ROW_NUMBER = 350;
tsqlParser.SAMPLE = 351;
tsqlParser.SCHEMABINDING = 352;
tsqlParser.SCROLL = 353;
tsqlParser.SCROLL_LOCKS = 354;
tsqlParser.SECONDS = 355;
tsqlParser.SELF = 356;
tsqlParser.SERIALIZABLE = 357;
tsqlParser.SHOWPLAN = 358;
tsqlParser.SIMPLE = 359;
tsqlParser.SINGLE_USER = 360;
tsqlParser.SIZE = 361;
tsqlParser.SNAPSHOT = 362;
tsqlParser.SPATIAL_WINDOW_MAX_CELLS = 363;
tsqlParser.STATIC = 364;
tsqlParser.STATS_STREAM = 365;
tsqlParser.STDEV = 366;
tsqlParser.STDEVP = 367;
tsqlParser.SUM = 368;
tsqlParser.TAKE = 369;
tsqlParser.TARGET_RECOVERY_TIME = 370;
tsqlParser.TB = 371;
tsqlParser.TEXTIMAGE_ON = 372;
tsqlParser.THROW = 373;
tsqlParser.TIES = 374;
tsqlParser.TIME = 375;
tsqlParser.TORN_PAGE_DETECTION = 376;
tsqlParser.TRANSFORM_NOISE_WORDS = 377;
tsqlParser.TRUSTWORTHY = 378;
tsqlParser.TRY = 379;
tsqlParser.TWO_DIGIT_YEAR_CUTOFF = 380;
tsqlParser.TYPE = 381;
tsqlParser.TYPE_WARNING = 382;
tsqlParser.UNBOUNDED = 383;
tsqlParser.UNCOMMITTED = 384;
tsqlParser.UNKNOWN = 385;
tsqlParser.UNLIMITED = 386;
tsqlParser.USING = 387;
tsqlParser.VAR = 388;
tsqlParser.VARP = 389;
tsqlParser.VIEWS = 390;
tsqlParser.VIEW_METADATA = 391;
tsqlParser.WORK = 392;
tsqlParser.XML = 393;
tsqlParser.XMLNAMESPACES = 394;
tsqlParser.DOLLAR_ACTION = 395;
tsqlParser.SPACE = 396;
tsqlParser.COMMENT = 397;
tsqlParser.LINE_COMMENT = 398;
tsqlParser.DOUBLE_QUOTE_ID = 399;
tsqlParser.SQUARE_BRACKET_ID = 400;
tsqlParser.LOCAL_ID = 401;
tsqlParser.DECIMAL = 402;
tsqlParser.ID = 403;
tsqlParser.STRING = 404;
tsqlParser.BINARY = 405;
tsqlParser.FLOAT = 406;
tsqlParser.REAL = 407;
tsqlParser.EQUAL = 408;
tsqlParser.GREATER = 409;
tsqlParser.LESS = 410;
tsqlParser.EXCLAMATION = 411;
tsqlParser.PLUS_ASSIGN = 412;
tsqlParser.MINUS_ASSIGN = 413;
tsqlParser.MULT_ASSIGN = 414;
tsqlParser.DIV_ASSIGN = 415;
tsqlParser.MOD_ASSIGN = 416;
tsqlParser.AND_ASSIGN = 417;
tsqlParser.XOR_ASSIGN = 418;
tsqlParser.OR_ASSIGN = 419;
tsqlParser.DOT = 420;
tsqlParser.UNDERLINE = 421;
tsqlParser.AT = 422;
tsqlParser.SHARP = 423;
tsqlParser.DOLLAR = 424;
tsqlParser.LR_BRACKET = 425;
tsqlParser.RR_BRACKET = 426;
tsqlParser.COMMA = 427;
tsqlParser.SEMI = 428;
tsqlParser.COLON = 429;
tsqlParser.STAR = 430;
tsqlParser.DIVIDE = 431;
tsqlParser.MODULE = 432;
tsqlParser.PLUS = 433;
tsqlParser.MINUS = 434;
tsqlParser.BIT_NOT = 435;
tsqlParser.BIT_OR = 436;
tsqlParser.BIT_AND = 437;
tsqlParser.BIT_XOR = 438;
tsqlParser.BIGINT = 439;
tsqlParser.BIT = 440;
tsqlParser.CHAR = 441;
tsqlParser.DATE = 442;
tsqlParser.DATETIME = 443;
tsqlParser.DATETIME2 = 444;
tsqlParser.DATETIMEOFFSET = 445;
tsqlParser.GEOGRAPHY = 446;
tsqlParser.GEOMETRY = 447;
tsqlParser.HIERARCHYID = 448;
tsqlParser.IMAGE = 449;
tsqlParser.INT = 450;
tsqlParser.MONEY = 451;
tsqlParser.NCHAR = 452;
tsqlParser.NTEXT = 453;
tsqlParser.NUMERIC = 454;
tsqlParser.NVARCHAR = 455;
tsqlParser.SMALLDATETIME = 456;
tsqlParser.SMALLINT = 457;
tsqlParser.SMALLMONEY = 458;
tsqlParser.SQL_VARIANT = 459;
tsqlParser.TEXT = 460;
tsqlParser.TIMESTAMP = 461;
tsqlParser.TINYINT = 462;
tsqlParser.UNIQUEIDENTIFIER = 463;
tsqlParser.VARBINARY = 464;
tsqlParser.VARCHAR = 465;

tsqlParser.RULE_tsql_file = 0;
tsqlParser.RULE_batch = 1;
tsqlParser.RULE_sql_clauses = 2;
tsqlParser.RULE_sql_clause = 3;
tsqlParser.RULE_dml_clause = 4;
tsqlParser.RULE_select_statement = 5;
tsqlParser.RULE_go_statement = 6;
tsqlParser.RULE_expression = 7;
tsqlParser.RULE_constant_expression = 8;
tsqlParser.RULE_subquery = 9;
tsqlParser.RULE_search_condition = 10;
tsqlParser.RULE_search_condition_and = 11;
tsqlParser.RULE_search_condition_not = 12;
tsqlParser.RULE_predicate = 13;
tsqlParser.RULE_query_expression = 14;
tsqlParser.RULE_union = 15;
tsqlParser.RULE_query_specification = 16;
tsqlParser.RULE_order_by_clause = 17;
tsqlParser.RULE_order_by_expression = 18;
tsqlParser.RULE_group_by_item = 19;
tsqlParser.RULE_select_list = 20;
tsqlParser.RULE_select_list_elem = 21;
tsqlParser.RULE_table_sources = 22;
tsqlParser.RULE_table_source = 23;
tsqlParser.RULE_table_source_item_joined = 24;
tsqlParser.RULE_table_source_item = 25;
tsqlParser.RULE_change_table = 26;
tsqlParser.RULE_join_part = 27;
tsqlParser.RULE_table_name_with_hint = 28;
tsqlParser.RULE_rowset_function = 29;
tsqlParser.RULE_bulk_option = 30;
tsqlParser.RULE_derived_table = 31;
tsqlParser.RULE_function_call = 32;
tsqlParser.RULE_switch_section = 33;
tsqlParser.RULE_switch_search_condition_section = 34;
tsqlParser.RULE_as_table_alias = 35;
tsqlParser.RULE_table_alias = 36;
tsqlParser.RULE_column_alias_list = 37;
tsqlParser.RULE_column_alias = 38;
tsqlParser.RULE_expression_list = 39;
tsqlParser.RULE_ranking_windowed_function = 40;
tsqlParser.RULE_aggregate_windowed_function = 41;
tsqlParser.RULE_all_distinct_expression = 42;
tsqlParser.RULE_over_clause = 43;
tsqlParser.RULE_row_or_range_clause = 44;
tsqlParser.RULE_window_frame_extent = 45;
tsqlParser.RULE_window_frame_bound = 46;
tsqlParser.RULE_window_frame_preceding = 47;
tsqlParser.RULE_window_frame_following = 48;
tsqlParser.RULE_full_table_name = 49;
tsqlParser.RULE_table_name = 50;
tsqlParser.RULE_simple_name = 51;
tsqlParser.RULE_func_proc_name = 52;
tsqlParser.RULE_full_column_name = 53;
tsqlParser.RULE_column_name_list = 54;
tsqlParser.RULE_null_notnull = 55;
tsqlParser.RULE_scalar_function_name = 56;
tsqlParser.RULE_data_type = 57;
tsqlParser.RULE_default_value = 58;
tsqlParser.RULE_constant = 59;
tsqlParser.RULE_sign = 60;
tsqlParser.RULE_id = 61;
tsqlParser.RULE_simple_id = 62;
tsqlParser.RULE_comparison_operator = 63;
tsqlParser.RULE_assignment_operator = 64;
tsqlParser.RULE_file_size = 65;

function Tsql_fileContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = tsqlParser.RULE_tsql_file;
    return this;
}

Tsql_fileContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Tsql_fileContext.prototype.constructor = Tsql_fileContext;

Tsql_fileContext.prototype.EOF = function() {
    return this.getToken(tsqlParser.EOF, 0);
};

Tsql_fileContext.prototype.batch = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(BatchContext);
    } else {
        return this.getTypedRuleContext(BatchContext,i);
    }
};

Tsql_fileContext.prototype.enterRule = function(listener) {
    if(listener instanceof tsqlListener ) {
        listener.enterTsql_file(this);
	}
};

Tsql_fileContext.prototype.exitRule = function(listener) {
    if(listener instanceof tsqlListener ) {
        listener.exitTsql_file(this);
	}
};




tsqlParser.Tsql_fileContext = Tsql_fileContext;

tsqlParser.prototype.tsql_file = function() {

    var localctx = new Tsql_fileContext(this, this._ctx, this.state);
    this.enterRule(localctx, 0, tsqlParser.RULE_tsql_file);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 135;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===tsqlParser.SELECT || _la===tsqlParser.LR_BRACKET) {
            this.state = 132;
            this.batch();
            this.state = 137;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 138;
        this.match(tsqlParser.EOF);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function BatchContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = tsqlParser.RULE_batch;
    return this;
}

BatchContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
BatchContext.prototype.constructor = BatchContext;

BatchContext.prototype.sql_clauses = function() {
    return this.getTypedRuleContext(Sql_clausesContext,0);
};

BatchContext.prototype.go_statement = function() {
    return this.getTypedRuleContext(Go_statementContext,0);
};

BatchContext.prototype.enterRule = function(listener) {
    if(listener instanceof tsqlListener ) {
        listener.enterBatch(this);
	}
};

BatchContext.prototype.exitRule = function(listener) {
    if(listener instanceof tsqlListener ) {
        listener.exitBatch(this);
	}
};




tsqlParser.BatchContext = BatchContext;

tsqlParser.prototype.batch = function() {

    var localctx = new BatchContext(this, this._ctx, this.state);
    this.enterRule(localctx, 2, tsqlParser.RULE_batch);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 140;
        this.sql_clauses();
        this.state = 142;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===tsqlParser.GO) {
            this.state = 141;
            this.go_statement();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Sql_clausesContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = tsqlParser.RULE_sql_clauses;
    return this;
}

Sql_clausesContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Sql_clausesContext.prototype.constructor = Sql_clausesContext;

Sql_clausesContext.prototype.sql_clause = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Sql_clauseContext);
    } else {
        return this.getTypedRuleContext(Sql_clauseContext,i);
    }
};

Sql_clausesContext.prototype.SEMI = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(tsqlParser.SEMI);
    } else {
        return this.getToken(tsqlParser.SEMI, i);
    }
};


Sql_clausesContext.prototype.enterRule = function(listener) {
    if(listener instanceof tsqlListener ) {
        listener.enterSql_clauses(this);
	}
};

Sql_clausesContext.prototype.exitRule = function(listener) {
    if(listener instanceof tsqlListener ) {
        listener.exitSql_clauses(this);
	}
};




tsqlParser.Sql_clausesContext = Sql_clausesContext;

tsqlParser.prototype.sql_clauses = function() {

    var localctx = new Sql_clausesContext(this, this._ctx, this.state);
    this.enterRule(localctx, 4, tsqlParser.RULE_sql_clauses);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 148; 
        this._errHandler.sync(this);
        var _alt = 1;
        do {
        	switch (_alt) {
        	case 1:
        		this.state = 144;
        		this.sql_clause();
        		this.state = 146;
        		this._errHandler.sync(this);
        		_la = this._input.LA(1);
        		if(_la===tsqlParser.SEMI) {
        		    this.state = 145;
        		    this.match(tsqlParser.SEMI);
        		}

        		break;
        	default:
        		throw new antlr4.error.NoViableAltException(this);
        	}
        	this.state = 150; 
        	this._errHandler.sync(this);
        	_alt = this._interp.adaptivePredict(this._input,3, this._ctx);
        } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Sql_clauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = tsqlParser.RULE_sql_clause;
    return this;
}

Sql_clauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Sql_clauseContext.prototype.constructor = Sql_clauseContext;

Sql_clauseContext.prototype.dml_clause = function() {
    return this.getTypedRuleContext(Dml_clauseContext,0);
};

Sql_clauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof tsqlListener ) {
        listener.enterSql_clause(this);
	}
};

Sql_clauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof tsqlListener ) {
        listener.exitSql_clause(this);
	}
};




tsqlParser.Sql_clauseContext = Sql_clauseContext;

tsqlParser.prototype.sql_clause = function() {

    var localctx = new Sql_clauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 6, tsqlParser.RULE_sql_clause);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 152;
        this.dml_clause();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Dml_clauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = tsqlParser.RULE_dml_clause;
    return this;
}

Dml_clauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Dml_clauseContext.prototype.constructor = Dml_clauseContext;

Dml_clauseContext.prototype.select_statement = function() {
    return this.getTypedRuleContext(Select_statementContext,0);
};

Dml_clauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof tsqlListener ) {
        listener.enterDml_clause(this);
	}
};

Dml_clauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof tsqlListener ) {
        listener.exitDml_clause(this);
	}
};




tsqlParser.Dml_clauseContext = Dml_clauseContext;

tsqlParser.prototype.dml_clause = function() {

    var localctx = new Dml_clauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 8, tsqlParser.RULE_dml_clause);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 154;
        this.select_statement();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Select_statementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = tsqlParser.RULE_select_statement;
    return this;
}

Select_statementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Select_statementContext.prototype.constructor = Select_statementContext;

Select_statementContext.prototype.query_expression = function() {
    return this.getTypedRuleContext(Query_expressionContext,0);
};

Select_statementContext.prototype.order_by_clause = function() {
    return this.getTypedRuleContext(Order_by_clauseContext,0);
};

Select_statementContext.prototype.enterRule = function(listener) {
    if(listener instanceof tsqlListener ) {
        listener.enterSelect_statement(this);
	}
};

Select_statementContext.prototype.exitRule = function(listener) {
    if(listener instanceof tsqlListener ) {
        listener.exitSelect_statement(this);
	}
};




tsqlParser.Select_statementContext = Select_statementContext;

tsqlParser.prototype.select_statement = function() {

    var localctx = new Select_statementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 10, tsqlParser.RULE_select_statement);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 156;
        this.query_expression();
        this.state = 158;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,4,this._ctx);
        if(la_===1) {
            this.state = 157;
            this.order_by_clause();

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Go_statementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = tsqlParser.RULE_go_statement;
    this.count = null; // Token
    return this;
}

Go_statementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Go_statementContext.prototype.constructor = Go_statementContext;

Go_statementContext.prototype.GO = function() {
    return this.getToken(tsqlParser.GO, 0);
};

Go_statementContext.prototype.DECIMAL = function() {
    return this.getToken(tsqlParser.DECIMAL, 0);
};

Go_statementContext.prototype.enterRule = function(listener) {
    if(listener instanceof tsqlListener ) {
        listener.enterGo_statement(this);
	}
};

Go_statementContext.prototype.exitRule = function(listener) {
    if(listener instanceof tsqlListener ) {
        listener.exitGo_statement(this);
	}
};




tsqlParser.Go_statementContext = Go_statementContext;

tsqlParser.prototype.go_statement = function() {

    var localctx = new Go_statementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 12, tsqlParser.RULE_go_statement);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 160;
        this.match(tsqlParser.GO);
        this.state = 162;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===tsqlParser.DECIMAL) {
            this.state = 161;
            localctx.count = this.match(tsqlParser.DECIMAL);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ExpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = tsqlParser.RULE_expression;
    return this;
}

ExpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ExpressionContext.prototype.constructor = ExpressionContext;


 
ExpressionContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};

function Binary_operator_expressionContext(parser, ctx) {
	ExpressionContext.call(this, parser);
    this.op = null; // Token;
    ExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

Binary_operator_expressionContext.prototype = Object.create(ExpressionContext.prototype);
Binary_operator_expressionContext.prototype.constructor = Binary_operator_expressionContext;

tsqlParser.Binary_operator_expressionContext = Binary_operator_expressionContext;

Binary_operator_expressionContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};

Binary_operator_expressionContext.prototype.comparison_operator = function() {
    return this.getTypedRuleContext(Comparison_operatorContext,0);
};
Binary_operator_expressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof tsqlListener ) {
        listener.enterBinary_operator_expression(this);
	}
};

Binary_operator_expressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof tsqlListener ) {
        listener.exitBinary_operator_expression(this);
	}
};


function Primitive_expressionContext(parser, ctx) {
	ExpressionContext.call(this, parser);
    ExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

Primitive_expressionContext.prototype = Object.create(ExpressionContext.prototype);
Primitive_expressionContext.prototype.constructor = Primitive_expressionContext;

tsqlParser.Primitive_expressionContext = Primitive_expressionContext;

Primitive_expressionContext.prototype.DEFAULT = function() {
    return this.getToken(tsqlParser.DEFAULT, 0);
};

Primitive_expressionContext.prototype.NULL = function() {
    return this.getToken(tsqlParser.NULL, 0);
};

Primitive_expressionContext.prototype.LOCAL_ID = function() {
    return this.getToken(tsqlParser.LOCAL_ID, 0);
};

Primitive_expressionContext.prototype.constant = function() {
    return this.getTypedRuleContext(ConstantContext,0);
};
Primitive_expressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof tsqlListener ) {
        listener.enterPrimitive_expression(this);
	}
};

Primitive_expressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof tsqlListener ) {
        listener.exitPrimitive_expression(this);
	}
};


function Bracket_expressionContext(parser, ctx) {
	ExpressionContext.call(this, parser);
    ExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

Bracket_expressionContext.prototype = Object.create(ExpressionContext.prototype);
Bracket_expressionContext.prototype.constructor = Bracket_expressionContext;

tsqlParser.Bracket_expressionContext = Bracket_expressionContext;

Bracket_expressionContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};
Bracket_expressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof tsqlListener ) {
        listener.enterBracket_expression(this);
	}
};

Bracket_expressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof tsqlListener ) {
        listener.exitBracket_expression(this);
	}
};


function Unary_operator_expressionContext(parser, ctx) {
	ExpressionContext.call(this, parser);
    this.op = null; // Token;
    ExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

Unary_operator_expressionContext.prototype = Object.create(ExpressionContext.prototype);
Unary_operator_expressionContext.prototype.constructor = Unary_operator_expressionContext;

tsqlParser.Unary_operator_expressionContext = Unary_operator_expressionContext;

Unary_operator_expressionContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};
Unary_operator_expressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof tsqlListener ) {
        listener.enterUnary_operator_expression(this);
	}
};

Unary_operator_expressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof tsqlListener ) {
        listener.exitUnary_operator_expression(this);
	}
};


function Function_call_expressionContext(parser, ctx) {
	ExpressionContext.call(this, parser);
    ExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

Function_call_expressionContext.prototype = Object.create(ExpressionContext.prototype);
Function_call_expressionContext.prototype.constructor = Function_call_expressionContext;

tsqlParser.Function_call_expressionContext = Function_call_expressionContext;

Function_call_expressionContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

Function_call_expressionContext.prototype.COLLATE = function() {
    return this.getToken(tsqlParser.COLLATE, 0);
};

Function_call_expressionContext.prototype.id = function() {
    return this.getTypedRuleContext(IdContext,0);
};
Function_call_expressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof tsqlListener ) {
        listener.enterFunction_call_expression(this);
	}
};

Function_call_expressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof tsqlListener ) {
        listener.exitFunction_call_expression(this);
	}
};


function Case_expressionContext(parser, ctx) {
	ExpressionContext.call(this, parser);
    this.caseExpr = null; // ExpressionContext;
    this.elseExpr = null; // ExpressionContext;
    ExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

Case_expressionContext.prototype = Object.create(ExpressionContext.prototype);
Case_expressionContext.prototype.constructor = Case_expressionContext;

tsqlParser.Case_expressionContext = Case_expressionContext;

Case_expressionContext.prototype.CASE = function() {
    return this.getToken(tsqlParser.CASE, 0);
};

Case_expressionContext.prototype.END = function() {
    return this.getToken(tsqlParser.END, 0);
};

Case_expressionContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};

Case_expressionContext.prototype.switch_section = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Switch_sectionContext);
    } else {
        return this.getTypedRuleContext(Switch_sectionContext,i);
    }
};

Case_expressionContext.prototype.ELSE = function() {
    return this.getToken(tsqlParser.ELSE, 0);
};

Case_expressionContext.prototype.switch_search_condition_section = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Switch_search_condition_sectionContext);
    } else {
        return this.getTypedRuleContext(Switch_search_condition_sectionContext,i);
    }
};
Case_expressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof tsqlListener ) {
        listener.enterCase_expression(this);
	}
};

Case_expressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof tsqlListener ) {
        listener.exitCase_expression(this);
	}
};


function Column_ref_expressionContext(parser, ctx) {
	ExpressionContext.call(this, parser);
    ExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

Column_ref_expressionContext.prototype = Object.create(ExpressionContext.prototype);
Column_ref_expressionContext.prototype.constructor = Column_ref_expressionContext;

tsqlParser.Column_ref_expressionContext = Column_ref_expressionContext;

Column_ref_expressionContext.prototype.full_column_name = function() {
    return this.getTypedRuleContext(Full_column_nameContext,0);
};
Column_ref_expressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof tsqlListener ) {
        listener.enterColumn_ref_expression(this);
	}
};

Column_ref_expressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof tsqlListener ) {
        listener.exitColumn_ref_expression(this);
	}
};


function Subquery_expressionContext(parser, ctx) {
	ExpressionContext.call(this, parser);
    ExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

Subquery_expressionContext.prototype = Object.create(ExpressionContext.prototype);
Subquery_expressionContext.prototype.constructor = Subquery_expressionContext;

tsqlParser.Subquery_expressionContext = Subquery_expressionContext;

Subquery_expressionContext.prototype.subquery = function() {
    return this.getTypedRuleContext(SubqueryContext,0);
};
Subquery_expressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof tsqlListener ) {
        listener.enterSubquery_expression(this);
	}
};

Subquery_expressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof tsqlListener ) {
        listener.exitSubquery_expression(this);
	}
};


function Over_clause_expressionContext(parser, ctx) {
	ExpressionContext.call(this, parser);
    ExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

Over_clause_expressionContext.prototype = Object.create(ExpressionContext.prototype);
Over_clause_expressionContext.prototype.constructor = Over_clause_expressionContext;

tsqlParser.Over_clause_expressionContext = Over_clause_expressionContext;

Over_clause_expressionContext.prototype.over_clause = function() {
    return this.getTypedRuleContext(Over_clauseContext,0);
};
Over_clause_expressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof tsqlListener ) {
        listener.enterOver_clause_expression(this);
	}
};

Over_clause_expressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof tsqlListener ) {
        listener.exitOver_clause_expression(this);
	}
};



tsqlParser.prototype.expression = function(_p) {
	if(_p===undefined) {
	    _p = 0;
	}
    var _parentctx = this._ctx;
    var _parentState = this.state;
    var localctx = new ExpressionContext(this, this._ctx, _parentState);
    var _prevctx = localctx;
    var _startState = 14;
    this.enterRecursionRule(localctx, 14, tsqlParser.RULE_expression, _p);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 208;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,10,this._ctx);
        switch(la_) {
        case 1:
            localctx = new Primitive_expressionContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;

            this.state = 165;
            this.match(tsqlParser.DEFAULT);
            break;

        case 2:
            localctx = new Primitive_expressionContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 166;
            this.match(tsqlParser.NULL);
            break;

        case 3:
            localctx = new Primitive_expressionContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 167;
            this.match(tsqlParser.LOCAL_ID);
            break;

        case 4:
            localctx = new Primitive_expressionContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 168;
            this.constant();
            break;

        case 5:
            localctx = new Case_expressionContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 169;
            this.match(tsqlParser.CASE);
            this.state = 170;
            localctx.caseExpr = this.expression(0);
            this.state = 172; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            do {
                this.state = 171;
                this.switch_section();
                this.state = 174; 
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            } while(_la===tsqlParser.WHEN);
            this.state = 178;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===tsqlParser.ELSE) {
                this.state = 176;
                this.match(tsqlParser.ELSE);
                this.state = 177;
                localctx.elseExpr = this.expression(0);
            }

            this.state = 180;
            this.match(tsqlParser.END);
            break;

        case 6:
            localctx = new Case_expressionContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 182;
            this.match(tsqlParser.CASE);
            this.state = 184; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            do {
                this.state = 183;
                this.switch_search_condition_section();
                this.state = 186; 
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            } while(_la===tsqlParser.WHEN);
            this.state = 190;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===tsqlParser.ELSE) {
                this.state = 188;
                this.match(tsqlParser.ELSE);
                this.state = 189;
                localctx.elseExpr = this.expression(0);
            }

            this.state = 192;
            this.match(tsqlParser.END);
            break;

        case 7:
            localctx = new Column_ref_expressionContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 194;
            this.full_column_name();
            break;

        case 8:
            localctx = new Bracket_expressionContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 195;
            this.match(tsqlParser.LR_BRACKET);
            this.state = 196;
            this.expression(0);
            this.state = 197;
            this.match(tsqlParser.RR_BRACKET);
            break;

        case 9:
            localctx = new Subquery_expressionContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 199;
            this.match(tsqlParser.LR_BRACKET);
            this.state = 200;
            this.subquery();
            this.state = 201;
            this.match(tsqlParser.RR_BRACKET);
            break;

        case 10:
            localctx = new Unary_operator_expressionContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 203;
            this.match(tsqlParser.BIT_NOT);
            this.state = 204;
            this.expression(6);
            break;

        case 11:
            localctx = new Unary_operator_expressionContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 205;
            localctx.op = this._input.LT(1);
            _la = this._input.LA(1);
            if(!(_la===tsqlParser.PLUS || _la===tsqlParser.MINUS)) {
                localctx.op = this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            this.state = 206;
            this.expression(4);
            break;

        case 12:
            localctx = new Over_clause_expressionContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 207;
            this.over_clause();
            break;

        }
        this._ctx.stop = this._input.LT(-1);
        this.state = 225;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,12,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                if(this._parseListeners!==null) {
                    this.triggerExitRuleEvent();
                }
                _prevctx = localctx;
                this.state = 223;
                this._errHandler.sync(this);
                var la_ = this._interp.adaptivePredict(this._input,11,this._ctx);
                switch(la_) {
                case 1:
                    localctx = new Binary_operator_expressionContext(this, new ExpressionContext(this, _parentctx, _parentState));
                    this.pushNewRecursionContext(localctx, _startState, tsqlParser.RULE_expression);
                    this.state = 210;
                    if (!( this.precpred(this._ctx, 5))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 5)");
                    }
                    this.state = 211;
                    localctx.op = this._input.LT(1);
                    _la = this._input.LA(1);
                    if(!(((((_la - 430)) & ~0x1f) == 0 && ((1 << (_la - 430)) & ((1 << (tsqlParser.STAR - 430)) | (1 << (tsqlParser.DIVIDE - 430)) | (1 << (tsqlParser.MODULE - 430)))) !== 0))) {
                        localctx.op = this._errHandler.recoverInline(this);
                    }
                    else {
                    	this._errHandler.reportMatch(this);
                        this.consume();
                    }
                    this.state = 212;
                    this.expression(6);
                    break;

                case 2:
                    localctx = new Binary_operator_expressionContext(this, new ExpressionContext(this, _parentctx, _parentState));
                    this.pushNewRecursionContext(localctx, _startState, tsqlParser.RULE_expression);
                    this.state = 213;
                    if (!( this.precpred(this._ctx, 3))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 3)");
                    }
                    this.state = 214;
                    localctx.op = this._input.LT(1);
                    _la = this._input.LA(1);
                    if(!(((((_la - 433)) & ~0x1f) == 0 && ((1 << (_la - 433)) & ((1 << (tsqlParser.PLUS - 433)) | (1 << (tsqlParser.MINUS - 433)) | (1 << (tsqlParser.BIT_OR - 433)) | (1 << (tsqlParser.BIT_AND - 433)) | (1 << (tsqlParser.BIT_XOR - 433)))) !== 0))) {
                        localctx.op = this._errHandler.recoverInline(this);
                    }
                    else {
                    	this._errHandler.reportMatch(this);
                        this.consume();
                    }
                    this.state = 215;
                    this.expression(4);
                    break;

                case 3:
                    localctx = new Binary_operator_expressionContext(this, new ExpressionContext(this, _parentctx, _parentState));
                    this.pushNewRecursionContext(localctx, _startState, tsqlParser.RULE_expression);
                    this.state = 216;
                    if (!( this.precpred(this._ctx, 2))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 2)");
                    }
                    this.state = 217;
                    this.comparison_operator();
                    this.state = 218;
                    this.expression(3);
                    break;

                case 4:
                    localctx = new Function_call_expressionContext(this, new ExpressionContext(this, _parentctx, _parentState));
                    this.pushNewRecursionContext(localctx, _startState, tsqlParser.RULE_expression);
                    this.state = 220;
                    if (!( this.precpred(this._ctx, 12))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 12)");
                    }
                    this.state = 221;
                    this.match(tsqlParser.COLLATE);
                    this.state = 222;
                    this.id();
                    break;

                } 
            }
            this.state = 227;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,12,this._ctx);
        }

    } catch( error) {
        if(error instanceof antlr4.error.RecognitionException) {
	        localctx.exception = error;
	        this._errHandler.reportError(this, error);
	        this._errHandler.recover(this, error);
	    } else {
	    	throw error;
	    }
    } finally {
        this.unrollRecursionContexts(_parentctx)
    }
    return localctx;
};

function Constant_expressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = tsqlParser.RULE_constant_expression;
    return this;
}

Constant_expressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Constant_expressionContext.prototype.constructor = Constant_expressionContext;

Constant_expressionContext.prototype.NULL = function() {
    return this.getToken(tsqlParser.NULL, 0);
};

Constant_expressionContext.prototype.constant = function() {
    return this.getTypedRuleContext(ConstantContext,0);
};

Constant_expressionContext.prototype.function_call = function() {
    return this.getTypedRuleContext(Function_callContext,0);
};

Constant_expressionContext.prototype.LOCAL_ID = function() {
    return this.getToken(tsqlParser.LOCAL_ID, 0);
};

Constant_expressionContext.prototype.constant_expression = function() {
    return this.getTypedRuleContext(Constant_expressionContext,0);
};

Constant_expressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof tsqlListener ) {
        listener.enterConstant_expression(this);
	}
};

Constant_expressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof tsqlListener ) {
        listener.exitConstant_expression(this);
	}
};




tsqlParser.Constant_expressionContext = Constant_expressionContext;

tsqlParser.prototype.constant_expression = function() {

    var localctx = new Constant_expressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 16, tsqlParser.RULE_constant_expression);
    try {
        this.state = 236;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case tsqlParser.NULL:
            this.enterOuterAlt(localctx, 1);
            this.state = 228;
            this.match(tsqlParser.NULL);
            break;
        case tsqlParser.DECIMAL:
        case tsqlParser.STRING:
        case tsqlParser.BINARY:
        case tsqlParser.FLOAT:
        case tsqlParser.REAL:
        case tsqlParser.DOLLAR:
        case tsqlParser.PLUS:
        case tsqlParser.MINUS:
            this.enterOuterAlt(localctx, 2);
            this.state = 229;
            this.constant();
            break;
        case tsqlParser.COALESCE:
        case tsqlParser.CONVERT:
        case tsqlParser.CURRENT_TIMESTAMP:
        case tsqlParser.CURRENT_USER:
        case tsqlParser.FORCESEEK:
        case tsqlParser.IDENTITY:
        case tsqlParser.LEFT:
        case tsqlParser.NULLIF:
        case tsqlParser.RIGHT:
        case tsqlParser.SESSION_USER:
        case tsqlParser.SYSTEM_USER:
        case tsqlParser.ABSOLUTE:
        case tsqlParser.APPLY:
        case tsqlParser.AUTO:
        case tsqlParser.AVG:
        case tsqlParser.BASE64:
        case tsqlParser.BINARY_CHECKSUM:
        case tsqlParser.CALLER:
        case tsqlParser.CAST:
        case tsqlParser.CATCH:
        case tsqlParser.CHECKSUM:
        case tsqlParser.CHECKSUM_AGG:
        case tsqlParser.COMMITTED:
        case tsqlParser.CONCAT:
        case tsqlParser.CONTROL:
        case tsqlParser.COOKIE:
        case tsqlParser.COUNT:
        case tsqlParser.COUNT_BIG:
        case tsqlParser.DATEADD:
        case tsqlParser.DATEDIFF:
        case tsqlParser.DATENAME:
        case tsqlParser.DATEPART:
        case tsqlParser.DELAY:
        case tsqlParser.DELETED:
        case tsqlParser.DENSE_RANK:
        case tsqlParser.DISABLE:
        case tsqlParser.DYNAMIC:
        case tsqlParser.ENCRYPTION:
        case tsqlParser.EXPAND:
        case tsqlParser.FAST:
        case tsqlParser.FAST_FORWARD:
        case tsqlParser.FIRST:
        case tsqlParser.FOLLOWING:
        case tsqlParser.FORCE:
        case tsqlParser.FORCED:
        case tsqlParser.FORWARD_ONLY:
        case tsqlParser.FULLSCAN:
        case tsqlParser.GLOBAL:
        case tsqlParser.GO:
        case tsqlParser.GROUPING:
        case tsqlParser.GROUPING_ID:
        case tsqlParser.HASH:
        case tsqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
        case tsqlParser.IMPERSONATE:
        case tsqlParser.INSENSITIVE:
        case tsqlParser.INSERTED:
        case tsqlParser.ISOLATION:
        case tsqlParser.KEEP:
        case tsqlParser.KEEPFIXED:
        case tsqlParser.KEYSET:
        case tsqlParser.LAST:
        case tsqlParser.LEVEL:
        case tsqlParser.LOCAL:
        case tsqlParser.LOCK_ESCALATION:
        case tsqlParser.LOGIN:
        case tsqlParser.LOOP:
        case tsqlParser.MARK:
        case tsqlParser.MAX:
        case tsqlParser.MAXDOP:
        case tsqlParser.MAXRECURSION:
        case tsqlParser.MIN:
        case tsqlParser.MIN_ACTIVE_ROWVERSION:
        case tsqlParser.MODIFY:
        case tsqlParser.NAME:
        case tsqlParser.NEXT:
        case tsqlParser.NOCOUNT:
        case tsqlParser.NOEXPAND:
        case tsqlParser.NORECOMPUTE:
        case tsqlParser.NTILE:
        case tsqlParser.NUMBER:
        case tsqlParser.OFFSET:
        case tsqlParser.ONLINE:
        case tsqlParser.ONLY:
        case tsqlParser.OPTIMISTIC:
        case tsqlParser.OPTIMIZE:
        case tsqlParser.OUT:
        case tsqlParser.OUTPUT:
        case tsqlParser.OWNER:
        case tsqlParser.PARAMETERIZATION:
        case tsqlParser.PARTITION:
        case tsqlParser.PATH:
        case tsqlParser.PRECEDING:
        case tsqlParser.PRIOR:
        case tsqlParser.PRIVILEGES:
        case tsqlParser.RANGE:
        case tsqlParser.RANK:
        case tsqlParser.READONLY:
        case tsqlParser.READ_ONLY:
        case tsqlParser.RECOMPILE:
        case tsqlParser.RELATIVE:
        case tsqlParser.REMOTE:
        case tsqlParser.REPEATABLE:
        case tsqlParser.ROBUST:
        case tsqlParser.ROOT:
        case tsqlParser.ROW:
        case tsqlParser.ROWGUID:
        case tsqlParser.ROWS:
        case tsqlParser.ROW_NUMBER:
        case tsqlParser.SAMPLE:
        case tsqlParser.SCHEMABINDING:
        case tsqlParser.SCROLL:
        case tsqlParser.SCROLL_LOCKS:
        case tsqlParser.SELF:
        case tsqlParser.SERIALIZABLE:
        case tsqlParser.SIMPLE:
        case tsqlParser.SNAPSHOT:
        case tsqlParser.SPATIAL_WINDOW_MAX_CELLS:
        case tsqlParser.STATIC:
        case tsqlParser.STATS_STREAM:
        case tsqlParser.STDEV:
        case tsqlParser.STDEVP:
        case tsqlParser.SUM:
        case tsqlParser.TEXTIMAGE_ON:
        case tsqlParser.THROW:
        case tsqlParser.TIES:
        case tsqlParser.TIME:
        case tsqlParser.TRY:
        case tsqlParser.TYPE:
        case tsqlParser.TYPE_WARNING:
        case tsqlParser.UNBOUNDED:
        case tsqlParser.UNCOMMITTED:
        case tsqlParser.UNKNOWN:
        case tsqlParser.USING:
        case tsqlParser.VAR:
        case tsqlParser.VARP:
        case tsqlParser.VIEWS:
        case tsqlParser.VIEW_METADATA:
        case tsqlParser.WORK:
        case tsqlParser.XML:
        case tsqlParser.XMLNAMESPACES:
        case tsqlParser.DOUBLE_QUOTE_ID:
        case tsqlParser.SQUARE_BRACKET_ID:
        case tsqlParser.ID:
            this.enterOuterAlt(localctx, 3);
            this.state = 230;
            this.function_call();
            break;
        case tsqlParser.LOCAL_ID:
            this.enterOuterAlt(localctx, 4);
            this.state = 231;
            this.match(tsqlParser.LOCAL_ID);
            break;
        case tsqlParser.LR_BRACKET:
            this.enterOuterAlt(localctx, 5);
            this.state = 232;
            this.match(tsqlParser.LR_BRACKET);
            this.state = 233;
            this.constant_expression();
            this.state = 234;
            this.match(tsqlParser.RR_BRACKET);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function SubqueryContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = tsqlParser.RULE_subquery;
    return this;
}

SubqueryContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SubqueryContext.prototype.constructor = SubqueryContext;

SubqueryContext.prototype.select_statement = function() {
    return this.getTypedRuleContext(Select_statementContext,0);
};

SubqueryContext.prototype.enterRule = function(listener) {
    if(listener instanceof tsqlListener ) {
        listener.enterSubquery(this);
	}
};

SubqueryContext.prototype.exitRule = function(listener) {
    if(listener instanceof tsqlListener ) {
        listener.exitSubquery(this);
	}
};




tsqlParser.SubqueryContext = SubqueryContext;

tsqlParser.prototype.subquery = function() {

    var localctx = new SubqueryContext(this, this._ctx, this.state);
    this.enterRule(localctx, 18, tsqlParser.RULE_subquery);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 238;
        this.select_statement();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Search_conditionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = tsqlParser.RULE_search_condition;
    return this;
}

Search_conditionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Search_conditionContext.prototype.constructor = Search_conditionContext;

Search_conditionContext.prototype.search_condition_and = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Search_condition_andContext);
    } else {
        return this.getTypedRuleContext(Search_condition_andContext,i);
    }
};

Search_conditionContext.prototype.OR = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(tsqlParser.OR);
    } else {
        return this.getToken(tsqlParser.OR, i);
    }
};


Search_conditionContext.prototype.enterRule = function(listener) {
    if(listener instanceof tsqlListener ) {
        listener.enterSearch_condition(this);
	}
};

Search_conditionContext.prototype.exitRule = function(listener) {
    if(listener instanceof tsqlListener ) {
        listener.exitSearch_condition(this);
	}
};




tsqlParser.Search_conditionContext = Search_conditionContext;

tsqlParser.prototype.search_condition = function() {

    var localctx = new Search_conditionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 20, tsqlParser.RULE_search_condition);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 240;
        this.search_condition_and();
        this.state = 245;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===tsqlParser.OR) {
            this.state = 241;
            this.match(tsqlParser.OR);
            this.state = 242;
            this.search_condition_and();
            this.state = 247;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Search_condition_andContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = tsqlParser.RULE_search_condition_and;
    return this;
}

Search_condition_andContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Search_condition_andContext.prototype.constructor = Search_condition_andContext;

Search_condition_andContext.prototype.search_condition_not = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Search_condition_notContext);
    } else {
        return this.getTypedRuleContext(Search_condition_notContext,i);
    }
};

Search_condition_andContext.prototype.AND = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(tsqlParser.AND);
    } else {
        return this.getToken(tsqlParser.AND, i);
    }
};


Search_condition_andContext.prototype.enterRule = function(listener) {
    if(listener instanceof tsqlListener ) {
        listener.enterSearch_condition_and(this);
	}
};

Search_condition_andContext.prototype.exitRule = function(listener) {
    if(listener instanceof tsqlListener ) {
        listener.exitSearch_condition_and(this);
	}
};




tsqlParser.Search_condition_andContext = Search_condition_andContext;

tsqlParser.prototype.search_condition_and = function() {

    var localctx = new Search_condition_andContext(this, this._ctx, this.state);
    this.enterRule(localctx, 22, tsqlParser.RULE_search_condition_and);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 248;
        this.search_condition_not();
        this.state = 253;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===tsqlParser.AND) {
            this.state = 249;
            this.match(tsqlParser.AND);
            this.state = 250;
            this.search_condition_not();
            this.state = 255;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Search_condition_notContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = tsqlParser.RULE_search_condition_not;
    return this;
}

Search_condition_notContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Search_condition_notContext.prototype.constructor = Search_condition_notContext;

Search_condition_notContext.prototype.predicate = function() {
    return this.getTypedRuleContext(PredicateContext,0);
};

Search_condition_notContext.prototype.NOT = function() {
    return this.getToken(tsqlParser.NOT, 0);
};

Search_condition_notContext.prototype.enterRule = function(listener) {
    if(listener instanceof tsqlListener ) {
        listener.enterSearch_condition_not(this);
	}
};

Search_condition_notContext.prototype.exitRule = function(listener) {
    if(listener instanceof tsqlListener ) {
        listener.exitSearch_condition_not(this);
	}
};




tsqlParser.Search_condition_notContext = Search_condition_notContext;

tsqlParser.prototype.search_condition_not = function() {

    var localctx = new Search_condition_notContext(this, this._ctx, this.state);
    this.enterRule(localctx, 24, tsqlParser.RULE_search_condition_not);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 257;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===tsqlParser.NOT) {
            this.state = 256;
            this.match(tsqlParser.NOT);
        }

        this.state = 259;
        this.predicate();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function PredicateContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = tsqlParser.RULE_predicate;
    return this;
}

PredicateContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PredicateContext.prototype.constructor = PredicateContext;

PredicateContext.prototype.EXISTS = function() {
    return this.getToken(tsqlParser.EXISTS, 0);
};

PredicateContext.prototype.subquery = function() {
    return this.getTypedRuleContext(SubqueryContext,0);
};

PredicateContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};

PredicateContext.prototype.comparison_operator = function() {
    return this.getTypedRuleContext(Comparison_operatorContext,0);
};

PredicateContext.prototype.ALL = function() {
    return this.getToken(tsqlParser.ALL, 0);
};

PredicateContext.prototype.SOME = function() {
    return this.getToken(tsqlParser.SOME, 0);
};

PredicateContext.prototype.ANY = function() {
    return this.getToken(tsqlParser.ANY, 0);
};

PredicateContext.prototype.BETWEEN = function() {
    return this.getToken(tsqlParser.BETWEEN, 0);
};

PredicateContext.prototype.AND = function() {
    return this.getToken(tsqlParser.AND, 0);
};

PredicateContext.prototype.NOT = function() {
    return this.getToken(tsqlParser.NOT, 0);
};

PredicateContext.prototype.IN = function() {
    return this.getToken(tsqlParser.IN, 0);
};

PredicateContext.prototype.expression_list = function() {
    return this.getTypedRuleContext(Expression_listContext,0);
};

PredicateContext.prototype.LIKE = function() {
    return this.getToken(tsqlParser.LIKE, 0);
};

PredicateContext.prototype.ESCAPE = function() {
    return this.getToken(tsqlParser.ESCAPE, 0);
};

PredicateContext.prototype.IS = function() {
    return this.getToken(tsqlParser.IS, 0);
};

PredicateContext.prototype.null_notnull = function() {
    return this.getTypedRuleContext(Null_notnullContext,0);
};

PredicateContext.prototype.search_condition = function() {
    return this.getTypedRuleContext(Search_conditionContext,0);
};

PredicateContext.prototype.DECIMAL = function() {
    return this.getToken(tsqlParser.DECIMAL, 0);
};

PredicateContext.prototype.enterRule = function(listener) {
    if(listener instanceof tsqlListener ) {
        listener.enterPredicate(this);
	}
};

PredicateContext.prototype.exitRule = function(listener) {
    if(listener instanceof tsqlListener ) {
        listener.exitPredicate(this);
	}
};




tsqlParser.PredicateContext = PredicateContext;

tsqlParser.prototype.predicate = function() {

    var localctx = new PredicateContext(this, this._ctx, this.state);
    this.enterRule(localctx, 26, tsqlParser.RULE_predicate);
    var _la = 0; // Token type
    try {
        this.state = 317;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,22,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 261;
            this.match(tsqlParser.EXISTS);
            this.state = 262;
            this.match(tsqlParser.LR_BRACKET);
            this.state = 263;
            this.subquery();
            this.state = 264;
            this.match(tsqlParser.RR_BRACKET);
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 266;
            this.expression(0);
            this.state = 267;
            this.comparison_operator();
            this.state = 268;
            this.expression(0);
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 270;
            this.expression(0);
            this.state = 271;
            this.comparison_operator();
            this.state = 272;
            _la = this._input.LA(1);
            if(!(_la===tsqlParser.ALL || _la===tsqlParser.ANY || _la===tsqlParser.SOME)) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            this.state = 273;
            this.match(tsqlParser.LR_BRACKET);
            this.state = 274;
            this.subquery();
            this.state = 275;
            this.match(tsqlParser.RR_BRACKET);
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 277;
            this.expression(0);
            this.state = 279;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===tsqlParser.NOT) {
                this.state = 278;
                this.match(tsqlParser.NOT);
            }

            this.state = 281;
            this.match(tsqlParser.BETWEEN);
            this.state = 282;
            this.expression(0);
            this.state = 283;
            this.match(tsqlParser.AND);
            this.state = 284;
            this.expression(0);
            break;

        case 5:
            this.enterOuterAlt(localctx, 5);
            this.state = 286;
            this.expression(0);
            this.state = 288;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===tsqlParser.NOT) {
                this.state = 287;
                this.match(tsqlParser.NOT);
            }

            this.state = 290;
            this.match(tsqlParser.IN);
            this.state = 291;
            this.match(tsqlParser.LR_BRACKET);
            this.state = 294;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,19,this._ctx);
            switch(la_) {
            case 1:
                this.state = 292;
                this.subquery();
                break;

            case 2:
                this.state = 293;
                this.expression_list();
                break;

            }
            this.state = 296;
            this.match(tsqlParser.RR_BRACKET);
            break;

        case 6:
            this.enterOuterAlt(localctx, 6);
            this.state = 298;
            this.expression(0);
            this.state = 300;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===tsqlParser.NOT) {
                this.state = 299;
                this.match(tsqlParser.NOT);
            }

            this.state = 302;
            this.match(tsqlParser.LIKE);
            this.state = 303;
            this.expression(0);
            this.state = 306;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===tsqlParser.ESCAPE) {
                this.state = 304;
                this.match(tsqlParser.ESCAPE);
                this.state = 305;
                this.expression(0);
            }

            break;

        case 7:
            this.enterOuterAlt(localctx, 7);
            this.state = 308;
            this.expression(0);
            this.state = 309;
            this.match(tsqlParser.IS);
            this.state = 310;
            this.null_notnull();
            break;

        case 8:
            this.enterOuterAlt(localctx, 8);
            this.state = 312;
            this.match(tsqlParser.LR_BRACKET);
            this.state = 313;
            this.search_condition();
            this.state = 314;
            this.match(tsqlParser.RR_BRACKET);
            break;

        case 9:
            this.enterOuterAlt(localctx, 9);
            this.state = 316;
            this.match(tsqlParser.DECIMAL);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Query_expressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = tsqlParser.RULE_query_expression;
    return this;
}

Query_expressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Query_expressionContext.prototype.constructor = Query_expressionContext;

Query_expressionContext.prototype.query_specification = function() {
    return this.getTypedRuleContext(Query_specificationContext,0);
};

Query_expressionContext.prototype.query_expression = function() {
    return this.getTypedRuleContext(Query_expressionContext,0);
};

Query_expressionContext.prototype.union = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(UnionContext);
    } else {
        return this.getTypedRuleContext(UnionContext,i);
    }
};

Query_expressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof tsqlListener ) {
        listener.enterQuery_expression(this);
	}
};

Query_expressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof tsqlListener ) {
        listener.exitQuery_expression(this);
	}
};




tsqlParser.Query_expressionContext = Query_expressionContext;

tsqlParser.prototype.query_expression = function() {

    var localctx = new Query_expressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 28, tsqlParser.RULE_query_expression);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 324;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case tsqlParser.SELECT:
            this.state = 319;
            this.query_specification();
            break;
        case tsqlParser.LR_BRACKET:
            this.state = 320;
            this.match(tsqlParser.LR_BRACKET);
            this.state = 321;
            this.query_expression();
            this.state = 322;
            this.match(tsqlParser.RR_BRACKET);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
        this.state = 329;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,24,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 326;
                this.union(); 
            }
            this.state = 331;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,24,this._ctx);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function UnionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = tsqlParser.RULE_union;
    return this;
}

UnionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
UnionContext.prototype.constructor = UnionContext;

UnionContext.prototype.UNION = function() {
    return this.getToken(tsqlParser.UNION, 0);
};

UnionContext.prototype.EXCEPT = function() {
    return this.getToken(tsqlParser.EXCEPT, 0);
};

UnionContext.prototype.INTERSECT = function() {
    return this.getToken(tsqlParser.INTERSECT, 0);
};

UnionContext.prototype.query_specification = function() {
    return this.getTypedRuleContext(Query_specificationContext,0);
};

UnionContext.prototype.ALL = function() {
    return this.getToken(tsqlParser.ALL, 0);
};

UnionContext.prototype.query_expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Query_expressionContext);
    } else {
        return this.getTypedRuleContext(Query_expressionContext,i);
    }
};

UnionContext.prototype.enterRule = function(listener) {
    if(listener instanceof tsqlListener ) {
        listener.enterUnion(this);
	}
};

UnionContext.prototype.exitRule = function(listener) {
    if(listener instanceof tsqlListener ) {
        listener.exitUnion(this);
	}
};




tsqlParser.UnionContext = UnionContext;

tsqlParser.prototype.union = function() {

    var localctx = new UnionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 30, tsqlParser.RULE_union);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 338;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case tsqlParser.UNION:
            this.state = 332;
            this.match(tsqlParser.UNION);
            this.state = 334;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===tsqlParser.ALL) {
                this.state = 333;
                this.match(tsqlParser.ALL);
            }

            break;
        case tsqlParser.EXCEPT:
            this.state = 336;
            this.match(tsqlParser.EXCEPT);
            break;
        case tsqlParser.INTERSECT:
            this.state = 337;
            this.match(tsqlParser.INTERSECT);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
        this.state = 349;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case tsqlParser.SELECT:
            this.state = 340;
            this.query_specification();
            break;
        case tsqlParser.LR_BRACKET:
            this.state = 345; 
            this._errHandler.sync(this);
            var _alt = 1;
            do {
            	switch (_alt) {
            	case 1:
            		this.state = 341;
            		this.match(tsqlParser.LR_BRACKET);
            		this.state = 342;
            		this.query_expression();
            		this.state = 343;
            		this.match(tsqlParser.RR_BRACKET);
            		break;
            	default:
            		throw new antlr4.error.NoViableAltException(this);
            	}
            	this.state = 347; 
            	this._errHandler.sync(this);
            	_alt = this._interp.adaptivePredict(this._input,27, this._ctx);
            } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Query_specificationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = tsqlParser.RULE_query_specification;
    this.where = null; // Search_conditionContext
    this.having = null; // Search_conditionContext
    return this;
}

Query_specificationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Query_specificationContext.prototype.constructor = Query_specificationContext;

Query_specificationContext.prototype.SELECT = function() {
    return this.getToken(tsqlParser.SELECT, 0);
};

Query_specificationContext.prototype.select_list = function() {
    return this.getTypedRuleContext(Select_listContext,0);
};

Query_specificationContext.prototype.TOP = function() {
    return this.getToken(tsqlParser.TOP, 0);
};

Query_specificationContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

Query_specificationContext.prototype.INTO = function() {
    return this.getToken(tsqlParser.INTO, 0);
};

Query_specificationContext.prototype.table_name = function() {
    return this.getTypedRuleContext(Table_nameContext,0);
};

Query_specificationContext.prototype.FROM = function() {
    return this.getToken(tsqlParser.FROM, 0);
};

Query_specificationContext.prototype.table_sources = function() {
    return this.getTypedRuleContext(Table_sourcesContext,0);
};

Query_specificationContext.prototype.WHERE = function() {
    return this.getToken(tsqlParser.WHERE, 0);
};

Query_specificationContext.prototype.GROUP = function() {
    return this.getToken(tsqlParser.GROUP, 0);
};

Query_specificationContext.prototype.BY = function() {
    return this.getToken(tsqlParser.BY, 0);
};

Query_specificationContext.prototype.group_by_item = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Group_by_itemContext);
    } else {
        return this.getTypedRuleContext(Group_by_itemContext,i);
    }
};

Query_specificationContext.prototype.HAVING = function() {
    return this.getToken(tsqlParser.HAVING, 0);
};

Query_specificationContext.prototype.ALL = function() {
    return this.getToken(tsqlParser.ALL, 0);
};

Query_specificationContext.prototype.DISTINCT = function() {
    return this.getToken(tsqlParser.DISTINCT, 0);
};

Query_specificationContext.prototype.search_condition = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Search_conditionContext);
    } else {
        return this.getTypedRuleContext(Search_conditionContext,i);
    }
};

Query_specificationContext.prototype.PERCENT = function() {
    return this.getToken(tsqlParser.PERCENT, 0);
};

Query_specificationContext.prototype.WITH = function() {
    return this.getToken(tsqlParser.WITH, 0);
};

Query_specificationContext.prototype.TIES = function() {
    return this.getToken(tsqlParser.TIES, 0);
};

Query_specificationContext.prototype.enterRule = function(listener) {
    if(listener instanceof tsqlListener ) {
        listener.enterQuery_specification(this);
	}
};

Query_specificationContext.prototype.exitRule = function(listener) {
    if(listener instanceof tsqlListener ) {
        listener.exitQuery_specification(this);
	}
};




tsqlParser.Query_specificationContext = Query_specificationContext;

tsqlParser.prototype.query_specification = function() {

    var localctx = new Query_specificationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 32, tsqlParser.RULE_query_specification);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 351;
        this.match(tsqlParser.SELECT);
        this.state = 353;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===tsqlParser.ALL || _la===tsqlParser.DISTINCT) {
            this.state = 352;
            _la = this._input.LA(1);
            if(!(_la===tsqlParser.ALL || _la===tsqlParser.DISTINCT)) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
        }

        this.state = 364;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===tsqlParser.TOP) {
            this.state = 355;
            this.match(tsqlParser.TOP);
            this.state = 356;
            this.expression(0);
            this.state = 358;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===tsqlParser.PERCENT) {
                this.state = 357;
                this.match(tsqlParser.PERCENT);
            }

            this.state = 362;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===tsqlParser.WITH) {
                this.state = 360;
                this.match(tsqlParser.WITH);
                this.state = 361;
                this.match(tsqlParser.TIES);
            }

        }

        this.state = 366;
        this.select_list();
        this.state = 369;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===tsqlParser.INTO) {
            this.state = 367;
            this.match(tsqlParser.INTO);
            this.state = 368;
            this.table_name();
        }

        this.state = 373;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===tsqlParser.FROM) {
            this.state = 371;
            this.match(tsqlParser.FROM);
            this.state = 372;
            this.table_sources();
        }

        this.state = 377;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,35,this._ctx);
        if(la_===1) {
            this.state = 375;
            this.match(tsqlParser.WHERE);
            this.state = 376;
            localctx.where = this.search_condition();

        }
        this.state = 389;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,37,this._ctx);
        if(la_===1) {
            this.state = 379;
            this.match(tsqlParser.GROUP);
            this.state = 380;
            this.match(tsqlParser.BY);
            this.state = 381;
            this.group_by_item();
            this.state = 386;
            this._errHandler.sync(this);
            var _alt = this._interp.adaptivePredict(this._input,36,this._ctx)
            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
                if(_alt===1) {
                    this.state = 382;
                    this.match(tsqlParser.COMMA);
                    this.state = 383;
                    this.group_by_item(); 
                }
                this.state = 388;
                this._errHandler.sync(this);
                _alt = this._interp.adaptivePredict(this._input,36,this._ctx);
            }


        }
        this.state = 393;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,38,this._ctx);
        if(la_===1) {
            this.state = 391;
            this.match(tsqlParser.HAVING);
            this.state = 392;
            localctx.having = this.search_condition();

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Order_by_clauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = tsqlParser.RULE_order_by_clause;
    return this;
}

Order_by_clauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Order_by_clauseContext.prototype.constructor = Order_by_clauseContext;

Order_by_clauseContext.prototype.ORDER = function() {
    return this.getToken(tsqlParser.ORDER, 0);
};

Order_by_clauseContext.prototype.BY = function() {
    return this.getToken(tsqlParser.BY, 0);
};

Order_by_clauseContext.prototype.order_by_expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Order_by_expressionContext);
    } else {
        return this.getTypedRuleContext(Order_by_expressionContext,i);
    }
};

Order_by_clauseContext.prototype.OFFSET = function() {
    return this.getToken(tsqlParser.OFFSET, 0);
};

Order_by_clauseContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};

Order_by_clauseContext.prototype.ROW = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(tsqlParser.ROW);
    } else {
        return this.getToken(tsqlParser.ROW, i);
    }
};


Order_by_clauseContext.prototype.ROWS = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(tsqlParser.ROWS);
    } else {
        return this.getToken(tsqlParser.ROWS, i);
    }
};


Order_by_clauseContext.prototype.FETCH = function() {
    return this.getToken(tsqlParser.FETCH, 0);
};

Order_by_clauseContext.prototype.ONLY = function() {
    return this.getToken(tsqlParser.ONLY, 0);
};

Order_by_clauseContext.prototype.FIRST = function() {
    return this.getToken(tsqlParser.FIRST, 0);
};

Order_by_clauseContext.prototype.NEXT = function() {
    return this.getToken(tsqlParser.NEXT, 0);
};

Order_by_clauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof tsqlListener ) {
        listener.enterOrder_by_clause(this);
	}
};

Order_by_clauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof tsqlListener ) {
        listener.exitOrder_by_clause(this);
	}
};




tsqlParser.Order_by_clauseContext = Order_by_clauseContext;

tsqlParser.prototype.order_by_clause = function() {

    var localctx = new Order_by_clauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 34, tsqlParser.RULE_order_by_clause);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 395;
        this.match(tsqlParser.ORDER);
        this.state = 396;
        this.match(tsqlParser.BY);
        this.state = 397;
        this.order_by_expression();
        this.state = 402;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,39,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 398;
                this.match(tsqlParser.COMMA);
                this.state = 399;
                this.order_by_expression(); 
            }
            this.state = 404;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,39,this._ctx);
        }

        this.state = 416;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,41,this._ctx);
        if(la_===1) {
            this.state = 405;
            this.match(tsqlParser.OFFSET);
            this.state = 406;
            this.expression(0);
            this.state = 407;
            _la = this._input.LA(1);
            if(!(_la===tsqlParser.ROW || _la===tsqlParser.ROWS)) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            this.state = 414;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===tsqlParser.FETCH) {
                this.state = 408;
                this.match(tsqlParser.FETCH);
                this.state = 409;
                _la = this._input.LA(1);
                if(!(_la===tsqlParser.FIRST || _la===tsqlParser.NEXT)) {
                this._errHandler.recoverInline(this);
                }
                else {
                	this._errHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 410;
                this.expression(0);
                this.state = 411;
                _la = this._input.LA(1);
                if(!(_la===tsqlParser.ROW || _la===tsqlParser.ROWS)) {
                this._errHandler.recoverInline(this);
                }
                else {
                	this._errHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 412;
                this.match(tsqlParser.ONLY);
            }


        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Order_by_expressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = tsqlParser.RULE_order_by_expression;
    return this;
}

Order_by_expressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Order_by_expressionContext.prototype.constructor = Order_by_expressionContext;

Order_by_expressionContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

Order_by_expressionContext.prototype.ASC = function() {
    return this.getToken(tsqlParser.ASC, 0);
};

Order_by_expressionContext.prototype.DESC = function() {
    return this.getToken(tsqlParser.DESC, 0);
};

Order_by_expressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof tsqlListener ) {
        listener.enterOrder_by_expression(this);
	}
};

Order_by_expressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof tsqlListener ) {
        listener.exitOrder_by_expression(this);
	}
};




tsqlParser.Order_by_expressionContext = Order_by_expressionContext;

tsqlParser.prototype.order_by_expression = function() {

    var localctx = new Order_by_expressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 36, tsqlParser.RULE_order_by_expression);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 418;
        this.expression(0);
        this.state = 420;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===tsqlParser.ASC || _la===tsqlParser.DESC) {
            this.state = 419;
            _la = this._input.LA(1);
            if(!(_la===tsqlParser.ASC || _la===tsqlParser.DESC)) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Group_by_itemContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = tsqlParser.RULE_group_by_item;
    return this;
}

Group_by_itemContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Group_by_itemContext.prototype.constructor = Group_by_itemContext;

Group_by_itemContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

Group_by_itemContext.prototype.enterRule = function(listener) {
    if(listener instanceof tsqlListener ) {
        listener.enterGroup_by_item(this);
	}
};

Group_by_itemContext.prototype.exitRule = function(listener) {
    if(listener instanceof tsqlListener ) {
        listener.exitGroup_by_item(this);
	}
};




tsqlParser.Group_by_itemContext = Group_by_itemContext;

tsqlParser.prototype.group_by_item = function() {

    var localctx = new Group_by_itemContext(this, this._ctx, this.state);
    this.enterRule(localctx, 38, tsqlParser.RULE_group_by_item);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 422;
        this.expression(0);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Select_listContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = tsqlParser.RULE_select_list;
    return this;
}

Select_listContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Select_listContext.prototype.constructor = Select_listContext;

Select_listContext.prototype.select_list_elem = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Select_list_elemContext);
    } else {
        return this.getTypedRuleContext(Select_list_elemContext,i);
    }
};

Select_listContext.prototype.enterRule = function(listener) {
    if(listener instanceof tsqlListener ) {
        listener.enterSelect_list(this);
	}
};

Select_listContext.prototype.exitRule = function(listener) {
    if(listener instanceof tsqlListener ) {
        listener.exitSelect_list(this);
	}
};




tsqlParser.Select_listContext = Select_listContext;

tsqlParser.prototype.select_list = function() {

    var localctx = new Select_listContext(this, this._ctx, this.state);
    this.enterRule(localctx, 40, tsqlParser.RULE_select_list);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 424;
        this.select_list_elem();
        this.state = 429;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,43,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 425;
                this.match(tsqlParser.COMMA);
                this.state = 426;
                this.select_list_elem(); 
            }
            this.state = 431;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,43,this._ctx);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Select_list_elemContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = tsqlParser.RULE_select_list_elem;
    return this;
}

Select_list_elemContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Select_list_elemContext.prototype.constructor = Select_list_elemContext;

Select_list_elemContext.prototype.table_name = function() {
    return this.getTypedRuleContext(Table_nameContext,0);
};

Select_list_elemContext.prototype.IDENTITY = function() {
    return this.getToken(tsqlParser.IDENTITY, 0);
};

Select_list_elemContext.prototype.ROWGUID = function() {
    return this.getToken(tsqlParser.ROWGUID, 0);
};

Select_list_elemContext.prototype.column_alias = function() {
    return this.getTypedRuleContext(Column_aliasContext,0);
};

Select_list_elemContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

Select_list_elemContext.prototype.AS = function() {
    return this.getToken(tsqlParser.AS, 0);
};

Select_list_elemContext.prototype.enterRule = function(listener) {
    if(listener instanceof tsqlListener ) {
        listener.enterSelect_list_elem(this);
	}
};

Select_list_elemContext.prototype.exitRule = function(listener) {
    if(listener instanceof tsqlListener ) {
        listener.exitSelect_list_elem(this);
	}
};




tsqlParser.Select_list_elemContext = Select_list_elemContext;

tsqlParser.prototype.select_list_elem = function() {

    var localctx = new Select_list_elemContext(this, this._ctx, this.state);
    this.enterRule(localctx, 42, tsqlParser.RULE_select_list_elem);
    var _la = 0; // Token type
    try {
        this.state = 453;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,48,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 435;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===tsqlParser.FORCESEEK || ((((_la - 192)) & ~0x1f) == 0 && ((1 << (_la - 192)) & ((1 << (tsqlParser.ABSOLUTE - 192)) | (1 << (tsqlParser.APPLY - 192)) | (1 << (tsqlParser.AUTO - 192)) | (1 << (tsqlParser.AVG - 192)) | (1 << (tsqlParser.BASE64 - 192)) | (1 << (tsqlParser.CALLER - 192)) | (1 << (tsqlParser.CAST - 192)) | (1 << (tsqlParser.CATCH - 192)) | (1 << (tsqlParser.CHECKSUM_AGG - 192)) | (1 << (tsqlParser.COMMITTED - 192)) | (1 << (tsqlParser.CONCAT - 192)))) !== 0) || ((((_la - 224)) & ~0x1f) == 0 && ((1 << (_la - 224)) & ((1 << (tsqlParser.CONTROL - 224)) | (1 << (tsqlParser.COOKIE - 224)) | (1 << (tsqlParser.COUNT - 224)) | (1 << (tsqlParser.COUNT_BIG - 224)) | (1 << (tsqlParser.DELAY - 224)) | (1 << (tsqlParser.DELETED - 224)) | (1 << (tsqlParser.DENSE_RANK - 224)) | (1 << (tsqlParser.DISABLE - 224)) | (1 << (tsqlParser.DYNAMIC - 224)) | (1 << (tsqlParser.ENCRYPTION - 224)) | (1 << (tsqlParser.EXPAND - 224)) | (1 << (tsqlParser.FAST - 224)) | (1 << (tsqlParser.FAST_FORWARD - 224)))) !== 0) || ((((_la - 258)) & ~0x1f) == 0 && ((1 << (_la - 258)) & ((1 << (tsqlParser.FIRST - 258)) | (1 << (tsqlParser.FOLLOWING - 258)) | (1 << (tsqlParser.FORCE - 258)) | (1 << (tsqlParser.FORCED - 258)) | (1 << (tsqlParser.FORWARD_ONLY - 258)) | (1 << (tsqlParser.FULLSCAN - 258)) | (1 << (tsqlParser.GLOBAL - 258)) | (1 << (tsqlParser.GO - 258)) | (1 << (tsqlParser.GROUPING - 258)) | (1 << (tsqlParser.GROUPING_ID - 258)) | (1 << (tsqlParser.HASH - 258)) | (1 << (tsqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX - 258)) | (1 << (tsqlParser.IMPERSONATE - 258)) | (1 << (tsqlParser.INSENSITIVE - 258)) | (1 << (tsqlParser.INSERTED - 258)) | (1 << (tsqlParser.ISOLATION - 258)) | (1 << (tsqlParser.KEEP - 258)) | (1 << (tsqlParser.KEEPFIXED - 258)) | (1 << (tsqlParser.KEYSET - 258)) | (1 << (tsqlParser.LAST - 258)) | (1 << (tsqlParser.LEVEL - 258)) | (1 << (tsqlParser.LOCAL - 258)) | (1 << (tsqlParser.LOCK_ESCALATION - 258)) | (1 << (tsqlParser.LOGIN - 258)) | (1 << (tsqlParser.LOOP - 258)))) !== 0) || ((((_la - 290)) & ~0x1f) == 0 && ((1 << (_la - 290)) & ((1 << (tsqlParser.MARK - 290)) | (1 << (tsqlParser.MAX - 290)) | (1 << (tsqlParser.MAXDOP - 290)) | (1 << (tsqlParser.MAXRECURSION - 290)) | (1 << (tsqlParser.MIN - 290)) | (1 << (tsqlParser.MODIFY - 290)) | (1 << (tsqlParser.NAME - 290)) | (1 << (tsqlParser.NEXT - 290)) | (1 << (tsqlParser.NOCOUNT - 290)) | (1 << (tsqlParser.NOEXPAND - 290)) | (1 << (tsqlParser.NORECOMPUTE - 290)) | (1 << (tsqlParser.NTILE - 290)) | (1 << (tsqlParser.NUMBER - 290)) | (1 << (tsqlParser.OFFSET - 290)) | (1 << (tsqlParser.ONLINE - 290)) | (1 << (tsqlParser.ONLY - 290)) | (1 << (tsqlParser.OPTIMISTIC - 290)) | (1 << (tsqlParser.OPTIMIZE - 290)) | (1 << (tsqlParser.OUT - 290)))) !== 0) || ((((_la - 322)) & ~0x1f) == 0 && ((1 << (_la - 322)) & ((1 << (tsqlParser.OUTPUT - 322)) | (1 << (tsqlParser.OWNER - 322)) | (1 << (tsqlParser.PARAMETERIZATION - 322)) | (1 << (tsqlParser.PARTITION - 322)) | (1 << (tsqlParser.PATH - 322)) | (1 << (tsqlParser.PRECEDING - 322)) | (1 << (tsqlParser.PRIOR - 322)) | (1 << (tsqlParser.PRIVILEGES - 322)) | (1 << (tsqlParser.RANGE - 322)) | (1 << (tsqlParser.RANK - 322)) | (1 << (tsqlParser.READONLY - 322)) | (1 << (tsqlParser.READ_ONLY - 322)) | (1 << (tsqlParser.RECOMPILE - 322)) | (1 << (tsqlParser.RELATIVE - 322)) | (1 << (tsqlParser.REMOTE - 322)) | (1 << (tsqlParser.REPEATABLE - 322)) | (1 << (tsqlParser.ROBUST - 322)) | (1 << (tsqlParser.ROOT - 322)) | (1 << (tsqlParser.ROW - 322)) | (1 << (tsqlParser.ROWGUID - 322)) | (1 << (tsqlParser.ROWS - 322)) | (1 << (tsqlParser.ROW_NUMBER - 322)) | (1 << (tsqlParser.SAMPLE - 322)) | (1 << (tsqlParser.SCHEMABINDING - 322)) | (1 << (tsqlParser.SCROLL - 322)))) !== 0) || ((((_la - 354)) & ~0x1f) == 0 && ((1 << (_la - 354)) & ((1 << (tsqlParser.SCROLL_LOCKS - 354)) | (1 << (tsqlParser.SELF - 354)) | (1 << (tsqlParser.SERIALIZABLE - 354)) | (1 << (tsqlParser.SIMPLE - 354)) | (1 << (tsqlParser.SNAPSHOT - 354)) | (1 << (tsqlParser.SPATIAL_WINDOW_MAX_CELLS - 354)) | (1 << (tsqlParser.STATIC - 354)) | (1 << (tsqlParser.STATS_STREAM - 354)) | (1 << (tsqlParser.STDEV - 354)) | (1 << (tsqlParser.STDEVP - 354)) | (1 << (tsqlParser.SUM - 354)) | (1 << (tsqlParser.TEXTIMAGE_ON - 354)) | (1 << (tsqlParser.THROW - 354)) | (1 << (tsqlParser.TIES - 354)) | (1 << (tsqlParser.TIME - 354)) | (1 << (tsqlParser.TRY - 354)) | (1 << (tsqlParser.TYPE - 354)) | (1 << (tsqlParser.TYPE_WARNING - 354)) | (1 << (tsqlParser.UNBOUNDED - 354)) | (1 << (tsqlParser.UNCOMMITTED - 354)) | (1 << (tsqlParser.UNKNOWN - 354)))) !== 0) || ((((_la - 387)) & ~0x1f) == 0 && ((1 << (_la - 387)) & ((1 << (tsqlParser.USING - 387)) | (1 << (tsqlParser.VAR - 387)) | (1 << (tsqlParser.VARP - 387)) | (1 << (tsqlParser.VIEWS - 387)) | (1 << (tsqlParser.VIEW_METADATA - 387)) | (1 << (tsqlParser.WORK - 387)) | (1 << (tsqlParser.XML - 387)) | (1 << (tsqlParser.XMLNAMESPACES - 387)) | (1 << (tsqlParser.DOUBLE_QUOTE_ID - 387)) | (1 << (tsqlParser.SQUARE_BRACKET_ID - 387)) | (1 << (tsqlParser.ID - 387)))) !== 0)) {
                this.state = 432;
                this.table_name();
                this.state = 433;
                this.match(tsqlParser.DOT);
            }

            this.state = 440;
            this._errHandler.sync(this);
            switch(this._input.LA(1)) {
            case tsqlParser.STAR:
                this.state = 437;
                this.match(tsqlParser.STAR);
                break;
            case tsqlParser.DOLLAR:
                this.state = 438;
                this.match(tsqlParser.DOLLAR);
                this.state = 439;
                _la = this._input.LA(1);
                if(!(_la===tsqlParser.IDENTITY || _la===tsqlParser.ROWGUID)) {
                this._errHandler.recoverInline(this);
                }
                else {
                	this._errHandler.reportMatch(this);
                    this.consume();
                }
                break;
            default:
                throw new antlr4.error.NoViableAltException(this);
            }
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 442;
            this.column_alias();
            this.state = 443;
            this.match(tsqlParser.EQUAL);
            this.state = 444;
            this.expression(0);
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 446;
            this.expression(0);
            this.state = 451;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,47,this._ctx);
            if(la_===1) {
                this.state = 448;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if(_la===tsqlParser.AS) {
                    this.state = 447;
                    this.match(tsqlParser.AS);
                }

                this.state = 450;
                this.column_alias();

            }
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Table_sourcesContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = tsqlParser.RULE_table_sources;
    return this;
}

Table_sourcesContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Table_sourcesContext.prototype.constructor = Table_sourcesContext;

Table_sourcesContext.prototype.table_source = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Table_sourceContext);
    } else {
        return this.getTypedRuleContext(Table_sourceContext,i);
    }
};

Table_sourcesContext.prototype.enterRule = function(listener) {
    if(listener instanceof tsqlListener ) {
        listener.enterTable_sources(this);
	}
};

Table_sourcesContext.prototype.exitRule = function(listener) {
    if(listener instanceof tsqlListener ) {
        listener.exitTable_sources(this);
	}
};




tsqlParser.Table_sourcesContext = Table_sourcesContext;

tsqlParser.prototype.table_sources = function() {

    var localctx = new Table_sourcesContext(this, this._ctx, this.state);
    this.enterRule(localctx, 44, tsqlParser.RULE_table_sources);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 455;
        this.table_source();
        this.state = 460;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,49,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 456;
                this.match(tsqlParser.COMMA);
                this.state = 457;
                this.table_source(); 
            }
            this.state = 462;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,49,this._ctx);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Table_sourceContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = tsqlParser.RULE_table_source;
    return this;
}

Table_sourceContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Table_sourceContext.prototype.constructor = Table_sourceContext;

Table_sourceContext.prototype.table_source_item_joined = function() {
    return this.getTypedRuleContext(Table_source_item_joinedContext,0);
};

Table_sourceContext.prototype.enterRule = function(listener) {
    if(listener instanceof tsqlListener ) {
        listener.enterTable_source(this);
	}
};

Table_sourceContext.prototype.exitRule = function(listener) {
    if(listener instanceof tsqlListener ) {
        listener.exitTable_source(this);
	}
};




tsqlParser.Table_sourceContext = Table_sourceContext;

tsqlParser.prototype.table_source = function() {

    var localctx = new Table_sourceContext(this, this._ctx, this.state);
    this.enterRule(localctx, 46, tsqlParser.RULE_table_source);
    try {
        this.state = 468;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,50,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 463;
            this.table_source_item_joined();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 464;
            this.match(tsqlParser.LR_BRACKET);
            this.state = 465;
            this.table_source_item_joined();
            this.state = 466;
            this.match(tsqlParser.RR_BRACKET);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Table_source_item_joinedContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = tsqlParser.RULE_table_source_item_joined;
    return this;
}

Table_source_item_joinedContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Table_source_item_joinedContext.prototype.constructor = Table_source_item_joinedContext;

Table_source_item_joinedContext.prototype.table_source_item = function() {
    return this.getTypedRuleContext(Table_source_itemContext,0);
};

Table_source_item_joinedContext.prototype.join_part = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Join_partContext);
    } else {
        return this.getTypedRuleContext(Join_partContext,i);
    }
};

Table_source_item_joinedContext.prototype.enterRule = function(listener) {
    if(listener instanceof tsqlListener ) {
        listener.enterTable_source_item_joined(this);
	}
};

Table_source_item_joinedContext.prototype.exitRule = function(listener) {
    if(listener instanceof tsqlListener ) {
        listener.exitTable_source_item_joined(this);
	}
};




tsqlParser.Table_source_item_joinedContext = Table_source_item_joinedContext;

tsqlParser.prototype.table_source_item_joined = function() {

    var localctx = new Table_source_item_joinedContext(this, this._ctx, this.state);
    this.enterRule(localctx, 48, tsqlParser.RULE_table_source_item_joined);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 470;
        this.table_source_item();
        this.state = 474;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,51,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 471;
                this.join_part(); 
            }
            this.state = 476;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,51,this._ctx);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Table_source_itemContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = tsqlParser.RULE_table_source_item;
    return this;
}

Table_source_itemContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Table_source_itemContext.prototype.constructor = Table_source_itemContext;

Table_source_itemContext.prototype.table_name_with_hint = function() {
    return this.getTypedRuleContext(Table_name_with_hintContext,0);
};

Table_source_itemContext.prototype.as_table_alias = function() {
    return this.getTypedRuleContext(As_table_aliasContext,0);
};

Table_source_itemContext.prototype.rowset_function = function() {
    return this.getTypedRuleContext(Rowset_functionContext,0);
};

Table_source_itemContext.prototype.derived_table = function() {
    return this.getTypedRuleContext(Derived_tableContext,0);
};

Table_source_itemContext.prototype.column_alias_list = function() {
    return this.getTypedRuleContext(Column_alias_listContext,0);
};

Table_source_itemContext.prototype.change_table = function() {
    return this.getTypedRuleContext(Change_tableContext,0);
};

Table_source_itemContext.prototype.function_call = function() {
    return this.getTypedRuleContext(Function_callContext,0);
};

Table_source_itemContext.prototype.LOCAL_ID = function() {
    return this.getToken(tsqlParser.LOCAL_ID, 0);
};

Table_source_itemContext.prototype.enterRule = function(listener) {
    if(listener instanceof tsqlListener ) {
        listener.enterTable_source_item(this);
	}
};

Table_source_itemContext.prototype.exitRule = function(listener) {
    if(listener instanceof tsqlListener ) {
        listener.exitTable_source_item(this);
	}
};




tsqlParser.Table_source_itemContext = Table_source_itemContext;

tsqlParser.prototype.table_source_item = function() {

    var localctx = new Table_source_itemContext(this, this._ctx, this.state);
    this.enterRule(localctx, 50, tsqlParser.RULE_table_source_item);
    try {
        this.state = 512;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,60,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 477;
            this.table_name_with_hint();
            this.state = 479;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,52,this._ctx);
            if(la_===1) {
                this.state = 478;
                this.as_table_alias();

            }
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 481;
            this.rowset_function();
            this.state = 483;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,53,this._ctx);
            if(la_===1) {
                this.state = 482;
                this.as_table_alias();

            }
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 485;
            this.derived_table();
            this.state = 490;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,55,this._ctx);
            if(la_===1) {
                this.state = 486;
                this.as_table_alias();
                this.state = 488;
                this._errHandler.sync(this);
                var la_ = this._interp.adaptivePredict(this._input,54,this._ctx);
                if(la_===1) {
                    this.state = 487;
                    this.column_alias_list();

                }

            }
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 492;
            this.change_table();
            this.state = 493;
            this.as_table_alias();
            break;

        case 5:
            this.enterOuterAlt(localctx, 5);
            this.state = 495;
            this.function_call();
            this.state = 497;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,56,this._ctx);
            if(la_===1) {
                this.state = 496;
                this.as_table_alias();

            }
            break;

        case 6:
            this.enterOuterAlt(localctx, 6);
            this.state = 499;
            this.match(tsqlParser.LOCAL_ID);
            this.state = 501;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,57,this._ctx);
            if(la_===1) {
                this.state = 500;
                this.as_table_alias();

            }
            break;

        case 7:
            this.enterOuterAlt(localctx, 7);
            this.state = 503;
            this.match(tsqlParser.LOCAL_ID);
            this.state = 504;
            this.match(tsqlParser.DOT);
            this.state = 505;
            this.function_call();
            this.state = 510;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,59,this._ctx);
            if(la_===1) {
                this.state = 506;
                this.as_table_alias();
                this.state = 508;
                this._errHandler.sync(this);
                var la_ = this._interp.adaptivePredict(this._input,58,this._ctx);
                if(la_===1) {
                    this.state = 507;
                    this.column_alias_list();

                }

            }
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Change_tableContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = tsqlParser.RULE_change_table;
    return this;
}

Change_tableContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Change_tableContext.prototype.constructor = Change_tableContext;

Change_tableContext.prototype.CHANGETABLE = function() {
    return this.getToken(tsqlParser.CHANGETABLE, 0);
};

Change_tableContext.prototype.CHANGES = function() {
    return this.getToken(tsqlParser.CHANGES, 0);
};

Change_tableContext.prototype.table_name = function() {
    return this.getTypedRuleContext(Table_nameContext,0);
};

Change_tableContext.prototype.NULL = function() {
    return this.getToken(tsqlParser.NULL, 0);
};

Change_tableContext.prototype.DECIMAL = function() {
    return this.getToken(tsqlParser.DECIMAL, 0);
};

Change_tableContext.prototype.LOCAL_ID = function() {
    return this.getToken(tsqlParser.LOCAL_ID, 0);
};

Change_tableContext.prototype.enterRule = function(listener) {
    if(listener instanceof tsqlListener ) {
        listener.enterChange_table(this);
	}
};

Change_tableContext.prototype.exitRule = function(listener) {
    if(listener instanceof tsqlListener ) {
        listener.exitChange_table(this);
	}
};




tsqlParser.Change_tableContext = Change_tableContext;

tsqlParser.prototype.change_table = function() {

    var localctx = new Change_tableContext(this, this._ctx, this.state);
    this.enterRule(localctx, 52, tsqlParser.RULE_change_table);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 514;
        this.match(tsqlParser.CHANGETABLE);
        this.state = 515;
        this.match(tsqlParser.LR_BRACKET);
        this.state = 516;
        this.match(tsqlParser.CHANGES);
        this.state = 517;
        this.table_name();
        this.state = 518;
        this.match(tsqlParser.COMMA);
        this.state = 519;
        _la = this._input.LA(1);
        if(!(_la===tsqlParser.NULL || _la===tsqlParser.LOCAL_ID || _la===tsqlParser.DECIMAL)) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
        this.state = 520;
        this.match(tsqlParser.RR_BRACKET);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Join_partContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = tsqlParser.RULE_join_part;
    this.join_type = null; // Token
    this.join_hint = null; // Token
    return this;
}

Join_partContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Join_partContext.prototype.constructor = Join_partContext;

Join_partContext.prototype.JOIN = function() {
    return this.getToken(tsqlParser.JOIN, 0);
};

Join_partContext.prototype.table_source = function() {
    return this.getTypedRuleContext(Table_sourceContext,0);
};

Join_partContext.prototype.ON = function() {
    return this.getToken(tsqlParser.ON, 0);
};

Join_partContext.prototype.search_condition = function() {
    return this.getTypedRuleContext(Search_conditionContext,0);
};

Join_partContext.prototype.LEFT = function() {
    return this.getToken(tsqlParser.LEFT, 0);
};

Join_partContext.prototype.RIGHT = function() {
    return this.getToken(tsqlParser.RIGHT, 0);
};

Join_partContext.prototype.FULL = function() {
    return this.getToken(tsqlParser.FULL, 0);
};

Join_partContext.prototype.INNER = function() {
    return this.getToken(tsqlParser.INNER, 0);
};

Join_partContext.prototype.OUTER = function() {
    return this.getToken(tsqlParser.OUTER, 0);
};

Join_partContext.prototype.LOOP = function() {
    return this.getToken(tsqlParser.LOOP, 0);
};

Join_partContext.prototype.HASH = function() {
    return this.getToken(tsqlParser.HASH, 0);
};

Join_partContext.prototype.MERGE = function() {
    return this.getToken(tsqlParser.MERGE, 0);
};

Join_partContext.prototype.REMOTE = function() {
    return this.getToken(tsqlParser.REMOTE, 0);
};

Join_partContext.prototype.CROSS = function() {
    return this.getToken(tsqlParser.CROSS, 0);
};

Join_partContext.prototype.APPLY = function() {
    return this.getToken(tsqlParser.APPLY, 0);
};

Join_partContext.prototype.enterRule = function(listener) {
    if(listener instanceof tsqlListener ) {
        listener.enterJoin_part(this);
	}
};

Join_partContext.prototype.exitRule = function(listener) {
    if(listener instanceof tsqlListener ) {
        listener.exitJoin_part(this);
	}
};




tsqlParser.Join_partContext = Join_partContext;

tsqlParser.prototype.join_part = function() {

    var localctx = new Join_partContext(this, this._ctx, this.state);
    this.enterRule(localctx, 54, tsqlParser.RULE_join_part);
    var _la = 0; // Token type
    try {
        this.state = 548;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,65,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 529;
            this._errHandler.sync(this);
            switch(this._input.LA(1)) {
            case tsqlParser.INNER:
            case tsqlParser.JOIN:
            case tsqlParser.MERGE:
            case tsqlParser.HASH:
            case tsqlParser.LOOP:
            case tsqlParser.REMOTE:
                this.state = 523;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if(_la===tsqlParser.INNER) {
                    this.state = 522;
                    this.match(tsqlParser.INNER);
                }

                break;
            case tsqlParser.FULL:
            case tsqlParser.LEFT:
            case tsqlParser.RIGHT:
                this.state = 525;
                localctx.join_type = this._input.LT(1);
                _la = this._input.LA(1);
                if(!(_la===tsqlParser.FULL || _la===tsqlParser.LEFT || _la===tsqlParser.RIGHT)) {
                    localctx.join_type = this._errHandler.recoverInline(this);
                }
                else {
                	this._errHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 527;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if(_la===tsqlParser.OUTER) {
                    this.state = 526;
                    this.match(tsqlParser.OUTER);
                }

                break;
            default:
                throw new antlr4.error.NoViableAltException(this);
            }
            this.state = 532;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===tsqlParser.MERGE || _la===tsqlParser.HASH || _la===tsqlParser.LOOP || _la===tsqlParser.REMOTE) {
                this.state = 531;
                localctx.join_hint = this._input.LT(1);
                _la = this._input.LA(1);
                if(!(_la===tsqlParser.MERGE || _la===tsqlParser.HASH || _la===tsqlParser.LOOP || _la===tsqlParser.REMOTE)) {
                    localctx.join_hint = this._errHandler.recoverInline(this);
                }
                else {
                	this._errHandler.reportMatch(this);
                    this.consume();
                }
            }

            this.state = 534;
            this.match(tsqlParser.JOIN);
            this.state = 535;
            this.table_source();
            this.state = 536;
            this.match(tsqlParser.ON);
            this.state = 537;
            this.search_condition();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 539;
            this.match(tsqlParser.CROSS);
            this.state = 540;
            this.match(tsqlParser.JOIN);
            this.state = 541;
            this.table_source();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 542;
            this.match(tsqlParser.CROSS);
            this.state = 543;
            this.match(tsqlParser.APPLY);
            this.state = 544;
            this.table_source();
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 545;
            this.match(tsqlParser.OUTER);
            this.state = 546;
            this.match(tsqlParser.APPLY);
            this.state = 547;
            this.table_source();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Table_name_with_hintContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = tsqlParser.RULE_table_name_with_hint;
    return this;
}

Table_name_with_hintContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Table_name_with_hintContext.prototype.constructor = Table_name_with_hintContext;

Table_name_with_hintContext.prototype.table_name = function() {
    return this.getTypedRuleContext(Table_nameContext,0);
};

Table_name_with_hintContext.prototype.enterRule = function(listener) {
    if(listener instanceof tsqlListener ) {
        listener.enterTable_name_with_hint(this);
	}
};

Table_name_with_hintContext.prototype.exitRule = function(listener) {
    if(listener instanceof tsqlListener ) {
        listener.exitTable_name_with_hint(this);
	}
};




tsqlParser.Table_name_with_hintContext = Table_name_with_hintContext;

tsqlParser.prototype.table_name_with_hint = function() {

    var localctx = new Table_name_with_hintContext(this, this._ctx, this.state);
    this.enterRule(localctx, 56, tsqlParser.RULE_table_name_with_hint);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 550;
        this.table_name();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Rowset_functionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = tsqlParser.RULE_rowset_function;
    this.provider_name = null; // Token
    this.connectionString = null; // Token
    this.sql = null; // Token
    this.data_file = null; // Token
    return this;
}

Rowset_functionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Rowset_functionContext.prototype.constructor = Rowset_functionContext;

Rowset_functionContext.prototype.OPENROWSET = function() {
    return this.getToken(tsqlParser.OPENROWSET, 0);
};

Rowset_functionContext.prototype.LR_BRACKET = function() {
    return this.getToken(tsqlParser.LR_BRACKET, 0);
};

Rowset_functionContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(tsqlParser.COMMA);
    } else {
        return this.getToken(tsqlParser.COMMA, i);
    }
};


Rowset_functionContext.prototype.RR_BRACKET = function() {
    return this.getToken(tsqlParser.RR_BRACKET, 0);
};

Rowset_functionContext.prototype.STRING = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(tsqlParser.STRING);
    } else {
        return this.getToken(tsqlParser.STRING, i);
    }
};


Rowset_functionContext.prototype.BULK = function() {
    return this.getToken(tsqlParser.BULK, 0);
};

Rowset_functionContext.prototype.bulk_option = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Bulk_optionContext);
    } else {
        return this.getTypedRuleContext(Bulk_optionContext,i);
    }
};

Rowset_functionContext.prototype.id = function() {
    return this.getTypedRuleContext(IdContext,0);
};

Rowset_functionContext.prototype.enterRule = function(listener) {
    if(listener instanceof tsqlListener ) {
        listener.enterRowset_function(this);
	}
};

Rowset_functionContext.prototype.exitRule = function(listener) {
    if(listener instanceof tsqlListener ) {
        listener.exitRowset_function(this);
	}
};




tsqlParser.Rowset_functionContext = Rowset_functionContext;

tsqlParser.prototype.rowset_function = function() {

    var localctx = new Rowset_functionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 58, tsqlParser.RULE_rowset_function);
    var _la = 0; // Token type
    try {
        this.state = 578;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,68,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 552;
            this.match(tsqlParser.OPENROWSET);
            this.state = 553;
            this.match(tsqlParser.LR_BRACKET);
            this.state = 554;
            localctx.provider_name = this.match(tsqlParser.STRING);
            this.state = 555;
            this.match(tsqlParser.COMMA);
            this.state = 556;
            localctx.connectionString = this.match(tsqlParser.STRING);
            this.state = 557;
            this.match(tsqlParser.COMMA);
            this.state = 558;
            localctx.sql = this.match(tsqlParser.STRING);
            this.state = 559;
            this.match(tsqlParser.RR_BRACKET);
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 560;
            this.match(tsqlParser.OPENROWSET);
            this.state = 561;
            this.match(tsqlParser.LR_BRACKET);
            this.state = 562;
            this.match(tsqlParser.BULK);
            this.state = 563;
            localctx.data_file = this.match(tsqlParser.STRING);
            this.state = 564;
            this.match(tsqlParser.COMMA);
            this.state = 574;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,67,this._ctx);
            switch(la_) {
            case 1:
                this.state = 565;
                this.bulk_option();
                this.state = 570;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while(_la===tsqlParser.COMMA) {
                    this.state = 566;
                    this.match(tsqlParser.COMMA);
                    this.state = 567;
                    this.bulk_option();
                    this.state = 572;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                break;

            case 2:
                this.state = 573;
                this.id();
                break;

            }
            this.state = 576;
            this.match(tsqlParser.RR_BRACKET);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Bulk_optionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = tsqlParser.RULE_bulk_option;
    this.bulk_option_value = null; // Token
    return this;
}

Bulk_optionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Bulk_optionContext.prototype.constructor = Bulk_optionContext;

Bulk_optionContext.prototype.id = function() {
    return this.getTypedRuleContext(IdContext,0);
};

Bulk_optionContext.prototype.DECIMAL = function() {
    return this.getToken(tsqlParser.DECIMAL, 0);
};

Bulk_optionContext.prototype.STRING = function() {
    return this.getToken(tsqlParser.STRING, 0);
};

Bulk_optionContext.prototype.enterRule = function(listener) {
    if(listener instanceof tsqlListener ) {
        listener.enterBulk_option(this);
	}
};

Bulk_optionContext.prototype.exitRule = function(listener) {
    if(listener instanceof tsqlListener ) {
        listener.exitBulk_option(this);
	}
};




tsqlParser.Bulk_optionContext = Bulk_optionContext;

tsqlParser.prototype.bulk_option = function() {

    var localctx = new Bulk_optionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 60, tsqlParser.RULE_bulk_option);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 580;
        this.id();
        this.state = 581;
        this.match(tsqlParser.EQUAL);
        this.state = 582;
        localctx.bulk_option_value = this._input.LT(1);
        _la = this._input.LA(1);
        if(!(_la===tsqlParser.DECIMAL || _la===tsqlParser.STRING)) {
            localctx.bulk_option_value = this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Derived_tableContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = tsqlParser.RULE_derived_table;
    return this;
}

Derived_tableContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Derived_tableContext.prototype.constructor = Derived_tableContext;

Derived_tableContext.prototype.subquery = function() {
    return this.getTypedRuleContext(SubqueryContext,0);
};

Derived_tableContext.prototype.enterRule = function(listener) {
    if(listener instanceof tsqlListener ) {
        listener.enterDerived_table(this);
	}
};

Derived_tableContext.prototype.exitRule = function(listener) {
    if(listener instanceof tsqlListener ) {
        listener.exitDerived_table(this);
	}
};




tsqlParser.Derived_tableContext = Derived_tableContext;

tsqlParser.prototype.derived_table = function() {

    var localctx = new Derived_tableContext(this, this._ctx, this.state);
    this.enterRule(localctx, 62, tsqlParser.RULE_derived_table);
    try {
        this.state = 589;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,69,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 584;
            this.subquery();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 585;
            this.match(tsqlParser.LR_BRACKET);
            this.state = 586;
            this.subquery();
            this.state = 587;
            this.match(tsqlParser.RR_BRACKET);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Function_callContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = tsqlParser.RULE_function_call;
    this.style = null; // ExpressionContext
    this.seed = null; // Token
    this.increment = null; // Token
    return this;
}

Function_callContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Function_callContext.prototype.constructor = Function_callContext;

Function_callContext.prototype.ranking_windowed_function = function() {
    return this.getTypedRuleContext(Ranking_windowed_functionContext,0);
};

Function_callContext.prototype.aggregate_windowed_function = function() {
    return this.getTypedRuleContext(Aggregate_windowed_functionContext,0);
};

Function_callContext.prototype.scalar_function_name = function() {
    return this.getTypedRuleContext(Scalar_function_nameContext,0);
};

Function_callContext.prototype.expression_list = function() {
    return this.getTypedRuleContext(Expression_listContext,0);
};

Function_callContext.prototype.BINARY_CHECKSUM = function() {
    return this.getToken(tsqlParser.BINARY_CHECKSUM, 0);
};

Function_callContext.prototype.CAST = function() {
    return this.getToken(tsqlParser.CAST, 0);
};

Function_callContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};

Function_callContext.prototype.AS = function() {
    return this.getToken(tsqlParser.AS, 0);
};

Function_callContext.prototype.data_type = function() {
    return this.getTypedRuleContext(Data_typeContext,0);
};

Function_callContext.prototype.CONVERT = function() {
    return this.getToken(tsqlParser.CONVERT, 0);
};

Function_callContext.prototype.CHECKSUM = function() {
    return this.getToken(tsqlParser.CHECKSUM, 0);
};

Function_callContext.prototype.COALESCE = function() {
    return this.getToken(tsqlParser.COALESCE, 0);
};

Function_callContext.prototype.CURRENT_TIMESTAMP = function() {
    return this.getToken(tsqlParser.CURRENT_TIMESTAMP, 0);
};

Function_callContext.prototype.CURRENT_USER = function() {
    return this.getToken(tsqlParser.CURRENT_USER, 0);
};

Function_callContext.prototype.DATEADD = function() {
    return this.getToken(tsqlParser.DATEADD, 0);
};

Function_callContext.prototype.ID = function() {
    return this.getToken(tsqlParser.ID, 0);
};

Function_callContext.prototype.DATEDIFF = function() {
    return this.getToken(tsqlParser.DATEDIFF, 0);
};

Function_callContext.prototype.DATENAME = function() {
    return this.getToken(tsqlParser.DATENAME, 0);
};

Function_callContext.prototype.DATEPART = function() {
    return this.getToken(tsqlParser.DATEPART, 0);
};

Function_callContext.prototype.IDENTITY = function() {
    return this.getToken(tsqlParser.IDENTITY, 0);
};

Function_callContext.prototype.DECIMAL = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(tsqlParser.DECIMAL);
    } else {
        return this.getToken(tsqlParser.DECIMAL, i);
    }
};


Function_callContext.prototype.MIN_ACTIVE_ROWVERSION = function() {
    return this.getToken(tsqlParser.MIN_ACTIVE_ROWVERSION, 0);
};

Function_callContext.prototype.NULLIF = function() {
    return this.getToken(tsqlParser.NULLIF, 0);
};

Function_callContext.prototype.SESSION_USER = function() {
    return this.getToken(tsqlParser.SESSION_USER, 0);
};

Function_callContext.prototype.SYSTEM_USER = function() {
    return this.getToken(tsqlParser.SYSTEM_USER, 0);
};

Function_callContext.prototype.enterRule = function(listener) {
    if(listener instanceof tsqlListener ) {
        listener.enterFunction_call(this);
	}
};

Function_callContext.prototype.exitRule = function(listener) {
    if(listener instanceof tsqlListener ) {
        listener.exitFunction_call(this);
	}
};




tsqlParser.Function_callContext = Function_callContext;

tsqlParser.prototype.function_call = function() {

    var localctx = new Function_callContext(this, this._ctx, this.state);
    this.enterRule(localctx, 64, tsqlParser.RULE_function_call);
    var _la = 0; // Token type
    try {
        this.state = 688;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,74,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 591;
            this.ranking_windowed_function();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 592;
            this.aggregate_windowed_function();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 593;
            this.scalar_function_name();
            this.state = 594;
            this.match(tsqlParser.LR_BRACKET);
            this.state = 596;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===tsqlParser.CASE || _la===tsqlParser.DEFAULT || _la===tsqlParser.FORCESEEK || _la===tsqlParser.NULL || _la===tsqlParser.OVER || ((((_la - 192)) & ~0x1f) == 0 && ((1 << (_la - 192)) & ((1 << (tsqlParser.ABSOLUTE - 192)) | (1 << (tsqlParser.APPLY - 192)) | (1 << (tsqlParser.AUTO - 192)) | (1 << (tsqlParser.AVG - 192)) | (1 << (tsqlParser.BASE64 - 192)) | (1 << (tsqlParser.CALLER - 192)) | (1 << (tsqlParser.CAST - 192)) | (1 << (tsqlParser.CATCH - 192)) | (1 << (tsqlParser.CHECKSUM_AGG - 192)) | (1 << (tsqlParser.COMMITTED - 192)) | (1 << (tsqlParser.CONCAT - 192)))) !== 0) || ((((_la - 224)) & ~0x1f) == 0 && ((1 << (_la - 224)) & ((1 << (tsqlParser.CONTROL - 224)) | (1 << (tsqlParser.COOKIE - 224)) | (1 << (tsqlParser.COUNT - 224)) | (1 << (tsqlParser.COUNT_BIG - 224)) | (1 << (tsqlParser.DELAY - 224)) | (1 << (tsqlParser.DELETED - 224)) | (1 << (tsqlParser.DENSE_RANK - 224)) | (1 << (tsqlParser.DISABLE - 224)) | (1 << (tsqlParser.DYNAMIC - 224)) | (1 << (tsqlParser.ENCRYPTION - 224)) | (1 << (tsqlParser.EXPAND - 224)) | (1 << (tsqlParser.FAST - 224)) | (1 << (tsqlParser.FAST_FORWARD - 224)))) !== 0) || ((((_la - 258)) & ~0x1f) == 0 && ((1 << (_la - 258)) & ((1 << (tsqlParser.FIRST - 258)) | (1 << (tsqlParser.FOLLOWING - 258)) | (1 << (tsqlParser.FORCE - 258)) | (1 << (tsqlParser.FORCED - 258)) | (1 << (tsqlParser.FORWARD_ONLY - 258)) | (1 << (tsqlParser.FULLSCAN - 258)) | (1 << (tsqlParser.GLOBAL - 258)) | (1 << (tsqlParser.GO - 258)) | (1 << (tsqlParser.GROUPING - 258)) | (1 << (tsqlParser.GROUPING_ID - 258)) | (1 << (tsqlParser.HASH - 258)) | (1 << (tsqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX - 258)) | (1 << (tsqlParser.IMPERSONATE - 258)) | (1 << (tsqlParser.INSENSITIVE - 258)) | (1 << (tsqlParser.INSERTED - 258)) | (1 << (tsqlParser.ISOLATION - 258)) | (1 << (tsqlParser.KEEP - 258)) | (1 << (tsqlParser.KEEPFIXED - 258)) | (1 << (tsqlParser.KEYSET - 258)) | (1 << (tsqlParser.LAST - 258)) | (1 << (tsqlParser.LEVEL - 258)) | (1 << (tsqlParser.LOCAL - 258)) | (1 << (tsqlParser.LOCK_ESCALATION - 258)) | (1 << (tsqlParser.LOGIN - 258)) | (1 << (tsqlParser.LOOP - 258)))) !== 0) || ((((_la - 290)) & ~0x1f) == 0 && ((1 << (_la - 290)) & ((1 << (tsqlParser.MARK - 290)) | (1 << (tsqlParser.MAX - 290)) | (1 << (tsqlParser.MAXDOP - 290)) | (1 << (tsqlParser.MAXRECURSION - 290)) | (1 << (tsqlParser.MIN - 290)) | (1 << (tsqlParser.MODIFY - 290)) | (1 << (tsqlParser.NAME - 290)) | (1 << (tsqlParser.NEXT - 290)) | (1 << (tsqlParser.NOCOUNT - 290)) | (1 << (tsqlParser.NOEXPAND - 290)) | (1 << (tsqlParser.NORECOMPUTE - 290)) | (1 << (tsqlParser.NTILE - 290)) | (1 << (tsqlParser.NUMBER - 290)) | (1 << (tsqlParser.OFFSET - 290)) | (1 << (tsqlParser.ONLINE - 290)) | (1 << (tsqlParser.ONLY - 290)) | (1 << (tsqlParser.OPTIMISTIC - 290)) | (1 << (tsqlParser.OPTIMIZE - 290)) | (1 << (tsqlParser.OUT - 290)))) !== 0) || ((((_la - 322)) & ~0x1f) == 0 && ((1 << (_la - 322)) & ((1 << (tsqlParser.OUTPUT - 322)) | (1 << (tsqlParser.OWNER - 322)) | (1 << (tsqlParser.PARAMETERIZATION - 322)) | (1 << (tsqlParser.PARTITION - 322)) | (1 << (tsqlParser.PATH - 322)) | (1 << (tsqlParser.PRECEDING - 322)) | (1 << (tsqlParser.PRIOR - 322)) | (1 << (tsqlParser.PRIVILEGES - 322)) | (1 << (tsqlParser.RANGE - 322)) | (1 << (tsqlParser.RANK - 322)) | (1 << (tsqlParser.READONLY - 322)) | (1 << (tsqlParser.READ_ONLY - 322)) | (1 << (tsqlParser.RECOMPILE - 322)) | (1 << (tsqlParser.RELATIVE - 322)) | (1 << (tsqlParser.REMOTE - 322)) | (1 << (tsqlParser.REPEATABLE - 322)) | (1 << (tsqlParser.ROBUST - 322)) | (1 << (tsqlParser.ROOT - 322)) | (1 << (tsqlParser.ROW - 322)) | (1 << (tsqlParser.ROWGUID - 322)) | (1 << (tsqlParser.ROWS - 322)) | (1 << (tsqlParser.ROW_NUMBER - 322)) | (1 << (tsqlParser.SAMPLE - 322)) | (1 << (tsqlParser.SCHEMABINDING - 322)) | (1 << (tsqlParser.SCROLL - 322)))) !== 0) || ((((_la - 354)) & ~0x1f) == 0 && ((1 << (_la - 354)) & ((1 << (tsqlParser.SCROLL_LOCKS - 354)) | (1 << (tsqlParser.SELF - 354)) | (1 << (tsqlParser.SERIALIZABLE - 354)) | (1 << (tsqlParser.SIMPLE - 354)) | (1 << (tsqlParser.SNAPSHOT - 354)) | (1 << (tsqlParser.SPATIAL_WINDOW_MAX_CELLS - 354)) | (1 << (tsqlParser.STATIC - 354)) | (1 << (tsqlParser.STATS_STREAM - 354)) | (1 << (tsqlParser.STDEV - 354)) | (1 << (tsqlParser.STDEVP - 354)) | (1 << (tsqlParser.SUM - 354)) | (1 << (tsqlParser.TEXTIMAGE_ON - 354)) | (1 << (tsqlParser.THROW - 354)) | (1 << (tsqlParser.TIES - 354)) | (1 << (tsqlParser.TIME - 354)) | (1 << (tsqlParser.TRY - 354)) | (1 << (tsqlParser.TYPE - 354)) | (1 << (tsqlParser.TYPE_WARNING - 354)) | (1 << (tsqlParser.UNBOUNDED - 354)) | (1 << (tsqlParser.UNCOMMITTED - 354)) | (1 << (tsqlParser.UNKNOWN - 354)))) !== 0) || ((((_la - 387)) & ~0x1f) == 0 && ((1 << (_la - 387)) & ((1 << (tsqlParser.USING - 387)) | (1 << (tsqlParser.VAR - 387)) | (1 << (tsqlParser.VARP - 387)) | (1 << (tsqlParser.VIEWS - 387)) | (1 << (tsqlParser.VIEW_METADATA - 387)) | (1 << (tsqlParser.WORK - 387)) | (1 << (tsqlParser.XML - 387)) | (1 << (tsqlParser.XMLNAMESPACES - 387)) | (1 << (tsqlParser.DOUBLE_QUOTE_ID - 387)) | (1 << (tsqlParser.SQUARE_BRACKET_ID - 387)) | (1 << (tsqlParser.LOCAL_ID - 387)) | (1 << (tsqlParser.DECIMAL - 387)) | (1 << (tsqlParser.ID - 387)) | (1 << (tsqlParser.STRING - 387)) | (1 << (tsqlParser.BINARY - 387)) | (1 << (tsqlParser.FLOAT - 387)) | (1 << (tsqlParser.REAL - 387)))) !== 0) || ((((_la - 424)) & ~0x1f) == 0 && ((1 << (_la - 424)) & ((1 << (tsqlParser.DOLLAR - 424)) | (1 << (tsqlParser.LR_BRACKET - 424)) | (1 << (tsqlParser.PLUS - 424)) | (1 << (tsqlParser.MINUS - 424)) | (1 << (tsqlParser.BIT_NOT - 424)))) !== 0)) {
                this.state = 595;
                this.expression_list();
            }

            this.state = 598;
            this.match(tsqlParser.RR_BRACKET);
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 600;
            this.match(tsqlParser.BINARY_CHECKSUM);
            this.state = 601;
            this.match(tsqlParser.LR_BRACKET);
            this.state = 602;
            this.match(tsqlParser.STAR);
            this.state = 603;
            this.match(tsqlParser.RR_BRACKET);
            break;

        case 5:
            this.enterOuterAlt(localctx, 5);
            this.state = 604;
            this.match(tsqlParser.CAST);
            this.state = 605;
            this.match(tsqlParser.LR_BRACKET);
            this.state = 606;
            this.expression(0);
            this.state = 607;
            this.match(tsqlParser.AS);
            this.state = 608;
            this.data_type();
            this.state = 609;
            this.match(tsqlParser.RR_BRACKET);
            break;

        case 6:
            this.enterOuterAlt(localctx, 6);
            this.state = 611;
            this.match(tsqlParser.CONVERT);
            this.state = 612;
            this.match(tsqlParser.LR_BRACKET);
            this.state = 613;
            this.data_type();
            this.state = 614;
            this.match(tsqlParser.COMMA);
            this.state = 615;
            this.expression(0);
            this.state = 618;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===tsqlParser.COMMA) {
                this.state = 616;
                this.match(tsqlParser.COMMA);
                this.state = 617;
                localctx.style = this.expression(0);
            }

            this.state = 620;
            this.match(tsqlParser.RR_BRACKET);
            break;

        case 7:
            this.enterOuterAlt(localctx, 7);
            this.state = 622;
            this.match(tsqlParser.CHECKSUM);
            this.state = 623;
            this.match(tsqlParser.LR_BRACKET);
            this.state = 624;
            this.match(tsqlParser.STAR);
            this.state = 625;
            this.match(tsqlParser.RR_BRACKET);
            break;

        case 8:
            this.enterOuterAlt(localctx, 8);
            this.state = 626;
            this.match(tsqlParser.COALESCE);
            this.state = 627;
            this.match(tsqlParser.LR_BRACKET);
            this.state = 628;
            this.expression_list();
            this.state = 629;
            this.match(tsqlParser.RR_BRACKET);
            break;

        case 9:
            this.enterOuterAlt(localctx, 9);
            this.state = 631;
            this.match(tsqlParser.CURRENT_TIMESTAMP);
            break;

        case 10:
            this.enterOuterAlt(localctx, 10);
            this.state = 632;
            this.match(tsqlParser.CURRENT_USER);
            break;

        case 11:
            this.enterOuterAlt(localctx, 11);
            this.state = 633;
            this.match(tsqlParser.DATEADD);
            this.state = 634;
            this.match(tsqlParser.LR_BRACKET);
            this.state = 635;
            this.match(tsqlParser.ID);
            this.state = 636;
            this.match(tsqlParser.COMMA);
            this.state = 637;
            this.expression(0);
            this.state = 638;
            this.match(tsqlParser.COMMA);
            this.state = 639;
            this.expression(0);
            this.state = 640;
            this.match(tsqlParser.RR_BRACKET);
            break;

        case 12:
            this.enterOuterAlt(localctx, 12);
            this.state = 642;
            this.match(tsqlParser.DATEDIFF);
            this.state = 643;
            this.match(tsqlParser.LR_BRACKET);
            this.state = 644;
            this.match(tsqlParser.ID);
            this.state = 645;
            this.match(tsqlParser.COMMA);
            this.state = 646;
            this.expression(0);
            this.state = 647;
            this.match(tsqlParser.COMMA);
            this.state = 648;
            this.expression(0);
            this.state = 649;
            this.match(tsqlParser.RR_BRACKET);
            break;

        case 13:
            this.enterOuterAlt(localctx, 13);
            this.state = 651;
            this.match(tsqlParser.DATENAME);
            this.state = 652;
            this.match(tsqlParser.LR_BRACKET);
            this.state = 653;
            this.match(tsqlParser.ID);
            this.state = 654;
            this.match(tsqlParser.COMMA);
            this.state = 655;
            this.expression(0);
            this.state = 656;
            this.match(tsqlParser.RR_BRACKET);
            break;

        case 14:
            this.enterOuterAlt(localctx, 14);
            this.state = 658;
            this.match(tsqlParser.DATEPART);
            this.state = 659;
            this.match(tsqlParser.LR_BRACKET);
            this.state = 660;
            this.match(tsqlParser.ID);
            this.state = 661;
            this.match(tsqlParser.COMMA);
            this.state = 662;
            this.expression(0);
            this.state = 663;
            this.match(tsqlParser.RR_BRACKET);
            break;

        case 15:
            this.enterOuterAlt(localctx, 15);
            this.state = 665;
            this.match(tsqlParser.IDENTITY);
            this.state = 666;
            this.match(tsqlParser.LR_BRACKET);
            this.state = 667;
            this.data_type();
            this.state = 670;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,72,this._ctx);
            if(la_===1) {
                this.state = 668;
                this.match(tsqlParser.COMMA);
                this.state = 669;
                localctx.seed = this.match(tsqlParser.DECIMAL);

            }
            this.state = 674;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===tsqlParser.COMMA) {
                this.state = 672;
                this.match(tsqlParser.COMMA);
                this.state = 673;
                localctx.increment = this.match(tsqlParser.DECIMAL);
            }

            this.state = 676;
            this.match(tsqlParser.RR_BRACKET);
            break;

        case 16:
            this.enterOuterAlt(localctx, 16);
            this.state = 678;
            this.match(tsqlParser.MIN_ACTIVE_ROWVERSION);
            break;

        case 17:
            this.enterOuterAlt(localctx, 17);
            this.state = 679;
            this.match(tsqlParser.NULLIF);
            this.state = 680;
            this.match(tsqlParser.LR_BRACKET);
            this.state = 681;
            this.expression(0);
            this.state = 682;
            this.match(tsqlParser.COMMA);
            this.state = 683;
            this.expression(0);
            this.state = 684;
            this.match(tsqlParser.RR_BRACKET);
            break;

        case 18:
            this.enterOuterAlt(localctx, 18);
            this.state = 686;
            this.match(tsqlParser.SESSION_USER);
            break;

        case 19:
            this.enterOuterAlt(localctx, 19);
            this.state = 687;
            this.match(tsqlParser.SYSTEM_USER);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Switch_sectionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = tsqlParser.RULE_switch_section;
    return this;
}

Switch_sectionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Switch_sectionContext.prototype.constructor = Switch_sectionContext;

Switch_sectionContext.prototype.WHEN = function() {
    return this.getToken(tsqlParser.WHEN, 0);
};

Switch_sectionContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};

Switch_sectionContext.prototype.THEN = function() {
    return this.getToken(tsqlParser.THEN, 0);
};

Switch_sectionContext.prototype.enterRule = function(listener) {
    if(listener instanceof tsqlListener ) {
        listener.enterSwitch_section(this);
	}
};

Switch_sectionContext.prototype.exitRule = function(listener) {
    if(listener instanceof tsqlListener ) {
        listener.exitSwitch_section(this);
	}
};




tsqlParser.Switch_sectionContext = Switch_sectionContext;

tsqlParser.prototype.switch_section = function() {

    var localctx = new Switch_sectionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 66, tsqlParser.RULE_switch_section);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 690;
        this.match(tsqlParser.WHEN);
        this.state = 691;
        this.expression(0);
        this.state = 692;
        this.match(tsqlParser.THEN);
        this.state = 693;
        this.expression(0);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Switch_search_condition_sectionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = tsqlParser.RULE_switch_search_condition_section;
    return this;
}

Switch_search_condition_sectionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Switch_search_condition_sectionContext.prototype.constructor = Switch_search_condition_sectionContext;

Switch_search_condition_sectionContext.prototype.WHEN = function() {
    return this.getToken(tsqlParser.WHEN, 0);
};

Switch_search_condition_sectionContext.prototype.search_condition = function() {
    return this.getTypedRuleContext(Search_conditionContext,0);
};

Switch_search_condition_sectionContext.prototype.THEN = function() {
    return this.getToken(tsqlParser.THEN, 0);
};

Switch_search_condition_sectionContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

Switch_search_condition_sectionContext.prototype.enterRule = function(listener) {
    if(listener instanceof tsqlListener ) {
        listener.enterSwitch_search_condition_section(this);
	}
};

Switch_search_condition_sectionContext.prototype.exitRule = function(listener) {
    if(listener instanceof tsqlListener ) {
        listener.exitSwitch_search_condition_section(this);
	}
};




tsqlParser.Switch_search_condition_sectionContext = Switch_search_condition_sectionContext;

tsqlParser.prototype.switch_search_condition_section = function() {

    var localctx = new Switch_search_condition_sectionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 68, tsqlParser.RULE_switch_search_condition_section);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 695;
        this.match(tsqlParser.WHEN);
        this.state = 696;
        this.search_condition();
        this.state = 697;
        this.match(tsqlParser.THEN);
        this.state = 698;
        this.expression(0);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function As_table_aliasContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = tsqlParser.RULE_as_table_alias;
    return this;
}

As_table_aliasContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
As_table_aliasContext.prototype.constructor = As_table_aliasContext;

As_table_aliasContext.prototype.table_alias = function() {
    return this.getTypedRuleContext(Table_aliasContext,0);
};

As_table_aliasContext.prototype.AS = function() {
    return this.getToken(tsqlParser.AS, 0);
};

As_table_aliasContext.prototype.enterRule = function(listener) {
    if(listener instanceof tsqlListener ) {
        listener.enterAs_table_alias(this);
	}
};

As_table_aliasContext.prototype.exitRule = function(listener) {
    if(listener instanceof tsqlListener ) {
        listener.exitAs_table_alias(this);
	}
};




tsqlParser.As_table_aliasContext = As_table_aliasContext;

tsqlParser.prototype.as_table_alias = function() {

    var localctx = new As_table_aliasContext(this, this._ctx, this.state);
    this.enterRule(localctx, 70, tsqlParser.RULE_as_table_alias);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 701;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===tsqlParser.AS) {
            this.state = 700;
            this.match(tsqlParser.AS);
        }

        this.state = 703;
        this.table_alias();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Table_aliasContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = tsqlParser.RULE_table_alias;
    return this;
}

Table_aliasContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Table_aliasContext.prototype.constructor = Table_aliasContext;

Table_aliasContext.prototype.id = function() {
    return this.getTypedRuleContext(IdContext,0);
};

Table_aliasContext.prototype.enterRule = function(listener) {
    if(listener instanceof tsqlListener ) {
        listener.enterTable_alias(this);
	}
};

Table_aliasContext.prototype.exitRule = function(listener) {
    if(listener instanceof tsqlListener ) {
        listener.exitTable_alias(this);
	}
};




tsqlParser.Table_aliasContext = Table_aliasContext;

tsqlParser.prototype.table_alias = function() {

    var localctx = new Table_aliasContext(this, this._ctx, this.state);
    this.enterRule(localctx, 72, tsqlParser.RULE_table_alias);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 705;
        this.id();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Column_alias_listContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = tsqlParser.RULE_column_alias_list;
    return this;
}

Column_alias_listContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Column_alias_listContext.prototype.constructor = Column_alias_listContext;

Column_alias_listContext.prototype.column_alias = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Column_aliasContext);
    } else {
        return this.getTypedRuleContext(Column_aliasContext,i);
    }
};

Column_alias_listContext.prototype.enterRule = function(listener) {
    if(listener instanceof tsqlListener ) {
        listener.enterColumn_alias_list(this);
	}
};

Column_alias_listContext.prototype.exitRule = function(listener) {
    if(listener instanceof tsqlListener ) {
        listener.exitColumn_alias_list(this);
	}
};




tsqlParser.Column_alias_listContext = Column_alias_listContext;

tsqlParser.prototype.column_alias_list = function() {

    var localctx = new Column_alias_listContext(this, this._ctx, this.state);
    this.enterRule(localctx, 74, tsqlParser.RULE_column_alias_list);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 707;
        this.match(tsqlParser.LR_BRACKET);
        this.state = 708;
        this.column_alias();
        this.state = 713;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===tsqlParser.COMMA) {
            this.state = 709;
            this.match(tsqlParser.COMMA);
            this.state = 710;
            this.column_alias();
            this.state = 715;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 716;
        this.match(tsqlParser.RR_BRACKET);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Column_aliasContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = tsqlParser.RULE_column_alias;
    return this;
}

Column_aliasContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Column_aliasContext.prototype.constructor = Column_aliasContext;

Column_aliasContext.prototype.id = function() {
    return this.getTypedRuleContext(IdContext,0);
};

Column_aliasContext.prototype.STRING = function() {
    return this.getToken(tsqlParser.STRING, 0);
};

Column_aliasContext.prototype.enterRule = function(listener) {
    if(listener instanceof tsqlListener ) {
        listener.enterColumn_alias(this);
	}
};

Column_aliasContext.prototype.exitRule = function(listener) {
    if(listener instanceof tsqlListener ) {
        listener.exitColumn_alias(this);
	}
};




tsqlParser.Column_aliasContext = Column_aliasContext;

tsqlParser.prototype.column_alias = function() {

    var localctx = new Column_aliasContext(this, this._ctx, this.state);
    this.enterRule(localctx, 76, tsqlParser.RULE_column_alias);
    try {
        this.state = 720;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case tsqlParser.FORCESEEK:
        case tsqlParser.ABSOLUTE:
        case tsqlParser.APPLY:
        case tsqlParser.AUTO:
        case tsqlParser.AVG:
        case tsqlParser.BASE64:
        case tsqlParser.CALLER:
        case tsqlParser.CAST:
        case tsqlParser.CATCH:
        case tsqlParser.CHECKSUM_AGG:
        case tsqlParser.COMMITTED:
        case tsqlParser.CONCAT:
        case tsqlParser.CONTROL:
        case tsqlParser.COOKIE:
        case tsqlParser.COUNT:
        case tsqlParser.COUNT_BIG:
        case tsqlParser.DELAY:
        case tsqlParser.DELETED:
        case tsqlParser.DENSE_RANK:
        case tsqlParser.DISABLE:
        case tsqlParser.DYNAMIC:
        case tsqlParser.ENCRYPTION:
        case tsqlParser.EXPAND:
        case tsqlParser.FAST:
        case tsqlParser.FAST_FORWARD:
        case tsqlParser.FIRST:
        case tsqlParser.FOLLOWING:
        case tsqlParser.FORCE:
        case tsqlParser.FORCED:
        case tsqlParser.FORWARD_ONLY:
        case tsqlParser.FULLSCAN:
        case tsqlParser.GLOBAL:
        case tsqlParser.GO:
        case tsqlParser.GROUPING:
        case tsqlParser.GROUPING_ID:
        case tsqlParser.HASH:
        case tsqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
        case tsqlParser.IMPERSONATE:
        case tsqlParser.INSENSITIVE:
        case tsqlParser.INSERTED:
        case tsqlParser.ISOLATION:
        case tsqlParser.KEEP:
        case tsqlParser.KEEPFIXED:
        case tsqlParser.KEYSET:
        case tsqlParser.LAST:
        case tsqlParser.LEVEL:
        case tsqlParser.LOCAL:
        case tsqlParser.LOCK_ESCALATION:
        case tsqlParser.LOGIN:
        case tsqlParser.LOOP:
        case tsqlParser.MARK:
        case tsqlParser.MAX:
        case tsqlParser.MAXDOP:
        case tsqlParser.MAXRECURSION:
        case tsqlParser.MIN:
        case tsqlParser.MODIFY:
        case tsqlParser.NAME:
        case tsqlParser.NEXT:
        case tsqlParser.NOCOUNT:
        case tsqlParser.NOEXPAND:
        case tsqlParser.NORECOMPUTE:
        case tsqlParser.NTILE:
        case tsqlParser.NUMBER:
        case tsqlParser.OFFSET:
        case tsqlParser.ONLINE:
        case tsqlParser.ONLY:
        case tsqlParser.OPTIMISTIC:
        case tsqlParser.OPTIMIZE:
        case tsqlParser.OUT:
        case tsqlParser.OUTPUT:
        case tsqlParser.OWNER:
        case tsqlParser.PARAMETERIZATION:
        case tsqlParser.PARTITION:
        case tsqlParser.PATH:
        case tsqlParser.PRECEDING:
        case tsqlParser.PRIOR:
        case tsqlParser.PRIVILEGES:
        case tsqlParser.RANGE:
        case tsqlParser.RANK:
        case tsqlParser.READONLY:
        case tsqlParser.READ_ONLY:
        case tsqlParser.RECOMPILE:
        case tsqlParser.RELATIVE:
        case tsqlParser.REMOTE:
        case tsqlParser.REPEATABLE:
        case tsqlParser.ROBUST:
        case tsqlParser.ROOT:
        case tsqlParser.ROW:
        case tsqlParser.ROWGUID:
        case tsqlParser.ROWS:
        case tsqlParser.ROW_NUMBER:
        case tsqlParser.SAMPLE:
        case tsqlParser.SCHEMABINDING:
        case tsqlParser.SCROLL:
        case tsqlParser.SCROLL_LOCKS:
        case tsqlParser.SELF:
        case tsqlParser.SERIALIZABLE:
        case tsqlParser.SIMPLE:
        case tsqlParser.SNAPSHOT:
        case tsqlParser.SPATIAL_WINDOW_MAX_CELLS:
        case tsqlParser.STATIC:
        case tsqlParser.STATS_STREAM:
        case tsqlParser.STDEV:
        case tsqlParser.STDEVP:
        case tsqlParser.SUM:
        case tsqlParser.TEXTIMAGE_ON:
        case tsqlParser.THROW:
        case tsqlParser.TIES:
        case tsqlParser.TIME:
        case tsqlParser.TRY:
        case tsqlParser.TYPE:
        case tsqlParser.TYPE_WARNING:
        case tsqlParser.UNBOUNDED:
        case tsqlParser.UNCOMMITTED:
        case tsqlParser.UNKNOWN:
        case tsqlParser.USING:
        case tsqlParser.VAR:
        case tsqlParser.VARP:
        case tsqlParser.VIEWS:
        case tsqlParser.VIEW_METADATA:
        case tsqlParser.WORK:
        case tsqlParser.XML:
        case tsqlParser.XMLNAMESPACES:
        case tsqlParser.DOUBLE_QUOTE_ID:
        case tsqlParser.SQUARE_BRACKET_ID:
        case tsqlParser.ID:
            this.enterOuterAlt(localctx, 1);
            this.state = 718;
            this.id();
            break;
        case tsqlParser.STRING:
            this.enterOuterAlt(localctx, 2);
            this.state = 719;
            this.match(tsqlParser.STRING);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Expression_listContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = tsqlParser.RULE_expression_list;
    return this;
}

Expression_listContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Expression_listContext.prototype.constructor = Expression_listContext;

Expression_listContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};

Expression_listContext.prototype.enterRule = function(listener) {
    if(listener instanceof tsqlListener ) {
        listener.enterExpression_list(this);
	}
};

Expression_listContext.prototype.exitRule = function(listener) {
    if(listener instanceof tsqlListener ) {
        listener.exitExpression_list(this);
	}
};




tsqlParser.Expression_listContext = Expression_listContext;

tsqlParser.prototype.expression_list = function() {

    var localctx = new Expression_listContext(this, this._ctx, this.state);
    this.enterRule(localctx, 78, tsqlParser.RULE_expression_list);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 722;
        this.expression(0);
        this.state = 727;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===tsqlParser.COMMA) {
            this.state = 723;
            this.match(tsqlParser.COMMA);
            this.state = 724;
            this.expression(0);
            this.state = 729;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Ranking_windowed_functionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = tsqlParser.RULE_ranking_windowed_function;
    return this;
}

Ranking_windowed_functionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Ranking_windowed_functionContext.prototype.constructor = Ranking_windowed_functionContext;

Ranking_windowed_functionContext.prototype.over_clause = function() {
    return this.getTypedRuleContext(Over_clauseContext,0);
};

Ranking_windowed_functionContext.prototype.RANK = function() {
    return this.getToken(tsqlParser.RANK, 0);
};

Ranking_windowed_functionContext.prototype.DENSE_RANK = function() {
    return this.getToken(tsqlParser.DENSE_RANK, 0);
};

Ranking_windowed_functionContext.prototype.ROW_NUMBER = function() {
    return this.getToken(tsqlParser.ROW_NUMBER, 0);
};

Ranking_windowed_functionContext.prototype.NTILE = function() {
    return this.getToken(tsqlParser.NTILE, 0);
};

Ranking_windowed_functionContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

Ranking_windowed_functionContext.prototype.enterRule = function(listener) {
    if(listener instanceof tsqlListener ) {
        listener.enterRanking_windowed_function(this);
	}
};

Ranking_windowed_functionContext.prototype.exitRule = function(listener) {
    if(listener instanceof tsqlListener ) {
        listener.exitRanking_windowed_function(this);
	}
};




tsqlParser.Ranking_windowed_functionContext = Ranking_windowed_functionContext;

tsqlParser.prototype.ranking_windowed_function = function() {

    var localctx = new Ranking_windowed_functionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 80, tsqlParser.RULE_ranking_windowed_function);
    var _la = 0; // Token type
    try {
        this.state = 740;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case tsqlParser.DENSE_RANK:
        case tsqlParser.RANK:
        case tsqlParser.ROW_NUMBER:
            this.enterOuterAlt(localctx, 1);
            this.state = 730;
            _la = this._input.LA(1);
            if(!(_la===tsqlParser.DENSE_RANK || _la===tsqlParser.RANK || _la===tsqlParser.ROW_NUMBER)) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            this.state = 731;
            this.match(tsqlParser.LR_BRACKET);
            this.state = 732;
            this.match(tsqlParser.RR_BRACKET);
            this.state = 733;
            this.over_clause();
            break;
        case tsqlParser.NTILE:
            this.enterOuterAlt(localctx, 2);
            this.state = 734;
            this.match(tsqlParser.NTILE);
            this.state = 735;
            this.match(tsqlParser.LR_BRACKET);
            this.state = 736;
            this.expression(0);
            this.state = 737;
            this.match(tsqlParser.RR_BRACKET);
            this.state = 738;
            this.over_clause();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Aggregate_windowed_functionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = tsqlParser.RULE_aggregate_windowed_function;
    return this;
}

Aggregate_windowed_functionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Aggregate_windowed_functionContext.prototype.constructor = Aggregate_windowed_functionContext;

Aggregate_windowed_functionContext.prototype.all_distinct_expression = function() {
    return this.getTypedRuleContext(All_distinct_expressionContext,0);
};

Aggregate_windowed_functionContext.prototype.AVG = function() {
    return this.getToken(tsqlParser.AVG, 0);
};

Aggregate_windowed_functionContext.prototype.MAX = function() {
    return this.getToken(tsqlParser.MAX, 0);
};

Aggregate_windowed_functionContext.prototype.MIN = function() {
    return this.getToken(tsqlParser.MIN, 0);
};

Aggregate_windowed_functionContext.prototype.SUM = function() {
    return this.getToken(tsqlParser.SUM, 0);
};

Aggregate_windowed_functionContext.prototype.STDEV = function() {
    return this.getToken(tsqlParser.STDEV, 0);
};

Aggregate_windowed_functionContext.prototype.STDEVP = function() {
    return this.getToken(tsqlParser.STDEVP, 0);
};

Aggregate_windowed_functionContext.prototype.VAR = function() {
    return this.getToken(tsqlParser.VAR, 0);
};

Aggregate_windowed_functionContext.prototype.VARP = function() {
    return this.getToken(tsqlParser.VARP, 0);
};

Aggregate_windowed_functionContext.prototype.over_clause = function() {
    return this.getTypedRuleContext(Over_clauseContext,0);
};

Aggregate_windowed_functionContext.prototype.COUNT = function() {
    return this.getToken(tsqlParser.COUNT, 0);
};

Aggregate_windowed_functionContext.prototype.COUNT_BIG = function() {
    return this.getToken(tsqlParser.COUNT_BIG, 0);
};

Aggregate_windowed_functionContext.prototype.CHECKSUM_AGG = function() {
    return this.getToken(tsqlParser.CHECKSUM_AGG, 0);
};

Aggregate_windowed_functionContext.prototype.GROUPING = function() {
    return this.getToken(tsqlParser.GROUPING, 0);
};

Aggregate_windowed_functionContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

Aggregate_windowed_functionContext.prototype.GROUPING_ID = function() {
    return this.getToken(tsqlParser.GROUPING_ID, 0);
};

Aggregate_windowed_functionContext.prototype.expression_list = function() {
    return this.getTypedRuleContext(Expression_listContext,0);
};

Aggregate_windowed_functionContext.prototype.enterRule = function(listener) {
    if(listener instanceof tsqlListener ) {
        listener.enterAggregate_windowed_function(this);
	}
};

Aggregate_windowed_functionContext.prototype.exitRule = function(listener) {
    if(listener instanceof tsqlListener ) {
        listener.exitAggregate_windowed_function(this);
	}
};




tsqlParser.Aggregate_windowed_functionContext = Aggregate_windowed_functionContext;

tsqlParser.prototype.aggregate_windowed_function = function() {

    var localctx = new Aggregate_windowed_functionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 82, tsqlParser.RULE_aggregate_windowed_function);
    var _la = 0; // Token type
    try {
        this.state = 774;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case tsqlParser.AVG:
        case tsqlParser.MAX:
        case tsqlParser.MIN:
        case tsqlParser.STDEV:
        case tsqlParser.STDEVP:
        case tsqlParser.SUM:
        case tsqlParser.VAR:
        case tsqlParser.VARP:
            this.enterOuterAlt(localctx, 1);
            this.state = 742;
            _la = this._input.LA(1);
            if(!(_la===tsqlParser.AVG || _la===tsqlParser.MAX || _la===tsqlParser.MIN || ((((_la - 366)) & ~0x1f) == 0 && ((1 << (_la - 366)) & ((1 << (tsqlParser.STDEV - 366)) | (1 << (tsqlParser.STDEVP - 366)) | (1 << (tsqlParser.SUM - 366)) | (1 << (tsqlParser.VAR - 366)) | (1 << (tsqlParser.VARP - 366)))) !== 0))) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            this.state = 743;
            this.match(tsqlParser.LR_BRACKET);
            this.state = 744;
            this.all_distinct_expression();
            this.state = 745;
            this.match(tsqlParser.RR_BRACKET);
            this.state = 747;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===tsqlParser.OVER) {
                this.state = 746;
                this.over_clause();
            }

            break;
        case tsqlParser.COUNT:
        case tsqlParser.COUNT_BIG:
            this.enterOuterAlt(localctx, 2);
            this.state = 749;
            _la = this._input.LA(1);
            if(!(_la===tsqlParser.COUNT || _la===tsqlParser.COUNT_BIG)) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            this.state = 750;
            this.match(tsqlParser.LR_BRACKET);
            this.state = 753;
            this._errHandler.sync(this);
            switch(this._input.LA(1)) {
            case tsqlParser.STAR:
                this.state = 751;
                this.match(tsqlParser.STAR);
                break;
            case tsqlParser.ALL:
            case tsqlParser.CASE:
            case tsqlParser.DEFAULT:
            case tsqlParser.DISTINCT:
            case tsqlParser.FORCESEEK:
            case tsqlParser.NULL:
            case tsqlParser.OVER:
            case tsqlParser.ABSOLUTE:
            case tsqlParser.APPLY:
            case tsqlParser.AUTO:
            case tsqlParser.AVG:
            case tsqlParser.BASE64:
            case tsqlParser.CALLER:
            case tsqlParser.CAST:
            case tsqlParser.CATCH:
            case tsqlParser.CHECKSUM_AGG:
            case tsqlParser.COMMITTED:
            case tsqlParser.CONCAT:
            case tsqlParser.CONTROL:
            case tsqlParser.COOKIE:
            case tsqlParser.COUNT:
            case tsqlParser.COUNT_BIG:
            case tsqlParser.DELAY:
            case tsqlParser.DELETED:
            case tsqlParser.DENSE_RANK:
            case tsqlParser.DISABLE:
            case tsqlParser.DYNAMIC:
            case tsqlParser.ENCRYPTION:
            case tsqlParser.EXPAND:
            case tsqlParser.FAST:
            case tsqlParser.FAST_FORWARD:
            case tsqlParser.FIRST:
            case tsqlParser.FOLLOWING:
            case tsqlParser.FORCE:
            case tsqlParser.FORCED:
            case tsqlParser.FORWARD_ONLY:
            case tsqlParser.FULLSCAN:
            case tsqlParser.GLOBAL:
            case tsqlParser.GO:
            case tsqlParser.GROUPING:
            case tsqlParser.GROUPING_ID:
            case tsqlParser.HASH:
            case tsqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
            case tsqlParser.IMPERSONATE:
            case tsqlParser.INSENSITIVE:
            case tsqlParser.INSERTED:
            case tsqlParser.ISOLATION:
            case tsqlParser.KEEP:
            case tsqlParser.KEEPFIXED:
            case tsqlParser.KEYSET:
            case tsqlParser.LAST:
            case tsqlParser.LEVEL:
            case tsqlParser.LOCAL:
            case tsqlParser.LOCK_ESCALATION:
            case tsqlParser.LOGIN:
            case tsqlParser.LOOP:
            case tsqlParser.MARK:
            case tsqlParser.MAX:
            case tsqlParser.MAXDOP:
            case tsqlParser.MAXRECURSION:
            case tsqlParser.MIN:
            case tsqlParser.MODIFY:
            case tsqlParser.NAME:
            case tsqlParser.NEXT:
            case tsqlParser.NOCOUNT:
            case tsqlParser.NOEXPAND:
            case tsqlParser.NORECOMPUTE:
            case tsqlParser.NTILE:
            case tsqlParser.NUMBER:
            case tsqlParser.OFFSET:
            case tsqlParser.ONLINE:
            case tsqlParser.ONLY:
            case tsqlParser.OPTIMISTIC:
            case tsqlParser.OPTIMIZE:
            case tsqlParser.OUT:
            case tsqlParser.OUTPUT:
            case tsqlParser.OWNER:
            case tsqlParser.PARAMETERIZATION:
            case tsqlParser.PARTITION:
            case tsqlParser.PATH:
            case tsqlParser.PRECEDING:
            case tsqlParser.PRIOR:
            case tsqlParser.PRIVILEGES:
            case tsqlParser.RANGE:
            case tsqlParser.RANK:
            case tsqlParser.READONLY:
            case tsqlParser.READ_ONLY:
            case tsqlParser.RECOMPILE:
            case tsqlParser.RELATIVE:
            case tsqlParser.REMOTE:
            case tsqlParser.REPEATABLE:
            case tsqlParser.ROBUST:
            case tsqlParser.ROOT:
            case tsqlParser.ROW:
            case tsqlParser.ROWGUID:
            case tsqlParser.ROWS:
            case tsqlParser.ROW_NUMBER:
            case tsqlParser.SAMPLE:
            case tsqlParser.SCHEMABINDING:
            case tsqlParser.SCROLL:
            case tsqlParser.SCROLL_LOCKS:
            case tsqlParser.SELF:
            case tsqlParser.SERIALIZABLE:
            case tsqlParser.SIMPLE:
            case tsqlParser.SNAPSHOT:
            case tsqlParser.SPATIAL_WINDOW_MAX_CELLS:
            case tsqlParser.STATIC:
            case tsqlParser.STATS_STREAM:
            case tsqlParser.STDEV:
            case tsqlParser.STDEVP:
            case tsqlParser.SUM:
            case tsqlParser.TEXTIMAGE_ON:
            case tsqlParser.THROW:
            case tsqlParser.TIES:
            case tsqlParser.TIME:
            case tsqlParser.TRY:
            case tsqlParser.TYPE:
            case tsqlParser.TYPE_WARNING:
            case tsqlParser.UNBOUNDED:
            case tsqlParser.UNCOMMITTED:
            case tsqlParser.UNKNOWN:
            case tsqlParser.USING:
            case tsqlParser.VAR:
            case tsqlParser.VARP:
            case tsqlParser.VIEWS:
            case tsqlParser.VIEW_METADATA:
            case tsqlParser.WORK:
            case tsqlParser.XML:
            case tsqlParser.XMLNAMESPACES:
            case tsqlParser.DOUBLE_QUOTE_ID:
            case tsqlParser.SQUARE_BRACKET_ID:
            case tsqlParser.LOCAL_ID:
            case tsqlParser.DECIMAL:
            case tsqlParser.ID:
            case tsqlParser.STRING:
            case tsqlParser.BINARY:
            case tsqlParser.FLOAT:
            case tsqlParser.REAL:
            case tsqlParser.DOLLAR:
            case tsqlParser.LR_BRACKET:
            case tsqlParser.PLUS:
            case tsqlParser.MINUS:
            case tsqlParser.BIT_NOT:
                this.state = 752;
                this.all_distinct_expression();
                break;
            default:
                throw new antlr4.error.NoViableAltException(this);
            }
            this.state = 755;
            this.match(tsqlParser.RR_BRACKET);
            this.state = 757;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===tsqlParser.OVER) {
                this.state = 756;
                this.over_clause();
            }

            break;
        case tsqlParser.CHECKSUM_AGG:
            this.enterOuterAlt(localctx, 3);
            this.state = 759;
            this.match(tsqlParser.CHECKSUM_AGG);
            this.state = 760;
            this.match(tsqlParser.LR_BRACKET);
            this.state = 761;
            this.all_distinct_expression();
            this.state = 762;
            this.match(tsqlParser.RR_BRACKET);
            break;
        case tsqlParser.GROUPING:
            this.enterOuterAlt(localctx, 4);
            this.state = 764;
            this.match(tsqlParser.GROUPING);
            this.state = 765;
            this.match(tsqlParser.LR_BRACKET);
            this.state = 766;
            this.expression(0);
            this.state = 767;
            this.match(tsqlParser.RR_BRACKET);
            break;
        case tsqlParser.GROUPING_ID:
            this.enterOuterAlt(localctx, 5);
            this.state = 769;
            this.match(tsqlParser.GROUPING_ID);
            this.state = 770;
            this.match(tsqlParser.LR_BRACKET);
            this.state = 771;
            this.expression_list();
            this.state = 772;
            this.match(tsqlParser.RR_BRACKET);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function All_distinct_expressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = tsqlParser.RULE_all_distinct_expression;
    return this;
}

All_distinct_expressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
All_distinct_expressionContext.prototype.constructor = All_distinct_expressionContext;

All_distinct_expressionContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

All_distinct_expressionContext.prototype.ALL = function() {
    return this.getToken(tsqlParser.ALL, 0);
};

All_distinct_expressionContext.prototype.DISTINCT = function() {
    return this.getToken(tsqlParser.DISTINCT, 0);
};

All_distinct_expressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof tsqlListener ) {
        listener.enterAll_distinct_expression(this);
	}
};

All_distinct_expressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof tsqlListener ) {
        listener.exitAll_distinct_expression(this);
	}
};




tsqlParser.All_distinct_expressionContext = All_distinct_expressionContext;

tsqlParser.prototype.all_distinct_expression = function() {

    var localctx = new All_distinct_expressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 84, tsqlParser.RULE_all_distinct_expression);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 777;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===tsqlParser.ALL || _la===tsqlParser.DISTINCT) {
            this.state = 776;
            _la = this._input.LA(1);
            if(!(_la===tsqlParser.ALL || _la===tsqlParser.DISTINCT)) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
        }

        this.state = 779;
        this.expression(0);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Over_clauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = tsqlParser.RULE_over_clause;
    return this;
}

Over_clauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Over_clauseContext.prototype.constructor = Over_clauseContext;

Over_clauseContext.prototype.OVER = function() {
    return this.getToken(tsqlParser.OVER, 0);
};

Over_clauseContext.prototype.PARTITION = function() {
    return this.getToken(tsqlParser.PARTITION, 0);
};

Over_clauseContext.prototype.BY = function() {
    return this.getToken(tsqlParser.BY, 0);
};

Over_clauseContext.prototype.expression_list = function() {
    return this.getTypedRuleContext(Expression_listContext,0);
};

Over_clauseContext.prototype.order_by_clause = function() {
    return this.getTypedRuleContext(Order_by_clauseContext,0);
};

Over_clauseContext.prototype.row_or_range_clause = function() {
    return this.getTypedRuleContext(Row_or_range_clauseContext,0);
};

Over_clauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof tsqlListener ) {
        listener.enterOver_clause(this);
	}
};

Over_clauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof tsqlListener ) {
        listener.exitOver_clause(this);
	}
};




tsqlParser.Over_clauseContext = Over_clauseContext;

tsqlParser.prototype.over_clause = function() {

    var localctx = new Over_clauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 86, tsqlParser.RULE_over_clause);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 781;
        this.match(tsqlParser.OVER);
        this.state = 782;
        this.match(tsqlParser.LR_BRACKET);
        this.state = 786;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===tsqlParser.PARTITION) {
            this.state = 783;
            this.match(tsqlParser.PARTITION);
            this.state = 784;
            this.match(tsqlParser.BY);
            this.state = 785;
            this.expression_list();
        }

        this.state = 789;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===tsqlParser.ORDER) {
            this.state = 788;
            this.order_by_clause();
        }

        this.state = 792;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===tsqlParser.RANGE || _la===tsqlParser.ROWS) {
            this.state = 791;
            this.row_or_range_clause();
        }

        this.state = 794;
        this.match(tsqlParser.RR_BRACKET);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Row_or_range_clauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = tsqlParser.RULE_row_or_range_clause;
    return this;
}

Row_or_range_clauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Row_or_range_clauseContext.prototype.constructor = Row_or_range_clauseContext;

Row_or_range_clauseContext.prototype.window_frame_extent = function() {
    return this.getTypedRuleContext(Window_frame_extentContext,0);
};

Row_or_range_clauseContext.prototype.ROWS = function() {
    return this.getToken(tsqlParser.ROWS, 0);
};

Row_or_range_clauseContext.prototype.RANGE = function() {
    return this.getToken(tsqlParser.RANGE, 0);
};

Row_or_range_clauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof tsqlListener ) {
        listener.enterRow_or_range_clause(this);
	}
};

Row_or_range_clauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof tsqlListener ) {
        listener.exitRow_or_range_clause(this);
	}
};




tsqlParser.Row_or_range_clauseContext = Row_or_range_clauseContext;

tsqlParser.prototype.row_or_range_clause = function() {

    var localctx = new Row_or_range_clauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 88, tsqlParser.RULE_row_or_range_clause);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 796;
        _la = this._input.LA(1);
        if(!(_la===tsqlParser.RANGE || _la===tsqlParser.ROWS)) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
        this.state = 797;
        this.window_frame_extent();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Window_frame_extentContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = tsqlParser.RULE_window_frame_extent;
    return this;
}

Window_frame_extentContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Window_frame_extentContext.prototype.constructor = Window_frame_extentContext;

Window_frame_extentContext.prototype.window_frame_preceding = function() {
    return this.getTypedRuleContext(Window_frame_precedingContext,0);
};

Window_frame_extentContext.prototype.BETWEEN = function() {
    return this.getToken(tsqlParser.BETWEEN, 0);
};

Window_frame_extentContext.prototype.window_frame_bound = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Window_frame_boundContext);
    } else {
        return this.getTypedRuleContext(Window_frame_boundContext,i);
    }
};

Window_frame_extentContext.prototype.AND = function() {
    return this.getToken(tsqlParser.AND, 0);
};

Window_frame_extentContext.prototype.enterRule = function(listener) {
    if(listener instanceof tsqlListener ) {
        listener.enterWindow_frame_extent(this);
	}
};

Window_frame_extentContext.prototype.exitRule = function(listener) {
    if(listener instanceof tsqlListener ) {
        listener.exitWindow_frame_extent(this);
	}
};




tsqlParser.Window_frame_extentContext = Window_frame_extentContext;

tsqlParser.prototype.window_frame_extent = function() {

    var localctx = new Window_frame_extentContext(this, this._ctx, this.state);
    this.enterRule(localctx, 90, tsqlParser.RULE_window_frame_extent);
    try {
        this.state = 805;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case tsqlParser.CURRENT:
        case tsqlParser.UNBOUNDED:
        case tsqlParser.DECIMAL:
            this.enterOuterAlt(localctx, 1);
            this.state = 799;
            this.window_frame_preceding();
            break;
        case tsqlParser.BETWEEN:
            this.enterOuterAlt(localctx, 2);
            this.state = 800;
            this.match(tsqlParser.BETWEEN);
            this.state = 801;
            this.window_frame_bound();
            this.state = 802;
            this.match(tsqlParser.AND);
            this.state = 803;
            this.window_frame_bound();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Window_frame_boundContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = tsqlParser.RULE_window_frame_bound;
    return this;
}

Window_frame_boundContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Window_frame_boundContext.prototype.constructor = Window_frame_boundContext;

Window_frame_boundContext.prototype.window_frame_preceding = function() {
    return this.getTypedRuleContext(Window_frame_precedingContext,0);
};

Window_frame_boundContext.prototype.window_frame_following = function() {
    return this.getTypedRuleContext(Window_frame_followingContext,0);
};

Window_frame_boundContext.prototype.enterRule = function(listener) {
    if(listener instanceof tsqlListener ) {
        listener.enterWindow_frame_bound(this);
	}
};

Window_frame_boundContext.prototype.exitRule = function(listener) {
    if(listener instanceof tsqlListener ) {
        listener.exitWindow_frame_bound(this);
	}
};




tsqlParser.Window_frame_boundContext = Window_frame_boundContext;

tsqlParser.prototype.window_frame_bound = function() {

    var localctx = new Window_frame_boundContext(this, this._ctx, this.state);
    this.enterRule(localctx, 92, tsqlParser.RULE_window_frame_bound);
    try {
        this.state = 809;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,89,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 807;
            this.window_frame_preceding();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 808;
            this.window_frame_following();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Window_frame_precedingContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = tsqlParser.RULE_window_frame_preceding;
    return this;
}

Window_frame_precedingContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Window_frame_precedingContext.prototype.constructor = Window_frame_precedingContext;

Window_frame_precedingContext.prototype.UNBOUNDED = function() {
    return this.getToken(tsqlParser.UNBOUNDED, 0);
};

Window_frame_precedingContext.prototype.PRECEDING = function() {
    return this.getToken(tsqlParser.PRECEDING, 0);
};

Window_frame_precedingContext.prototype.DECIMAL = function() {
    return this.getToken(tsqlParser.DECIMAL, 0);
};

Window_frame_precedingContext.prototype.CURRENT = function() {
    return this.getToken(tsqlParser.CURRENT, 0);
};

Window_frame_precedingContext.prototype.ROW = function() {
    return this.getToken(tsqlParser.ROW, 0);
};

Window_frame_precedingContext.prototype.enterRule = function(listener) {
    if(listener instanceof tsqlListener ) {
        listener.enterWindow_frame_preceding(this);
	}
};

Window_frame_precedingContext.prototype.exitRule = function(listener) {
    if(listener instanceof tsqlListener ) {
        listener.exitWindow_frame_preceding(this);
	}
};




tsqlParser.Window_frame_precedingContext = Window_frame_precedingContext;

tsqlParser.prototype.window_frame_preceding = function() {

    var localctx = new Window_frame_precedingContext(this, this._ctx, this.state);
    this.enterRule(localctx, 94, tsqlParser.RULE_window_frame_preceding);
    try {
        this.state = 817;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case tsqlParser.UNBOUNDED:
            this.enterOuterAlt(localctx, 1);
            this.state = 811;
            this.match(tsqlParser.UNBOUNDED);
            this.state = 812;
            this.match(tsqlParser.PRECEDING);
            break;
        case tsqlParser.DECIMAL:
            this.enterOuterAlt(localctx, 2);
            this.state = 813;
            this.match(tsqlParser.DECIMAL);
            this.state = 814;
            this.match(tsqlParser.PRECEDING);
            break;
        case tsqlParser.CURRENT:
            this.enterOuterAlt(localctx, 3);
            this.state = 815;
            this.match(tsqlParser.CURRENT);
            this.state = 816;
            this.match(tsqlParser.ROW);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Window_frame_followingContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = tsqlParser.RULE_window_frame_following;
    return this;
}

Window_frame_followingContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Window_frame_followingContext.prototype.constructor = Window_frame_followingContext;

Window_frame_followingContext.prototype.UNBOUNDED = function() {
    return this.getToken(tsqlParser.UNBOUNDED, 0);
};

Window_frame_followingContext.prototype.FOLLOWING = function() {
    return this.getToken(tsqlParser.FOLLOWING, 0);
};

Window_frame_followingContext.prototype.DECIMAL = function() {
    return this.getToken(tsqlParser.DECIMAL, 0);
};

Window_frame_followingContext.prototype.enterRule = function(listener) {
    if(listener instanceof tsqlListener ) {
        listener.enterWindow_frame_following(this);
	}
};

Window_frame_followingContext.prototype.exitRule = function(listener) {
    if(listener instanceof tsqlListener ) {
        listener.exitWindow_frame_following(this);
	}
};




tsqlParser.Window_frame_followingContext = Window_frame_followingContext;

tsqlParser.prototype.window_frame_following = function() {

    var localctx = new Window_frame_followingContext(this, this._ctx, this.state);
    this.enterRule(localctx, 96, tsqlParser.RULE_window_frame_following);
    try {
        this.state = 823;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case tsqlParser.UNBOUNDED:
            this.enterOuterAlt(localctx, 1);
            this.state = 819;
            this.match(tsqlParser.UNBOUNDED);
            this.state = 820;
            this.match(tsqlParser.FOLLOWING);
            break;
        case tsqlParser.DECIMAL:
            this.enterOuterAlt(localctx, 2);
            this.state = 821;
            this.match(tsqlParser.DECIMAL);
            this.state = 822;
            this.match(tsqlParser.FOLLOWING);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Full_table_nameContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = tsqlParser.RULE_full_table_name;
    this.server = null; // IdContext
    this.database = null; // IdContext
    this.schema = null; // IdContext
    this.table = null; // IdContext
    return this;
}

Full_table_nameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Full_table_nameContext.prototype.constructor = Full_table_nameContext;

Full_table_nameContext.prototype.id = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(IdContext);
    } else {
        return this.getTypedRuleContext(IdContext,i);
    }
};

Full_table_nameContext.prototype.enterRule = function(listener) {
    if(listener instanceof tsqlListener ) {
        listener.enterFull_table_name(this);
	}
};

Full_table_nameContext.prototype.exitRule = function(listener) {
    if(listener instanceof tsqlListener ) {
        listener.exitFull_table_name(this);
	}
};




tsqlParser.Full_table_nameContext = Full_table_nameContext;

tsqlParser.prototype.full_table_name = function() {

    var localctx = new Full_table_nameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 98, tsqlParser.RULE_full_table_name);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 842;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,93,this._ctx);
        if(la_===1) {
            this.state = 825;
            localctx.server = this.id();
            this.state = 826;
            this.match(tsqlParser.DOT);
            this.state = 827;
            localctx.database = this.id();
            this.state = 828;
            this.match(tsqlParser.DOT);
            this.state = 829;
            localctx.schema = this.id();
            this.state = 830;
            this.match(tsqlParser.DOT);

        } else if(la_===2) {
            this.state = 832;
            localctx.database = this.id();
            this.state = 833;
            this.match(tsqlParser.DOT);
            this.state = 835;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===tsqlParser.FORCESEEK || ((((_la - 192)) & ~0x1f) == 0 && ((1 << (_la - 192)) & ((1 << (tsqlParser.ABSOLUTE - 192)) | (1 << (tsqlParser.APPLY - 192)) | (1 << (tsqlParser.AUTO - 192)) | (1 << (tsqlParser.AVG - 192)) | (1 << (tsqlParser.BASE64 - 192)) | (1 << (tsqlParser.CALLER - 192)) | (1 << (tsqlParser.CAST - 192)) | (1 << (tsqlParser.CATCH - 192)) | (1 << (tsqlParser.CHECKSUM_AGG - 192)) | (1 << (tsqlParser.COMMITTED - 192)) | (1 << (tsqlParser.CONCAT - 192)))) !== 0) || ((((_la - 224)) & ~0x1f) == 0 && ((1 << (_la - 224)) & ((1 << (tsqlParser.CONTROL - 224)) | (1 << (tsqlParser.COOKIE - 224)) | (1 << (tsqlParser.COUNT - 224)) | (1 << (tsqlParser.COUNT_BIG - 224)) | (1 << (tsqlParser.DELAY - 224)) | (1 << (tsqlParser.DELETED - 224)) | (1 << (tsqlParser.DENSE_RANK - 224)) | (1 << (tsqlParser.DISABLE - 224)) | (1 << (tsqlParser.DYNAMIC - 224)) | (1 << (tsqlParser.ENCRYPTION - 224)) | (1 << (tsqlParser.EXPAND - 224)) | (1 << (tsqlParser.FAST - 224)) | (1 << (tsqlParser.FAST_FORWARD - 224)))) !== 0) || ((((_la - 258)) & ~0x1f) == 0 && ((1 << (_la - 258)) & ((1 << (tsqlParser.FIRST - 258)) | (1 << (tsqlParser.FOLLOWING - 258)) | (1 << (tsqlParser.FORCE - 258)) | (1 << (tsqlParser.FORCED - 258)) | (1 << (tsqlParser.FORWARD_ONLY - 258)) | (1 << (tsqlParser.FULLSCAN - 258)) | (1 << (tsqlParser.GLOBAL - 258)) | (1 << (tsqlParser.GO - 258)) | (1 << (tsqlParser.GROUPING - 258)) | (1 << (tsqlParser.GROUPING_ID - 258)) | (1 << (tsqlParser.HASH - 258)) | (1 << (tsqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX - 258)) | (1 << (tsqlParser.IMPERSONATE - 258)) | (1 << (tsqlParser.INSENSITIVE - 258)) | (1 << (tsqlParser.INSERTED - 258)) | (1 << (tsqlParser.ISOLATION - 258)) | (1 << (tsqlParser.KEEP - 258)) | (1 << (tsqlParser.KEEPFIXED - 258)) | (1 << (tsqlParser.KEYSET - 258)) | (1 << (tsqlParser.LAST - 258)) | (1 << (tsqlParser.LEVEL - 258)) | (1 << (tsqlParser.LOCAL - 258)) | (1 << (tsqlParser.LOCK_ESCALATION - 258)) | (1 << (tsqlParser.LOGIN - 258)) | (1 << (tsqlParser.LOOP - 258)))) !== 0) || ((((_la - 290)) & ~0x1f) == 0 && ((1 << (_la - 290)) & ((1 << (tsqlParser.MARK - 290)) | (1 << (tsqlParser.MAX - 290)) | (1 << (tsqlParser.MAXDOP - 290)) | (1 << (tsqlParser.MAXRECURSION - 290)) | (1 << (tsqlParser.MIN - 290)) | (1 << (tsqlParser.MODIFY - 290)) | (1 << (tsqlParser.NAME - 290)) | (1 << (tsqlParser.NEXT - 290)) | (1 << (tsqlParser.NOCOUNT - 290)) | (1 << (tsqlParser.NOEXPAND - 290)) | (1 << (tsqlParser.NORECOMPUTE - 290)) | (1 << (tsqlParser.NTILE - 290)) | (1 << (tsqlParser.NUMBER - 290)) | (1 << (tsqlParser.OFFSET - 290)) | (1 << (tsqlParser.ONLINE - 290)) | (1 << (tsqlParser.ONLY - 290)) | (1 << (tsqlParser.OPTIMISTIC - 290)) | (1 << (tsqlParser.OPTIMIZE - 290)) | (1 << (tsqlParser.OUT - 290)))) !== 0) || ((((_la - 322)) & ~0x1f) == 0 && ((1 << (_la - 322)) & ((1 << (tsqlParser.OUTPUT - 322)) | (1 << (tsqlParser.OWNER - 322)) | (1 << (tsqlParser.PARAMETERIZATION - 322)) | (1 << (tsqlParser.PARTITION - 322)) | (1 << (tsqlParser.PATH - 322)) | (1 << (tsqlParser.PRECEDING - 322)) | (1 << (tsqlParser.PRIOR - 322)) | (1 << (tsqlParser.PRIVILEGES - 322)) | (1 << (tsqlParser.RANGE - 322)) | (1 << (tsqlParser.RANK - 322)) | (1 << (tsqlParser.READONLY - 322)) | (1 << (tsqlParser.READ_ONLY - 322)) | (1 << (tsqlParser.RECOMPILE - 322)) | (1 << (tsqlParser.RELATIVE - 322)) | (1 << (tsqlParser.REMOTE - 322)) | (1 << (tsqlParser.REPEATABLE - 322)) | (1 << (tsqlParser.ROBUST - 322)) | (1 << (tsqlParser.ROOT - 322)) | (1 << (tsqlParser.ROW - 322)) | (1 << (tsqlParser.ROWGUID - 322)) | (1 << (tsqlParser.ROWS - 322)) | (1 << (tsqlParser.ROW_NUMBER - 322)) | (1 << (tsqlParser.SAMPLE - 322)) | (1 << (tsqlParser.SCHEMABINDING - 322)) | (1 << (tsqlParser.SCROLL - 322)))) !== 0) || ((((_la - 354)) & ~0x1f) == 0 && ((1 << (_la - 354)) & ((1 << (tsqlParser.SCROLL_LOCKS - 354)) | (1 << (tsqlParser.SELF - 354)) | (1 << (tsqlParser.SERIALIZABLE - 354)) | (1 << (tsqlParser.SIMPLE - 354)) | (1 << (tsqlParser.SNAPSHOT - 354)) | (1 << (tsqlParser.SPATIAL_WINDOW_MAX_CELLS - 354)) | (1 << (tsqlParser.STATIC - 354)) | (1 << (tsqlParser.STATS_STREAM - 354)) | (1 << (tsqlParser.STDEV - 354)) | (1 << (tsqlParser.STDEVP - 354)) | (1 << (tsqlParser.SUM - 354)) | (1 << (tsqlParser.TEXTIMAGE_ON - 354)) | (1 << (tsqlParser.THROW - 354)) | (1 << (tsqlParser.TIES - 354)) | (1 << (tsqlParser.TIME - 354)) | (1 << (tsqlParser.TRY - 354)) | (1 << (tsqlParser.TYPE - 354)) | (1 << (tsqlParser.TYPE_WARNING - 354)) | (1 << (tsqlParser.UNBOUNDED - 354)) | (1 << (tsqlParser.UNCOMMITTED - 354)) | (1 << (tsqlParser.UNKNOWN - 354)))) !== 0) || ((((_la - 387)) & ~0x1f) == 0 && ((1 << (_la - 387)) & ((1 << (tsqlParser.USING - 387)) | (1 << (tsqlParser.VAR - 387)) | (1 << (tsqlParser.VARP - 387)) | (1 << (tsqlParser.VIEWS - 387)) | (1 << (tsqlParser.VIEW_METADATA - 387)) | (1 << (tsqlParser.WORK - 387)) | (1 << (tsqlParser.XML - 387)) | (1 << (tsqlParser.XMLNAMESPACES - 387)) | (1 << (tsqlParser.DOUBLE_QUOTE_ID - 387)) | (1 << (tsqlParser.SQUARE_BRACKET_ID - 387)) | (1 << (tsqlParser.ID - 387)))) !== 0)) {
                this.state = 834;
                localctx.schema = this.id();
            }

            this.state = 837;
            this.match(tsqlParser.DOT);

        } else if(la_===3) {
            this.state = 839;
            localctx.schema = this.id();
            this.state = 840;
            this.match(tsqlParser.DOT);

        }
        this.state = 844;
        localctx.table = this.id();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Table_nameContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = tsqlParser.RULE_table_name;
    this.database = null; // IdContext
    this.schema = null; // IdContext
    this.table = null; // IdContext
    return this;
}

Table_nameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Table_nameContext.prototype.constructor = Table_nameContext;

Table_nameContext.prototype.id = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(IdContext);
    } else {
        return this.getTypedRuleContext(IdContext,i);
    }
};

Table_nameContext.prototype.enterRule = function(listener) {
    if(listener instanceof tsqlListener ) {
        listener.enterTable_name(this);
	}
};

Table_nameContext.prototype.exitRule = function(listener) {
    if(listener instanceof tsqlListener ) {
        listener.exitTable_name(this);
	}
};




tsqlParser.Table_nameContext = Table_nameContext;

tsqlParser.prototype.table_name = function() {

    var localctx = new Table_nameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 100, tsqlParser.RULE_table_name);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 856;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,95,this._ctx);
        if(la_===1) {
            this.state = 846;
            localctx.database = this.id();
            this.state = 847;
            this.match(tsqlParser.DOT);
            this.state = 849;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===tsqlParser.FORCESEEK || ((((_la - 192)) & ~0x1f) == 0 && ((1 << (_la - 192)) & ((1 << (tsqlParser.ABSOLUTE - 192)) | (1 << (tsqlParser.APPLY - 192)) | (1 << (tsqlParser.AUTO - 192)) | (1 << (tsqlParser.AVG - 192)) | (1 << (tsqlParser.BASE64 - 192)) | (1 << (tsqlParser.CALLER - 192)) | (1 << (tsqlParser.CAST - 192)) | (1 << (tsqlParser.CATCH - 192)) | (1 << (tsqlParser.CHECKSUM_AGG - 192)) | (1 << (tsqlParser.COMMITTED - 192)) | (1 << (tsqlParser.CONCAT - 192)))) !== 0) || ((((_la - 224)) & ~0x1f) == 0 && ((1 << (_la - 224)) & ((1 << (tsqlParser.CONTROL - 224)) | (1 << (tsqlParser.COOKIE - 224)) | (1 << (tsqlParser.COUNT - 224)) | (1 << (tsqlParser.COUNT_BIG - 224)) | (1 << (tsqlParser.DELAY - 224)) | (1 << (tsqlParser.DELETED - 224)) | (1 << (tsqlParser.DENSE_RANK - 224)) | (1 << (tsqlParser.DISABLE - 224)) | (1 << (tsqlParser.DYNAMIC - 224)) | (1 << (tsqlParser.ENCRYPTION - 224)) | (1 << (tsqlParser.EXPAND - 224)) | (1 << (tsqlParser.FAST - 224)) | (1 << (tsqlParser.FAST_FORWARD - 224)))) !== 0) || ((((_la - 258)) & ~0x1f) == 0 && ((1 << (_la - 258)) & ((1 << (tsqlParser.FIRST - 258)) | (1 << (tsqlParser.FOLLOWING - 258)) | (1 << (tsqlParser.FORCE - 258)) | (1 << (tsqlParser.FORCED - 258)) | (1 << (tsqlParser.FORWARD_ONLY - 258)) | (1 << (tsqlParser.FULLSCAN - 258)) | (1 << (tsqlParser.GLOBAL - 258)) | (1 << (tsqlParser.GO - 258)) | (1 << (tsqlParser.GROUPING - 258)) | (1 << (tsqlParser.GROUPING_ID - 258)) | (1 << (tsqlParser.HASH - 258)) | (1 << (tsqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX - 258)) | (1 << (tsqlParser.IMPERSONATE - 258)) | (1 << (tsqlParser.INSENSITIVE - 258)) | (1 << (tsqlParser.INSERTED - 258)) | (1 << (tsqlParser.ISOLATION - 258)) | (1 << (tsqlParser.KEEP - 258)) | (1 << (tsqlParser.KEEPFIXED - 258)) | (1 << (tsqlParser.KEYSET - 258)) | (1 << (tsqlParser.LAST - 258)) | (1 << (tsqlParser.LEVEL - 258)) | (1 << (tsqlParser.LOCAL - 258)) | (1 << (tsqlParser.LOCK_ESCALATION - 258)) | (1 << (tsqlParser.LOGIN - 258)) | (1 << (tsqlParser.LOOP - 258)))) !== 0) || ((((_la - 290)) & ~0x1f) == 0 && ((1 << (_la - 290)) & ((1 << (tsqlParser.MARK - 290)) | (1 << (tsqlParser.MAX - 290)) | (1 << (tsqlParser.MAXDOP - 290)) | (1 << (tsqlParser.MAXRECURSION - 290)) | (1 << (tsqlParser.MIN - 290)) | (1 << (tsqlParser.MODIFY - 290)) | (1 << (tsqlParser.NAME - 290)) | (1 << (tsqlParser.NEXT - 290)) | (1 << (tsqlParser.NOCOUNT - 290)) | (1 << (tsqlParser.NOEXPAND - 290)) | (1 << (tsqlParser.NORECOMPUTE - 290)) | (1 << (tsqlParser.NTILE - 290)) | (1 << (tsqlParser.NUMBER - 290)) | (1 << (tsqlParser.OFFSET - 290)) | (1 << (tsqlParser.ONLINE - 290)) | (1 << (tsqlParser.ONLY - 290)) | (1 << (tsqlParser.OPTIMISTIC - 290)) | (1 << (tsqlParser.OPTIMIZE - 290)) | (1 << (tsqlParser.OUT - 290)))) !== 0) || ((((_la - 322)) & ~0x1f) == 0 && ((1 << (_la - 322)) & ((1 << (tsqlParser.OUTPUT - 322)) | (1 << (tsqlParser.OWNER - 322)) | (1 << (tsqlParser.PARAMETERIZATION - 322)) | (1 << (tsqlParser.PARTITION - 322)) | (1 << (tsqlParser.PATH - 322)) | (1 << (tsqlParser.PRECEDING - 322)) | (1 << (tsqlParser.PRIOR - 322)) | (1 << (tsqlParser.PRIVILEGES - 322)) | (1 << (tsqlParser.RANGE - 322)) | (1 << (tsqlParser.RANK - 322)) | (1 << (tsqlParser.READONLY - 322)) | (1 << (tsqlParser.READ_ONLY - 322)) | (1 << (tsqlParser.RECOMPILE - 322)) | (1 << (tsqlParser.RELATIVE - 322)) | (1 << (tsqlParser.REMOTE - 322)) | (1 << (tsqlParser.REPEATABLE - 322)) | (1 << (tsqlParser.ROBUST - 322)) | (1 << (tsqlParser.ROOT - 322)) | (1 << (tsqlParser.ROW - 322)) | (1 << (tsqlParser.ROWGUID - 322)) | (1 << (tsqlParser.ROWS - 322)) | (1 << (tsqlParser.ROW_NUMBER - 322)) | (1 << (tsqlParser.SAMPLE - 322)) | (1 << (tsqlParser.SCHEMABINDING - 322)) | (1 << (tsqlParser.SCROLL - 322)))) !== 0) || ((((_la - 354)) & ~0x1f) == 0 && ((1 << (_la - 354)) & ((1 << (tsqlParser.SCROLL_LOCKS - 354)) | (1 << (tsqlParser.SELF - 354)) | (1 << (tsqlParser.SERIALIZABLE - 354)) | (1 << (tsqlParser.SIMPLE - 354)) | (1 << (tsqlParser.SNAPSHOT - 354)) | (1 << (tsqlParser.SPATIAL_WINDOW_MAX_CELLS - 354)) | (1 << (tsqlParser.STATIC - 354)) | (1 << (tsqlParser.STATS_STREAM - 354)) | (1 << (tsqlParser.STDEV - 354)) | (1 << (tsqlParser.STDEVP - 354)) | (1 << (tsqlParser.SUM - 354)) | (1 << (tsqlParser.TEXTIMAGE_ON - 354)) | (1 << (tsqlParser.THROW - 354)) | (1 << (tsqlParser.TIES - 354)) | (1 << (tsqlParser.TIME - 354)) | (1 << (tsqlParser.TRY - 354)) | (1 << (tsqlParser.TYPE - 354)) | (1 << (tsqlParser.TYPE_WARNING - 354)) | (1 << (tsqlParser.UNBOUNDED - 354)) | (1 << (tsqlParser.UNCOMMITTED - 354)) | (1 << (tsqlParser.UNKNOWN - 354)))) !== 0) || ((((_la - 387)) & ~0x1f) == 0 && ((1 << (_la - 387)) & ((1 << (tsqlParser.USING - 387)) | (1 << (tsqlParser.VAR - 387)) | (1 << (tsqlParser.VARP - 387)) | (1 << (tsqlParser.VIEWS - 387)) | (1 << (tsqlParser.VIEW_METADATA - 387)) | (1 << (tsqlParser.WORK - 387)) | (1 << (tsqlParser.XML - 387)) | (1 << (tsqlParser.XMLNAMESPACES - 387)) | (1 << (tsqlParser.DOUBLE_QUOTE_ID - 387)) | (1 << (tsqlParser.SQUARE_BRACKET_ID - 387)) | (1 << (tsqlParser.ID - 387)))) !== 0)) {
                this.state = 848;
                localctx.schema = this.id();
            }

            this.state = 851;
            this.match(tsqlParser.DOT);

        } else if(la_===2) {
            this.state = 853;
            localctx.schema = this.id();
            this.state = 854;
            this.match(tsqlParser.DOT);

        }
        this.state = 858;
        localctx.table = this.id();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Simple_nameContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = tsqlParser.RULE_simple_name;
    this.schema = null; // IdContext
    this.name = null; // IdContext
    return this;
}

Simple_nameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Simple_nameContext.prototype.constructor = Simple_nameContext;

Simple_nameContext.prototype.id = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(IdContext);
    } else {
        return this.getTypedRuleContext(IdContext,i);
    }
};

Simple_nameContext.prototype.enterRule = function(listener) {
    if(listener instanceof tsqlListener ) {
        listener.enterSimple_name(this);
	}
};

Simple_nameContext.prototype.exitRule = function(listener) {
    if(listener instanceof tsqlListener ) {
        listener.exitSimple_name(this);
	}
};




tsqlParser.Simple_nameContext = Simple_nameContext;

tsqlParser.prototype.simple_name = function() {

    var localctx = new Simple_nameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 102, tsqlParser.RULE_simple_name);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 863;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,96,this._ctx);
        if(la_===1) {
            this.state = 860;
            localctx.schema = this.id();
            this.state = 861;
            this.match(tsqlParser.DOT);

        }
        this.state = 865;
        localctx.name = this.id();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Func_proc_nameContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = tsqlParser.RULE_func_proc_name;
    this.database = null; // IdContext
    this.schema = null; // IdContext
    this.procedure = null; // IdContext
    return this;
}

Func_proc_nameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Func_proc_nameContext.prototype.constructor = Func_proc_nameContext;

Func_proc_nameContext.prototype.id = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(IdContext);
    } else {
        return this.getTypedRuleContext(IdContext,i);
    }
};

Func_proc_nameContext.prototype.enterRule = function(listener) {
    if(listener instanceof tsqlListener ) {
        listener.enterFunc_proc_name(this);
	}
};

Func_proc_nameContext.prototype.exitRule = function(listener) {
    if(listener instanceof tsqlListener ) {
        listener.exitFunc_proc_name(this);
	}
};




tsqlParser.Func_proc_nameContext = Func_proc_nameContext;

tsqlParser.prototype.func_proc_name = function() {

    var localctx = new Func_proc_nameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 104, tsqlParser.RULE_func_proc_name);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 877;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,98,this._ctx);
        if(la_===1) {
            this.state = 867;
            localctx.database = this.id();
            this.state = 868;
            this.match(tsqlParser.DOT);
            this.state = 870;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===tsqlParser.FORCESEEK || ((((_la - 192)) & ~0x1f) == 0 && ((1 << (_la - 192)) & ((1 << (tsqlParser.ABSOLUTE - 192)) | (1 << (tsqlParser.APPLY - 192)) | (1 << (tsqlParser.AUTO - 192)) | (1 << (tsqlParser.AVG - 192)) | (1 << (tsqlParser.BASE64 - 192)) | (1 << (tsqlParser.CALLER - 192)) | (1 << (tsqlParser.CAST - 192)) | (1 << (tsqlParser.CATCH - 192)) | (1 << (tsqlParser.CHECKSUM_AGG - 192)) | (1 << (tsqlParser.COMMITTED - 192)) | (1 << (tsqlParser.CONCAT - 192)))) !== 0) || ((((_la - 224)) & ~0x1f) == 0 && ((1 << (_la - 224)) & ((1 << (tsqlParser.CONTROL - 224)) | (1 << (tsqlParser.COOKIE - 224)) | (1 << (tsqlParser.COUNT - 224)) | (1 << (tsqlParser.COUNT_BIG - 224)) | (1 << (tsqlParser.DELAY - 224)) | (1 << (tsqlParser.DELETED - 224)) | (1 << (tsqlParser.DENSE_RANK - 224)) | (1 << (tsqlParser.DISABLE - 224)) | (1 << (tsqlParser.DYNAMIC - 224)) | (1 << (tsqlParser.ENCRYPTION - 224)) | (1 << (tsqlParser.EXPAND - 224)) | (1 << (tsqlParser.FAST - 224)) | (1 << (tsqlParser.FAST_FORWARD - 224)))) !== 0) || ((((_la - 258)) & ~0x1f) == 0 && ((1 << (_la - 258)) & ((1 << (tsqlParser.FIRST - 258)) | (1 << (tsqlParser.FOLLOWING - 258)) | (1 << (tsqlParser.FORCE - 258)) | (1 << (tsqlParser.FORCED - 258)) | (1 << (tsqlParser.FORWARD_ONLY - 258)) | (1 << (tsqlParser.FULLSCAN - 258)) | (1 << (tsqlParser.GLOBAL - 258)) | (1 << (tsqlParser.GO - 258)) | (1 << (tsqlParser.GROUPING - 258)) | (1 << (tsqlParser.GROUPING_ID - 258)) | (1 << (tsqlParser.HASH - 258)) | (1 << (tsqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX - 258)) | (1 << (tsqlParser.IMPERSONATE - 258)) | (1 << (tsqlParser.INSENSITIVE - 258)) | (1 << (tsqlParser.INSERTED - 258)) | (1 << (tsqlParser.ISOLATION - 258)) | (1 << (tsqlParser.KEEP - 258)) | (1 << (tsqlParser.KEEPFIXED - 258)) | (1 << (tsqlParser.KEYSET - 258)) | (1 << (tsqlParser.LAST - 258)) | (1 << (tsqlParser.LEVEL - 258)) | (1 << (tsqlParser.LOCAL - 258)) | (1 << (tsqlParser.LOCK_ESCALATION - 258)) | (1 << (tsqlParser.LOGIN - 258)) | (1 << (tsqlParser.LOOP - 258)))) !== 0) || ((((_la - 290)) & ~0x1f) == 0 && ((1 << (_la - 290)) & ((1 << (tsqlParser.MARK - 290)) | (1 << (tsqlParser.MAX - 290)) | (1 << (tsqlParser.MAXDOP - 290)) | (1 << (tsqlParser.MAXRECURSION - 290)) | (1 << (tsqlParser.MIN - 290)) | (1 << (tsqlParser.MODIFY - 290)) | (1 << (tsqlParser.NAME - 290)) | (1 << (tsqlParser.NEXT - 290)) | (1 << (tsqlParser.NOCOUNT - 290)) | (1 << (tsqlParser.NOEXPAND - 290)) | (1 << (tsqlParser.NORECOMPUTE - 290)) | (1 << (tsqlParser.NTILE - 290)) | (1 << (tsqlParser.NUMBER - 290)) | (1 << (tsqlParser.OFFSET - 290)) | (1 << (tsqlParser.ONLINE - 290)) | (1 << (tsqlParser.ONLY - 290)) | (1 << (tsqlParser.OPTIMISTIC - 290)) | (1 << (tsqlParser.OPTIMIZE - 290)) | (1 << (tsqlParser.OUT - 290)))) !== 0) || ((((_la - 322)) & ~0x1f) == 0 && ((1 << (_la - 322)) & ((1 << (tsqlParser.OUTPUT - 322)) | (1 << (tsqlParser.OWNER - 322)) | (1 << (tsqlParser.PARAMETERIZATION - 322)) | (1 << (tsqlParser.PARTITION - 322)) | (1 << (tsqlParser.PATH - 322)) | (1 << (tsqlParser.PRECEDING - 322)) | (1 << (tsqlParser.PRIOR - 322)) | (1 << (tsqlParser.PRIVILEGES - 322)) | (1 << (tsqlParser.RANGE - 322)) | (1 << (tsqlParser.RANK - 322)) | (1 << (tsqlParser.READONLY - 322)) | (1 << (tsqlParser.READ_ONLY - 322)) | (1 << (tsqlParser.RECOMPILE - 322)) | (1 << (tsqlParser.RELATIVE - 322)) | (1 << (tsqlParser.REMOTE - 322)) | (1 << (tsqlParser.REPEATABLE - 322)) | (1 << (tsqlParser.ROBUST - 322)) | (1 << (tsqlParser.ROOT - 322)) | (1 << (tsqlParser.ROW - 322)) | (1 << (tsqlParser.ROWGUID - 322)) | (1 << (tsqlParser.ROWS - 322)) | (1 << (tsqlParser.ROW_NUMBER - 322)) | (1 << (tsqlParser.SAMPLE - 322)) | (1 << (tsqlParser.SCHEMABINDING - 322)) | (1 << (tsqlParser.SCROLL - 322)))) !== 0) || ((((_la - 354)) & ~0x1f) == 0 && ((1 << (_la - 354)) & ((1 << (tsqlParser.SCROLL_LOCKS - 354)) | (1 << (tsqlParser.SELF - 354)) | (1 << (tsqlParser.SERIALIZABLE - 354)) | (1 << (tsqlParser.SIMPLE - 354)) | (1 << (tsqlParser.SNAPSHOT - 354)) | (1 << (tsqlParser.SPATIAL_WINDOW_MAX_CELLS - 354)) | (1 << (tsqlParser.STATIC - 354)) | (1 << (tsqlParser.STATS_STREAM - 354)) | (1 << (tsqlParser.STDEV - 354)) | (1 << (tsqlParser.STDEVP - 354)) | (1 << (tsqlParser.SUM - 354)) | (1 << (tsqlParser.TEXTIMAGE_ON - 354)) | (1 << (tsqlParser.THROW - 354)) | (1 << (tsqlParser.TIES - 354)) | (1 << (tsqlParser.TIME - 354)) | (1 << (tsqlParser.TRY - 354)) | (1 << (tsqlParser.TYPE - 354)) | (1 << (tsqlParser.TYPE_WARNING - 354)) | (1 << (tsqlParser.UNBOUNDED - 354)) | (1 << (tsqlParser.UNCOMMITTED - 354)) | (1 << (tsqlParser.UNKNOWN - 354)))) !== 0) || ((((_la - 387)) & ~0x1f) == 0 && ((1 << (_la - 387)) & ((1 << (tsqlParser.USING - 387)) | (1 << (tsqlParser.VAR - 387)) | (1 << (tsqlParser.VARP - 387)) | (1 << (tsqlParser.VIEWS - 387)) | (1 << (tsqlParser.VIEW_METADATA - 387)) | (1 << (tsqlParser.WORK - 387)) | (1 << (tsqlParser.XML - 387)) | (1 << (tsqlParser.XMLNAMESPACES - 387)) | (1 << (tsqlParser.DOUBLE_QUOTE_ID - 387)) | (1 << (tsqlParser.SQUARE_BRACKET_ID - 387)) | (1 << (tsqlParser.ID - 387)))) !== 0)) {
                this.state = 869;
                localctx.schema = this.id();
            }

            this.state = 872;
            this.match(tsqlParser.DOT);

        } else if(la_===2) {
            this.state = 874;
            localctx.schema = this.id();
            this.state = 875;
            this.match(tsqlParser.DOT);

        }
        this.state = 879;
        localctx.procedure = this.id();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Full_column_nameContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = tsqlParser.RULE_full_column_name;
    return this;
}

Full_column_nameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Full_column_nameContext.prototype.constructor = Full_column_nameContext;

Full_column_nameContext.prototype.id = function() {
    return this.getTypedRuleContext(IdContext,0);
};

Full_column_nameContext.prototype.table_name = function() {
    return this.getTypedRuleContext(Table_nameContext,0);
};

Full_column_nameContext.prototype.enterRule = function(listener) {
    if(listener instanceof tsqlListener ) {
        listener.enterFull_column_name(this);
	}
};

Full_column_nameContext.prototype.exitRule = function(listener) {
    if(listener instanceof tsqlListener ) {
        listener.exitFull_column_name(this);
	}
};




tsqlParser.Full_column_nameContext = Full_column_nameContext;

tsqlParser.prototype.full_column_name = function() {

    var localctx = new Full_column_nameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 106, tsqlParser.RULE_full_column_name);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 884;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,99,this._ctx);
        if(la_===1) {
            this.state = 881;
            this.table_name();
            this.state = 882;
            this.match(tsqlParser.DOT);

        }
        this.state = 886;
        this.id();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Column_name_listContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = tsqlParser.RULE_column_name_list;
    return this;
}

Column_name_listContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Column_name_listContext.prototype.constructor = Column_name_listContext;

Column_name_listContext.prototype.id = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(IdContext);
    } else {
        return this.getTypedRuleContext(IdContext,i);
    }
};

Column_name_listContext.prototype.enterRule = function(listener) {
    if(listener instanceof tsqlListener ) {
        listener.enterColumn_name_list(this);
	}
};

Column_name_listContext.prototype.exitRule = function(listener) {
    if(listener instanceof tsqlListener ) {
        listener.exitColumn_name_list(this);
	}
};




tsqlParser.Column_name_listContext = Column_name_listContext;

tsqlParser.prototype.column_name_list = function() {

    var localctx = new Column_name_listContext(this, this._ctx, this.state);
    this.enterRule(localctx, 108, tsqlParser.RULE_column_name_list);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 888;
        this.id();
        this.state = 893;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===tsqlParser.COMMA) {
            this.state = 889;
            this.match(tsqlParser.COMMA);
            this.state = 890;
            this.id();
            this.state = 895;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Null_notnullContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = tsqlParser.RULE_null_notnull;
    return this;
}

Null_notnullContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Null_notnullContext.prototype.constructor = Null_notnullContext;

Null_notnullContext.prototype.NULL = function() {
    return this.getToken(tsqlParser.NULL, 0);
};

Null_notnullContext.prototype.NOT = function() {
    return this.getToken(tsqlParser.NOT, 0);
};

Null_notnullContext.prototype.enterRule = function(listener) {
    if(listener instanceof tsqlListener ) {
        listener.enterNull_notnull(this);
	}
};

Null_notnullContext.prototype.exitRule = function(listener) {
    if(listener instanceof tsqlListener ) {
        listener.exitNull_notnull(this);
	}
};




tsqlParser.Null_notnullContext = Null_notnullContext;

tsqlParser.prototype.null_notnull = function() {

    var localctx = new Null_notnullContext(this, this._ctx, this.state);
    this.enterRule(localctx, 110, tsqlParser.RULE_null_notnull);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 897;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===tsqlParser.NOT) {
            this.state = 896;
            this.match(tsqlParser.NOT);
        }

        this.state = 899;
        this.match(tsqlParser.NULL);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Scalar_function_nameContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = tsqlParser.RULE_scalar_function_name;
    return this;
}

Scalar_function_nameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Scalar_function_nameContext.prototype.constructor = Scalar_function_nameContext;

Scalar_function_nameContext.prototype.func_proc_name = function() {
    return this.getTypedRuleContext(Func_proc_nameContext,0);
};

Scalar_function_nameContext.prototype.RIGHT = function() {
    return this.getToken(tsqlParser.RIGHT, 0);
};

Scalar_function_nameContext.prototype.LEFT = function() {
    return this.getToken(tsqlParser.LEFT, 0);
};

Scalar_function_nameContext.prototype.BINARY_CHECKSUM = function() {
    return this.getToken(tsqlParser.BINARY_CHECKSUM, 0);
};

Scalar_function_nameContext.prototype.CHECKSUM = function() {
    return this.getToken(tsqlParser.CHECKSUM, 0);
};

Scalar_function_nameContext.prototype.enterRule = function(listener) {
    if(listener instanceof tsqlListener ) {
        listener.enterScalar_function_name(this);
	}
};

Scalar_function_nameContext.prototype.exitRule = function(listener) {
    if(listener instanceof tsqlListener ) {
        listener.exitScalar_function_name(this);
	}
};




tsqlParser.Scalar_function_nameContext = Scalar_function_nameContext;

tsqlParser.prototype.scalar_function_name = function() {

    var localctx = new Scalar_function_nameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 112, tsqlParser.RULE_scalar_function_name);
    try {
        this.state = 906;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case tsqlParser.FORCESEEK:
        case tsqlParser.ABSOLUTE:
        case tsqlParser.APPLY:
        case tsqlParser.AUTO:
        case tsqlParser.AVG:
        case tsqlParser.BASE64:
        case tsqlParser.CALLER:
        case tsqlParser.CAST:
        case tsqlParser.CATCH:
        case tsqlParser.CHECKSUM_AGG:
        case tsqlParser.COMMITTED:
        case tsqlParser.CONCAT:
        case tsqlParser.CONTROL:
        case tsqlParser.COOKIE:
        case tsqlParser.COUNT:
        case tsqlParser.COUNT_BIG:
        case tsqlParser.DELAY:
        case tsqlParser.DELETED:
        case tsqlParser.DENSE_RANK:
        case tsqlParser.DISABLE:
        case tsqlParser.DYNAMIC:
        case tsqlParser.ENCRYPTION:
        case tsqlParser.EXPAND:
        case tsqlParser.FAST:
        case tsqlParser.FAST_FORWARD:
        case tsqlParser.FIRST:
        case tsqlParser.FOLLOWING:
        case tsqlParser.FORCE:
        case tsqlParser.FORCED:
        case tsqlParser.FORWARD_ONLY:
        case tsqlParser.FULLSCAN:
        case tsqlParser.GLOBAL:
        case tsqlParser.GO:
        case tsqlParser.GROUPING:
        case tsqlParser.GROUPING_ID:
        case tsqlParser.HASH:
        case tsqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
        case tsqlParser.IMPERSONATE:
        case tsqlParser.INSENSITIVE:
        case tsqlParser.INSERTED:
        case tsqlParser.ISOLATION:
        case tsqlParser.KEEP:
        case tsqlParser.KEEPFIXED:
        case tsqlParser.KEYSET:
        case tsqlParser.LAST:
        case tsqlParser.LEVEL:
        case tsqlParser.LOCAL:
        case tsqlParser.LOCK_ESCALATION:
        case tsqlParser.LOGIN:
        case tsqlParser.LOOP:
        case tsqlParser.MARK:
        case tsqlParser.MAX:
        case tsqlParser.MAXDOP:
        case tsqlParser.MAXRECURSION:
        case tsqlParser.MIN:
        case tsqlParser.MODIFY:
        case tsqlParser.NAME:
        case tsqlParser.NEXT:
        case tsqlParser.NOCOUNT:
        case tsqlParser.NOEXPAND:
        case tsqlParser.NORECOMPUTE:
        case tsqlParser.NTILE:
        case tsqlParser.NUMBER:
        case tsqlParser.OFFSET:
        case tsqlParser.ONLINE:
        case tsqlParser.ONLY:
        case tsqlParser.OPTIMISTIC:
        case tsqlParser.OPTIMIZE:
        case tsqlParser.OUT:
        case tsqlParser.OUTPUT:
        case tsqlParser.OWNER:
        case tsqlParser.PARAMETERIZATION:
        case tsqlParser.PARTITION:
        case tsqlParser.PATH:
        case tsqlParser.PRECEDING:
        case tsqlParser.PRIOR:
        case tsqlParser.PRIVILEGES:
        case tsqlParser.RANGE:
        case tsqlParser.RANK:
        case tsqlParser.READONLY:
        case tsqlParser.READ_ONLY:
        case tsqlParser.RECOMPILE:
        case tsqlParser.RELATIVE:
        case tsqlParser.REMOTE:
        case tsqlParser.REPEATABLE:
        case tsqlParser.ROBUST:
        case tsqlParser.ROOT:
        case tsqlParser.ROW:
        case tsqlParser.ROWGUID:
        case tsqlParser.ROWS:
        case tsqlParser.ROW_NUMBER:
        case tsqlParser.SAMPLE:
        case tsqlParser.SCHEMABINDING:
        case tsqlParser.SCROLL:
        case tsqlParser.SCROLL_LOCKS:
        case tsqlParser.SELF:
        case tsqlParser.SERIALIZABLE:
        case tsqlParser.SIMPLE:
        case tsqlParser.SNAPSHOT:
        case tsqlParser.SPATIAL_WINDOW_MAX_CELLS:
        case tsqlParser.STATIC:
        case tsqlParser.STATS_STREAM:
        case tsqlParser.STDEV:
        case tsqlParser.STDEVP:
        case tsqlParser.SUM:
        case tsqlParser.TEXTIMAGE_ON:
        case tsqlParser.THROW:
        case tsqlParser.TIES:
        case tsqlParser.TIME:
        case tsqlParser.TRY:
        case tsqlParser.TYPE:
        case tsqlParser.TYPE_WARNING:
        case tsqlParser.UNBOUNDED:
        case tsqlParser.UNCOMMITTED:
        case tsqlParser.UNKNOWN:
        case tsqlParser.USING:
        case tsqlParser.VAR:
        case tsqlParser.VARP:
        case tsqlParser.VIEWS:
        case tsqlParser.VIEW_METADATA:
        case tsqlParser.WORK:
        case tsqlParser.XML:
        case tsqlParser.XMLNAMESPACES:
        case tsqlParser.DOUBLE_QUOTE_ID:
        case tsqlParser.SQUARE_BRACKET_ID:
        case tsqlParser.ID:
            this.enterOuterAlt(localctx, 1);
            this.state = 901;
            this.func_proc_name();
            break;
        case tsqlParser.RIGHT:
            this.enterOuterAlt(localctx, 2);
            this.state = 902;
            this.match(tsqlParser.RIGHT);
            break;
        case tsqlParser.LEFT:
            this.enterOuterAlt(localctx, 3);
            this.state = 903;
            this.match(tsqlParser.LEFT);
            break;
        case tsqlParser.BINARY_CHECKSUM:
            this.enterOuterAlt(localctx, 4);
            this.state = 904;
            this.match(tsqlParser.BINARY_CHECKSUM);
            break;
        case tsqlParser.CHECKSUM:
            this.enterOuterAlt(localctx, 5);
            this.state = 905;
            this.match(tsqlParser.CHECKSUM);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Data_typeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = tsqlParser.RULE_data_type;
    return this;
}

Data_typeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Data_typeContext.prototype.constructor = Data_typeContext;

Data_typeContext.prototype.BIGINT = function() {
    return this.getToken(tsqlParser.BIGINT, 0);
};

Data_typeContext.prototype.BINARY = function() {
    return this.getToken(tsqlParser.BINARY, 0);
};

Data_typeContext.prototype.DECIMAL = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(tsqlParser.DECIMAL);
    } else {
        return this.getToken(tsqlParser.DECIMAL, i);
    }
};


Data_typeContext.prototype.BIT = function() {
    return this.getToken(tsqlParser.BIT, 0);
};

Data_typeContext.prototype.CHAR = function() {
    return this.getToken(tsqlParser.CHAR, 0);
};

Data_typeContext.prototype.DATE = function() {
    return this.getToken(tsqlParser.DATE, 0);
};

Data_typeContext.prototype.DATETIME = function() {
    return this.getToken(tsqlParser.DATETIME, 0);
};

Data_typeContext.prototype.DATETIME2 = function() {
    return this.getToken(tsqlParser.DATETIME2, 0);
};

Data_typeContext.prototype.DATETIMEOFFSET = function() {
    return this.getToken(tsqlParser.DATETIMEOFFSET, 0);
};

Data_typeContext.prototype.FLOAT = function() {
    return this.getToken(tsqlParser.FLOAT, 0);
};

Data_typeContext.prototype.GEOGRAPHY = function() {
    return this.getToken(tsqlParser.GEOGRAPHY, 0);
};

Data_typeContext.prototype.GEOMETRY = function() {
    return this.getToken(tsqlParser.GEOMETRY, 0);
};

Data_typeContext.prototype.HIERARCHYID = function() {
    return this.getToken(tsqlParser.HIERARCHYID, 0);
};

Data_typeContext.prototype.IMAGE = function() {
    return this.getToken(tsqlParser.IMAGE, 0);
};

Data_typeContext.prototype.INT = function() {
    return this.getToken(tsqlParser.INT, 0);
};

Data_typeContext.prototype.MONEY = function() {
    return this.getToken(tsqlParser.MONEY, 0);
};

Data_typeContext.prototype.NCHAR = function() {
    return this.getToken(tsqlParser.NCHAR, 0);
};

Data_typeContext.prototype.NTEXT = function() {
    return this.getToken(tsqlParser.NTEXT, 0);
};

Data_typeContext.prototype.NUMERIC = function() {
    return this.getToken(tsqlParser.NUMERIC, 0);
};

Data_typeContext.prototype.NVARCHAR = function() {
    return this.getToken(tsqlParser.NVARCHAR, 0);
};

Data_typeContext.prototype.MAX = function() {
    return this.getToken(tsqlParser.MAX, 0);
};

Data_typeContext.prototype.REAL = function() {
    return this.getToken(tsqlParser.REAL, 0);
};

Data_typeContext.prototype.SMALLDATETIME = function() {
    return this.getToken(tsqlParser.SMALLDATETIME, 0);
};

Data_typeContext.prototype.SMALLINT = function() {
    return this.getToken(tsqlParser.SMALLINT, 0);
};

Data_typeContext.prototype.SMALLMONEY = function() {
    return this.getToken(tsqlParser.SMALLMONEY, 0);
};

Data_typeContext.prototype.SQL_VARIANT = function() {
    return this.getToken(tsqlParser.SQL_VARIANT, 0);
};

Data_typeContext.prototype.TEXT = function() {
    return this.getToken(tsqlParser.TEXT, 0);
};

Data_typeContext.prototype.TIME = function() {
    return this.getToken(tsqlParser.TIME, 0);
};

Data_typeContext.prototype.TIMESTAMP = function() {
    return this.getToken(tsqlParser.TIMESTAMP, 0);
};

Data_typeContext.prototype.TINYINT = function() {
    return this.getToken(tsqlParser.TINYINT, 0);
};

Data_typeContext.prototype.UNIQUEIDENTIFIER = function() {
    return this.getToken(tsqlParser.UNIQUEIDENTIFIER, 0);
};

Data_typeContext.prototype.VARBINARY = function() {
    return this.getToken(tsqlParser.VARBINARY, 0);
};

Data_typeContext.prototype.VARCHAR = function() {
    return this.getToken(tsqlParser.VARCHAR, 0);
};

Data_typeContext.prototype.XML = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(tsqlParser.XML);
    } else {
        return this.getToken(tsqlParser.XML, i);
    }
};


Data_typeContext.prototype.id = function() {
    return this.getTypedRuleContext(IdContext,0);
};

Data_typeContext.prototype.IDENTITY = function() {
    return this.getToken(tsqlParser.IDENTITY, 0);
};

Data_typeContext.prototype.enterRule = function(listener) {
    if(listener instanceof tsqlListener ) {
        listener.enterData_type(this);
	}
};

Data_typeContext.prototype.exitRule = function(listener) {
    if(listener instanceof tsqlListener ) {
        listener.exitData_type(this);
	}
};




tsqlParser.Data_typeContext = Data_typeContext;

tsqlParser.prototype.data_type = function() {

    var localctx = new Data_typeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 114, tsqlParser.RULE_data_type);
    var _la = 0; // Token type
    try {
        this.state = 996;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,107,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 908;
            this.match(tsqlParser.BIGINT);
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 909;
            this.match(tsqlParser.BINARY);
            this.state = 910;
            this.match(tsqlParser.LR_BRACKET);
            this.state = 911;
            this.match(tsqlParser.DECIMAL);
            this.state = 912;
            this.match(tsqlParser.RR_BRACKET);
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 913;
            this.match(tsqlParser.BIT);
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 914;
            this.match(tsqlParser.CHAR);
            this.state = 915;
            this.match(tsqlParser.LR_BRACKET);
            this.state = 916;
            this.match(tsqlParser.DECIMAL);
            this.state = 917;
            this.match(tsqlParser.RR_BRACKET);
            break;

        case 5:
            this.enterOuterAlt(localctx, 5);
            this.state = 918;
            this.match(tsqlParser.DATE);
            break;

        case 6:
            this.enterOuterAlt(localctx, 6);
            this.state = 919;
            this.match(tsqlParser.DATETIME);
            break;

        case 7:
            this.enterOuterAlt(localctx, 7);
            this.state = 920;
            this.match(tsqlParser.DATETIME2);
            break;

        case 8:
            this.enterOuterAlt(localctx, 8);
            this.state = 921;
            this.match(tsqlParser.DATETIMEOFFSET);
            this.state = 922;
            this.match(tsqlParser.LR_BRACKET);
            this.state = 923;
            this.match(tsqlParser.DECIMAL);
            this.state = 924;
            this.match(tsqlParser.RR_BRACKET);
            break;

        case 9:
            this.enterOuterAlt(localctx, 9);
            this.state = 925;
            this.match(tsqlParser.DECIMAL);
            this.state = 926;
            this.match(tsqlParser.LR_BRACKET);
            this.state = 927;
            this.match(tsqlParser.DECIMAL);
            this.state = 928;
            this.match(tsqlParser.COMMA);
            this.state = 929;
            this.match(tsqlParser.DECIMAL);
            this.state = 930;
            this.match(tsqlParser.RR_BRACKET);
            break;

        case 10:
            this.enterOuterAlt(localctx, 10);
            this.state = 931;
            this.match(tsqlParser.FLOAT);
            break;

        case 11:
            this.enterOuterAlt(localctx, 11);
            this.state = 932;
            this.match(tsqlParser.GEOGRAPHY);
            break;

        case 12:
            this.enterOuterAlt(localctx, 12);
            this.state = 933;
            this.match(tsqlParser.GEOMETRY);
            break;

        case 13:
            this.enterOuterAlt(localctx, 13);
            this.state = 934;
            this.match(tsqlParser.HIERARCHYID);
            break;

        case 14:
            this.enterOuterAlt(localctx, 14);
            this.state = 935;
            this.match(tsqlParser.IMAGE);
            break;

        case 15:
            this.enterOuterAlt(localctx, 15);
            this.state = 936;
            this.match(tsqlParser.INT);
            break;

        case 16:
            this.enterOuterAlt(localctx, 16);
            this.state = 937;
            this.match(tsqlParser.MONEY);
            break;

        case 17:
            this.enterOuterAlt(localctx, 17);
            this.state = 938;
            this.match(tsqlParser.NCHAR);
            this.state = 939;
            this.match(tsqlParser.LR_BRACKET);
            this.state = 940;
            this.match(tsqlParser.DECIMAL);
            this.state = 941;
            this.match(tsqlParser.RR_BRACKET);
            break;

        case 18:
            this.enterOuterAlt(localctx, 18);
            this.state = 942;
            this.match(tsqlParser.NTEXT);
            break;

        case 19:
            this.enterOuterAlt(localctx, 19);
            this.state = 943;
            this.match(tsqlParser.NUMERIC);
            this.state = 944;
            this.match(tsqlParser.LR_BRACKET);
            this.state = 945;
            this.match(tsqlParser.DECIMAL);
            this.state = 946;
            this.match(tsqlParser.COMMA);
            this.state = 947;
            this.match(tsqlParser.DECIMAL);
            this.state = 948;
            this.match(tsqlParser.RR_BRACKET);
            break;

        case 20:
            this.enterOuterAlt(localctx, 20);
            this.state = 949;
            this.match(tsqlParser.NVARCHAR);
            this.state = 950;
            this.match(tsqlParser.LR_BRACKET);
            this.state = 951;
            this.match(tsqlParser.DECIMAL);
            break;

        case 21:
            this.enterOuterAlt(localctx, 21);
            this.state = 952;
            this.match(tsqlParser.MAX);
            this.state = 953;
            this.match(tsqlParser.RR_BRACKET);
            break;

        case 22:
            this.enterOuterAlt(localctx, 22);
            this.state = 954;
            this.match(tsqlParser.REAL);
            break;

        case 23:
            this.enterOuterAlt(localctx, 23);
            this.state = 955;
            this.match(tsqlParser.SMALLDATETIME);
            break;

        case 24:
            this.enterOuterAlt(localctx, 24);
            this.state = 956;
            this.match(tsqlParser.SMALLINT);
            break;

        case 25:
            this.enterOuterAlt(localctx, 25);
            this.state = 957;
            this.match(tsqlParser.SMALLMONEY);
            break;

        case 26:
            this.enterOuterAlt(localctx, 26);
            this.state = 958;
            this.match(tsqlParser.SQL_VARIANT);
            break;

        case 27:
            this.enterOuterAlt(localctx, 27);
            this.state = 959;
            this.match(tsqlParser.TEXT);
            break;

        case 28:
            this.enterOuterAlt(localctx, 28);
            this.state = 960;
            this.match(tsqlParser.TIME);
            this.state = 961;
            this.match(tsqlParser.LR_BRACKET);
            this.state = 962;
            this.match(tsqlParser.DECIMAL);
            this.state = 963;
            this.match(tsqlParser.RR_BRACKET);
            break;

        case 29:
            this.enterOuterAlt(localctx, 29);
            this.state = 964;
            this.match(tsqlParser.TIMESTAMP);
            break;

        case 30:
            this.enterOuterAlt(localctx, 30);
            this.state = 965;
            this.match(tsqlParser.TINYINT);
            break;

        case 31:
            this.enterOuterAlt(localctx, 31);
            this.state = 966;
            this.match(tsqlParser.UNIQUEIDENTIFIER);
            break;

        case 32:
            this.enterOuterAlt(localctx, 32);
            this.state = 967;
            this.match(tsqlParser.VARBINARY);
            this.state = 968;
            this.match(tsqlParser.LR_BRACKET);
            this.state = 969;
            this.match(tsqlParser.DECIMAL);
            break;

        case 33:
            this.enterOuterAlt(localctx, 33);
            this.state = 970;
            this.match(tsqlParser.MAX);
            this.state = 971;
            this.match(tsqlParser.RR_BRACKET);
            break;

        case 34:
            this.enterOuterAlt(localctx, 34);
            this.state = 972;
            this.match(tsqlParser.VARCHAR);
            this.state = 973;
            this.match(tsqlParser.LR_BRACKET);
            this.state = 974;
            this.match(tsqlParser.DECIMAL);
            break;

        case 35:
            this.enterOuterAlt(localctx, 35);
            this.state = 975;
            this.match(tsqlParser.MAX);
            this.state = 976;
            this.match(tsqlParser.RR_BRACKET);
            break;

        case 36:
            this.enterOuterAlt(localctx, 36);
            this.state = 980;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===tsqlParser.XML) {
                this.state = 977;
                this.match(tsqlParser.XML);
                this.state = 982;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            break;

        case 37:
            this.enterOuterAlt(localctx, 37);
            this.state = 983;
            this.id();
            this.state = 985;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===tsqlParser.IDENTITY) {
                this.state = 984;
                this.match(tsqlParser.IDENTITY);
            }

            this.state = 994;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===tsqlParser.LR_BRACKET) {
                this.state = 987;
                this.match(tsqlParser.LR_BRACKET);
                this.state = 988;
                _la = this._input.LA(1);
                if(!(_la===tsqlParser.MAX || _la===tsqlParser.DECIMAL)) {
                this._errHandler.recoverInline(this);
                }
                else {
                	this._errHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 991;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if(_la===tsqlParser.COMMA) {
                    this.state = 989;
                    this.match(tsqlParser.COMMA);
                    this.state = 990;
                    this.match(tsqlParser.DECIMAL);
                }

                this.state = 993;
                this.match(tsqlParser.RR_BRACKET);
            }

            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Default_valueContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = tsqlParser.RULE_default_value;
    return this;
}

Default_valueContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Default_valueContext.prototype.constructor = Default_valueContext;

Default_valueContext.prototype.NULL = function() {
    return this.getToken(tsqlParser.NULL, 0);
};

Default_valueContext.prototype.constant = function() {
    return this.getTypedRuleContext(ConstantContext,0);
};

Default_valueContext.prototype.enterRule = function(listener) {
    if(listener instanceof tsqlListener ) {
        listener.enterDefault_value(this);
	}
};

Default_valueContext.prototype.exitRule = function(listener) {
    if(listener instanceof tsqlListener ) {
        listener.exitDefault_value(this);
	}
};




tsqlParser.Default_valueContext = Default_valueContext;

tsqlParser.prototype.default_value = function() {

    var localctx = new Default_valueContext(this, this._ctx, this.state);
    this.enterRule(localctx, 116, tsqlParser.RULE_default_value);
    try {
        this.state = 1000;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case tsqlParser.NULL:
            this.enterOuterAlt(localctx, 1);
            this.state = 998;
            this.match(tsqlParser.NULL);
            break;
        case tsqlParser.DECIMAL:
        case tsqlParser.STRING:
        case tsqlParser.BINARY:
        case tsqlParser.FLOAT:
        case tsqlParser.REAL:
        case tsqlParser.DOLLAR:
        case tsqlParser.PLUS:
        case tsqlParser.MINUS:
            this.enterOuterAlt(localctx, 2);
            this.state = 999;
            this.constant();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ConstantContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = tsqlParser.RULE_constant;
    this.dollar = null; // Token
    return this;
}

ConstantContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ConstantContext.prototype.constructor = ConstantContext;

ConstantContext.prototype.STRING = function() {
    return this.getToken(tsqlParser.STRING, 0);
};

ConstantContext.prototype.BINARY = function() {
    return this.getToken(tsqlParser.BINARY, 0);
};

ConstantContext.prototype.DECIMAL = function() {
    return this.getToken(tsqlParser.DECIMAL, 0);
};

ConstantContext.prototype.sign = function() {
    return this.getTypedRuleContext(SignContext,0);
};

ConstantContext.prototype.REAL = function() {
    return this.getToken(tsqlParser.REAL, 0);
};

ConstantContext.prototype.FLOAT = function() {
    return this.getToken(tsqlParser.FLOAT, 0);
};

ConstantContext.prototype.enterRule = function(listener) {
    if(listener instanceof tsqlListener ) {
        listener.enterConstant(this);
	}
};

ConstantContext.prototype.exitRule = function(listener) {
    if(listener instanceof tsqlListener ) {
        listener.exitConstant(this);
	}
};




tsqlParser.ConstantContext = ConstantContext;

tsqlParser.prototype.constant = function() {

    var localctx = new ConstantContext(this, this._ctx, this.state);
    this.enterRule(localctx, 118, tsqlParser.RULE_constant);
    var _la = 0; // Token type
    try {
        this.state = 1017;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,112,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 1002;
            this.match(tsqlParser.STRING);
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 1003;
            this.match(tsqlParser.BINARY);
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 1005;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===tsqlParser.PLUS || _la===tsqlParser.MINUS) {
                this.state = 1004;
                this.sign();
            }

            this.state = 1007;
            this.match(tsqlParser.DECIMAL);
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 1009;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===tsqlParser.PLUS || _la===tsqlParser.MINUS) {
                this.state = 1008;
                this.sign();
            }

            this.state = 1011;
            _la = this._input.LA(1);
            if(!(_la===tsqlParser.FLOAT || _la===tsqlParser.REAL)) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            break;

        case 5:
            this.enterOuterAlt(localctx, 5);
            this.state = 1013;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===tsqlParser.PLUS || _la===tsqlParser.MINUS) {
                this.state = 1012;
                this.sign();
            }

            this.state = 1015;
            localctx.dollar = this.match(tsqlParser.DOLLAR);
            this.state = 1016;
            _la = this._input.LA(1);
            if(!(_la===tsqlParser.DECIMAL || _la===tsqlParser.FLOAT)) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function SignContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = tsqlParser.RULE_sign;
    return this;
}

SignContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SignContext.prototype.constructor = SignContext;


SignContext.prototype.enterRule = function(listener) {
    if(listener instanceof tsqlListener ) {
        listener.enterSign(this);
	}
};

SignContext.prototype.exitRule = function(listener) {
    if(listener instanceof tsqlListener ) {
        listener.exitSign(this);
	}
};




tsqlParser.SignContext = SignContext;

tsqlParser.prototype.sign = function() {

    var localctx = new SignContext(this, this._ctx, this.state);
    this.enterRule(localctx, 120, tsqlParser.RULE_sign);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1019;
        _la = this._input.LA(1);
        if(!(_la===tsqlParser.PLUS || _la===tsqlParser.MINUS)) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function IdContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = tsqlParser.RULE_id;
    return this;
}

IdContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
IdContext.prototype.constructor = IdContext;

IdContext.prototype.simple_id = function() {
    return this.getTypedRuleContext(Simple_idContext,0);
};

IdContext.prototype.DOUBLE_QUOTE_ID = function() {
    return this.getToken(tsqlParser.DOUBLE_QUOTE_ID, 0);
};

IdContext.prototype.SQUARE_BRACKET_ID = function() {
    return this.getToken(tsqlParser.SQUARE_BRACKET_ID, 0);
};

IdContext.prototype.enterRule = function(listener) {
    if(listener instanceof tsqlListener ) {
        listener.enterId(this);
	}
};

IdContext.prototype.exitRule = function(listener) {
    if(listener instanceof tsqlListener ) {
        listener.exitId(this);
	}
};




tsqlParser.IdContext = IdContext;

tsqlParser.prototype.id = function() {

    var localctx = new IdContext(this, this._ctx, this.state);
    this.enterRule(localctx, 122, tsqlParser.RULE_id);
    try {
        this.state = 1024;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case tsqlParser.FORCESEEK:
        case tsqlParser.ABSOLUTE:
        case tsqlParser.APPLY:
        case tsqlParser.AUTO:
        case tsqlParser.AVG:
        case tsqlParser.BASE64:
        case tsqlParser.CALLER:
        case tsqlParser.CAST:
        case tsqlParser.CATCH:
        case tsqlParser.CHECKSUM_AGG:
        case tsqlParser.COMMITTED:
        case tsqlParser.CONCAT:
        case tsqlParser.CONTROL:
        case tsqlParser.COOKIE:
        case tsqlParser.COUNT:
        case tsqlParser.COUNT_BIG:
        case tsqlParser.DELAY:
        case tsqlParser.DELETED:
        case tsqlParser.DENSE_RANK:
        case tsqlParser.DISABLE:
        case tsqlParser.DYNAMIC:
        case tsqlParser.ENCRYPTION:
        case tsqlParser.EXPAND:
        case tsqlParser.FAST:
        case tsqlParser.FAST_FORWARD:
        case tsqlParser.FIRST:
        case tsqlParser.FOLLOWING:
        case tsqlParser.FORCE:
        case tsqlParser.FORCED:
        case tsqlParser.FORWARD_ONLY:
        case tsqlParser.FULLSCAN:
        case tsqlParser.GLOBAL:
        case tsqlParser.GO:
        case tsqlParser.GROUPING:
        case tsqlParser.GROUPING_ID:
        case tsqlParser.HASH:
        case tsqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
        case tsqlParser.IMPERSONATE:
        case tsqlParser.INSENSITIVE:
        case tsqlParser.INSERTED:
        case tsqlParser.ISOLATION:
        case tsqlParser.KEEP:
        case tsqlParser.KEEPFIXED:
        case tsqlParser.KEYSET:
        case tsqlParser.LAST:
        case tsqlParser.LEVEL:
        case tsqlParser.LOCAL:
        case tsqlParser.LOCK_ESCALATION:
        case tsqlParser.LOGIN:
        case tsqlParser.LOOP:
        case tsqlParser.MARK:
        case tsqlParser.MAX:
        case tsqlParser.MAXDOP:
        case tsqlParser.MAXRECURSION:
        case tsqlParser.MIN:
        case tsqlParser.MODIFY:
        case tsqlParser.NAME:
        case tsqlParser.NEXT:
        case tsqlParser.NOCOUNT:
        case tsqlParser.NOEXPAND:
        case tsqlParser.NORECOMPUTE:
        case tsqlParser.NTILE:
        case tsqlParser.NUMBER:
        case tsqlParser.OFFSET:
        case tsqlParser.ONLINE:
        case tsqlParser.ONLY:
        case tsqlParser.OPTIMISTIC:
        case tsqlParser.OPTIMIZE:
        case tsqlParser.OUT:
        case tsqlParser.OUTPUT:
        case tsqlParser.OWNER:
        case tsqlParser.PARAMETERIZATION:
        case tsqlParser.PARTITION:
        case tsqlParser.PATH:
        case tsqlParser.PRECEDING:
        case tsqlParser.PRIOR:
        case tsqlParser.PRIVILEGES:
        case tsqlParser.RANGE:
        case tsqlParser.RANK:
        case tsqlParser.READONLY:
        case tsqlParser.READ_ONLY:
        case tsqlParser.RECOMPILE:
        case tsqlParser.RELATIVE:
        case tsqlParser.REMOTE:
        case tsqlParser.REPEATABLE:
        case tsqlParser.ROBUST:
        case tsqlParser.ROOT:
        case tsqlParser.ROW:
        case tsqlParser.ROWGUID:
        case tsqlParser.ROWS:
        case tsqlParser.ROW_NUMBER:
        case tsqlParser.SAMPLE:
        case tsqlParser.SCHEMABINDING:
        case tsqlParser.SCROLL:
        case tsqlParser.SCROLL_LOCKS:
        case tsqlParser.SELF:
        case tsqlParser.SERIALIZABLE:
        case tsqlParser.SIMPLE:
        case tsqlParser.SNAPSHOT:
        case tsqlParser.SPATIAL_WINDOW_MAX_CELLS:
        case tsqlParser.STATIC:
        case tsqlParser.STATS_STREAM:
        case tsqlParser.STDEV:
        case tsqlParser.STDEVP:
        case tsqlParser.SUM:
        case tsqlParser.TEXTIMAGE_ON:
        case tsqlParser.THROW:
        case tsqlParser.TIES:
        case tsqlParser.TIME:
        case tsqlParser.TRY:
        case tsqlParser.TYPE:
        case tsqlParser.TYPE_WARNING:
        case tsqlParser.UNBOUNDED:
        case tsqlParser.UNCOMMITTED:
        case tsqlParser.UNKNOWN:
        case tsqlParser.USING:
        case tsqlParser.VAR:
        case tsqlParser.VARP:
        case tsqlParser.VIEWS:
        case tsqlParser.VIEW_METADATA:
        case tsqlParser.WORK:
        case tsqlParser.XML:
        case tsqlParser.XMLNAMESPACES:
        case tsqlParser.ID:
            this.enterOuterAlt(localctx, 1);
            this.state = 1021;
            this.simple_id();
            break;
        case tsqlParser.DOUBLE_QUOTE_ID:
            this.enterOuterAlt(localctx, 2);
            this.state = 1022;
            this.match(tsqlParser.DOUBLE_QUOTE_ID);
            break;
        case tsqlParser.SQUARE_BRACKET_ID:
            this.enterOuterAlt(localctx, 3);
            this.state = 1023;
            this.match(tsqlParser.SQUARE_BRACKET_ID);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Simple_idContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = tsqlParser.RULE_simple_id;
    return this;
}

Simple_idContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Simple_idContext.prototype.constructor = Simple_idContext;

Simple_idContext.prototype.ID = function() {
    return this.getToken(tsqlParser.ID, 0);
};

Simple_idContext.prototype.ABSOLUTE = function() {
    return this.getToken(tsqlParser.ABSOLUTE, 0);
};

Simple_idContext.prototype.APPLY = function() {
    return this.getToken(tsqlParser.APPLY, 0);
};

Simple_idContext.prototype.AUTO = function() {
    return this.getToken(tsqlParser.AUTO, 0);
};

Simple_idContext.prototype.AVG = function() {
    return this.getToken(tsqlParser.AVG, 0);
};

Simple_idContext.prototype.BASE64 = function() {
    return this.getToken(tsqlParser.BASE64, 0);
};

Simple_idContext.prototype.CALLER = function() {
    return this.getToken(tsqlParser.CALLER, 0);
};

Simple_idContext.prototype.CAST = function() {
    return this.getToken(tsqlParser.CAST, 0);
};

Simple_idContext.prototype.CATCH = function() {
    return this.getToken(tsqlParser.CATCH, 0);
};

Simple_idContext.prototype.CHECKSUM_AGG = function() {
    return this.getToken(tsqlParser.CHECKSUM_AGG, 0);
};

Simple_idContext.prototype.COMMITTED = function() {
    return this.getToken(tsqlParser.COMMITTED, 0);
};

Simple_idContext.prototype.CONCAT = function() {
    return this.getToken(tsqlParser.CONCAT, 0);
};

Simple_idContext.prototype.CONTROL = function() {
    return this.getToken(tsqlParser.CONTROL, 0);
};

Simple_idContext.prototype.COOKIE = function() {
    return this.getToken(tsqlParser.COOKIE, 0);
};

Simple_idContext.prototype.COUNT = function() {
    return this.getToken(tsqlParser.COUNT, 0);
};

Simple_idContext.prototype.COUNT_BIG = function() {
    return this.getToken(tsqlParser.COUNT_BIG, 0);
};

Simple_idContext.prototype.DELAY = function() {
    return this.getToken(tsqlParser.DELAY, 0);
};

Simple_idContext.prototype.DELETED = function() {
    return this.getToken(tsqlParser.DELETED, 0);
};

Simple_idContext.prototype.DENSE_RANK = function() {
    return this.getToken(tsqlParser.DENSE_RANK, 0);
};

Simple_idContext.prototype.DISABLE = function() {
    return this.getToken(tsqlParser.DISABLE, 0);
};

Simple_idContext.prototype.DYNAMIC = function() {
    return this.getToken(tsqlParser.DYNAMIC, 0);
};

Simple_idContext.prototype.ENCRYPTION = function() {
    return this.getToken(tsqlParser.ENCRYPTION, 0);
};

Simple_idContext.prototype.EXPAND = function() {
    return this.getToken(tsqlParser.EXPAND, 0);
};

Simple_idContext.prototype.FAST = function() {
    return this.getToken(tsqlParser.FAST, 0);
};

Simple_idContext.prototype.FAST_FORWARD = function() {
    return this.getToken(tsqlParser.FAST_FORWARD, 0);
};

Simple_idContext.prototype.FIRST = function() {
    return this.getToken(tsqlParser.FIRST, 0);
};

Simple_idContext.prototype.FOLLOWING = function() {
    return this.getToken(tsqlParser.FOLLOWING, 0);
};

Simple_idContext.prototype.FORCE = function() {
    return this.getToken(tsqlParser.FORCE, 0);
};

Simple_idContext.prototype.FORCESEEK = function() {
    return this.getToken(tsqlParser.FORCESEEK, 0);
};

Simple_idContext.prototype.FORWARD_ONLY = function() {
    return this.getToken(tsqlParser.FORWARD_ONLY, 0);
};

Simple_idContext.prototype.FULLSCAN = function() {
    return this.getToken(tsqlParser.FULLSCAN, 0);
};

Simple_idContext.prototype.GLOBAL = function() {
    return this.getToken(tsqlParser.GLOBAL, 0);
};

Simple_idContext.prototype.GO = function() {
    return this.getToken(tsqlParser.GO, 0);
};

Simple_idContext.prototype.GROUPING = function() {
    return this.getToken(tsqlParser.GROUPING, 0);
};

Simple_idContext.prototype.GROUPING_ID = function() {
    return this.getToken(tsqlParser.GROUPING_ID, 0);
};

Simple_idContext.prototype.HASH = function() {
    return this.getToken(tsqlParser.HASH, 0);
};

Simple_idContext.prototype.IMPERSONATE = function() {
    return this.getToken(tsqlParser.IMPERSONATE, 0);
};

Simple_idContext.prototype.INSENSITIVE = function() {
    return this.getToken(tsqlParser.INSENSITIVE, 0);
};

Simple_idContext.prototype.INSERTED = function() {
    return this.getToken(tsqlParser.INSERTED, 0);
};

Simple_idContext.prototype.ISOLATION = function() {
    return this.getToken(tsqlParser.ISOLATION, 0);
};

Simple_idContext.prototype.KEEP = function() {
    return this.getToken(tsqlParser.KEEP, 0);
};

Simple_idContext.prototype.KEEPFIXED = function() {
    return this.getToken(tsqlParser.KEEPFIXED, 0);
};

Simple_idContext.prototype.FORCED = function() {
    return this.getToken(tsqlParser.FORCED, 0);
};

Simple_idContext.prototype.KEYSET = function() {
    return this.getToken(tsqlParser.KEYSET, 0);
};

Simple_idContext.prototype.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX = function() {
    return this.getToken(tsqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX, 0);
};

Simple_idContext.prototype.LAST = function() {
    return this.getToken(tsqlParser.LAST, 0);
};

Simple_idContext.prototype.LEVEL = function() {
    return this.getToken(tsqlParser.LEVEL, 0);
};

Simple_idContext.prototype.LOCAL = function() {
    return this.getToken(tsqlParser.LOCAL, 0);
};

Simple_idContext.prototype.LOCK_ESCALATION = function() {
    return this.getToken(tsqlParser.LOCK_ESCALATION, 0);
};

Simple_idContext.prototype.LOGIN = function() {
    return this.getToken(tsqlParser.LOGIN, 0);
};

Simple_idContext.prototype.LOOP = function() {
    return this.getToken(tsqlParser.LOOP, 0);
};

Simple_idContext.prototype.MARK = function() {
    return this.getToken(tsqlParser.MARK, 0);
};

Simple_idContext.prototype.MAX = function() {
    return this.getToken(tsqlParser.MAX, 0);
};

Simple_idContext.prototype.MAXDOP = function() {
    return this.getToken(tsqlParser.MAXDOP, 0);
};

Simple_idContext.prototype.MAXRECURSION = function() {
    return this.getToken(tsqlParser.MAXRECURSION, 0);
};

Simple_idContext.prototype.MIN = function() {
    return this.getToken(tsqlParser.MIN, 0);
};

Simple_idContext.prototype.MODIFY = function() {
    return this.getToken(tsqlParser.MODIFY, 0);
};

Simple_idContext.prototype.NAME = function() {
    return this.getToken(tsqlParser.NAME, 0);
};

Simple_idContext.prototype.NEXT = function() {
    return this.getToken(tsqlParser.NEXT, 0);
};

Simple_idContext.prototype.NOCOUNT = function() {
    return this.getToken(tsqlParser.NOCOUNT, 0);
};

Simple_idContext.prototype.NOEXPAND = function() {
    return this.getToken(tsqlParser.NOEXPAND, 0);
};

Simple_idContext.prototype.NORECOMPUTE = function() {
    return this.getToken(tsqlParser.NORECOMPUTE, 0);
};

Simple_idContext.prototype.NTILE = function() {
    return this.getToken(tsqlParser.NTILE, 0);
};

Simple_idContext.prototype.NUMBER = function() {
    return this.getToken(tsqlParser.NUMBER, 0);
};

Simple_idContext.prototype.OFFSET = function() {
    return this.getToken(tsqlParser.OFFSET, 0);
};

Simple_idContext.prototype.ONLINE = function() {
    return this.getToken(tsqlParser.ONLINE, 0);
};

Simple_idContext.prototype.ONLY = function() {
    return this.getToken(tsqlParser.ONLY, 0);
};

Simple_idContext.prototype.OPTIMISTIC = function() {
    return this.getToken(tsqlParser.OPTIMISTIC, 0);
};

Simple_idContext.prototype.OPTIMIZE = function() {
    return this.getToken(tsqlParser.OPTIMIZE, 0);
};

Simple_idContext.prototype.OUT = function() {
    return this.getToken(tsqlParser.OUT, 0);
};

Simple_idContext.prototype.OUTPUT = function() {
    return this.getToken(tsqlParser.OUTPUT, 0);
};

Simple_idContext.prototype.OWNER = function() {
    return this.getToken(tsqlParser.OWNER, 0);
};

Simple_idContext.prototype.PARAMETERIZATION = function() {
    return this.getToken(tsqlParser.PARAMETERIZATION, 0);
};

Simple_idContext.prototype.PARTITION = function() {
    return this.getToken(tsqlParser.PARTITION, 0);
};

Simple_idContext.prototype.PATH = function() {
    return this.getToken(tsqlParser.PATH, 0);
};

Simple_idContext.prototype.PRECEDING = function() {
    return this.getToken(tsqlParser.PRECEDING, 0);
};

Simple_idContext.prototype.PRIOR = function() {
    return this.getToken(tsqlParser.PRIOR, 0);
};

Simple_idContext.prototype.PRIVILEGES = function() {
    return this.getToken(tsqlParser.PRIVILEGES, 0);
};

Simple_idContext.prototype.RANGE = function() {
    return this.getToken(tsqlParser.RANGE, 0);
};

Simple_idContext.prototype.RANK = function() {
    return this.getToken(tsqlParser.RANK, 0);
};

Simple_idContext.prototype.READONLY = function() {
    return this.getToken(tsqlParser.READONLY, 0);
};

Simple_idContext.prototype.READ_ONLY = function() {
    return this.getToken(tsqlParser.READ_ONLY, 0);
};

Simple_idContext.prototype.RECOMPILE = function() {
    return this.getToken(tsqlParser.RECOMPILE, 0);
};

Simple_idContext.prototype.RELATIVE = function() {
    return this.getToken(tsqlParser.RELATIVE, 0);
};

Simple_idContext.prototype.REMOTE = function() {
    return this.getToken(tsqlParser.REMOTE, 0);
};

Simple_idContext.prototype.REPEATABLE = function() {
    return this.getToken(tsqlParser.REPEATABLE, 0);
};

Simple_idContext.prototype.ROBUST = function() {
    return this.getToken(tsqlParser.ROBUST, 0);
};

Simple_idContext.prototype.ROOT = function() {
    return this.getToken(tsqlParser.ROOT, 0);
};

Simple_idContext.prototype.ROW = function() {
    return this.getToken(tsqlParser.ROW, 0);
};

Simple_idContext.prototype.ROWGUID = function() {
    return this.getToken(tsqlParser.ROWGUID, 0);
};

Simple_idContext.prototype.ROWS = function() {
    return this.getToken(tsqlParser.ROWS, 0);
};

Simple_idContext.prototype.ROW_NUMBER = function() {
    return this.getToken(tsqlParser.ROW_NUMBER, 0);
};

Simple_idContext.prototype.SAMPLE = function() {
    return this.getToken(tsqlParser.SAMPLE, 0);
};

Simple_idContext.prototype.SCHEMABINDING = function() {
    return this.getToken(tsqlParser.SCHEMABINDING, 0);
};

Simple_idContext.prototype.SCROLL = function() {
    return this.getToken(tsqlParser.SCROLL, 0);
};

Simple_idContext.prototype.SCROLL_LOCKS = function() {
    return this.getToken(tsqlParser.SCROLL_LOCKS, 0);
};

Simple_idContext.prototype.SELF = function() {
    return this.getToken(tsqlParser.SELF, 0);
};

Simple_idContext.prototype.SERIALIZABLE = function() {
    return this.getToken(tsqlParser.SERIALIZABLE, 0);
};

Simple_idContext.prototype.SIMPLE = function() {
    return this.getToken(tsqlParser.SIMPLE, 0);
};

Simple_idContext.prototype.SNAPSHOT = function() {
    return this.getToken(tsqlParser.SNAPSHOT, 0);
};

Simple_idContext.prototype.SPATIAL_WINDOW_MAX_CELLS = function() {
    return this.getToken(tsqlParser.SPATIAL_WINDOW_MAX_CELLS, 0);
};

Simple_idContext.prototype.STATIC = function() {
    return this.getToken(tsqlParser.STATIC, 0);
};

Simple_idContext.prototype.STATS_STREAM = function() {
    return this.getToken(tsqlParser.STATS_STREAM, 0);
};

Simple_idContext.prototype.STDEV = function() {
    return this.getToken(tsqlParser.STDEV, 0);
};

Simple_idContext.prototype.STDEVP = function() {
    return this.getToken(tsqlParser.STDEVP, 0);
};

Simple_idContext.prototype.SUM = function() {
    return this.getToken(tsqlParser.SUM, 0);
};

Simple_idContext.prototype.TEXTIMAGE_ON = function() {
    return this.getToken(tsqlParser.TEXTIMAGE_ON, 0);
};

Simple_idContext.prototype.THROW = function() {
    return this.getToken(tsqlParser.THROW, 0);
};

Simple_idContext.prototype.TIES = function() {
    return this.getToken(tsqlParser.TIES, 0);
};

Simple_idContext.prototype.TIME = function() {
    return this.getToken(tsqlParser.TIME, 0);
};

Simple_idContext.prototype.TRY = function() {
    return this.getToken(tsqlParser.TRY, 0);
};

Simple_idContext.prototype.TYPE = function() {
    return this.getToken(tsqlParser.TYPE, 0);
};

Simple_idContext.prototype.TYPE_WARNING = function() {
    return this.getToken(tsqlParser.TYPE_WARNING, 0);
};

Simple_idContext.prototype.UNBOUNDED = function() {
    return this.getToken(tsqlParser.UNBOUNDED, 0);
};

Simple_idContext.prototype.UNCOMMITTED = function() {
    return this.getToken(tsqlParser.UNCOMMITTED, 0);
};

Simple_idContext.prototype.UNKNOWN = function() {
    return this.getToken(tsqlParser.UNKNOWN, 0);
};

Simple_idContext.prototype.USING = function() {
    return this.getToken(tsqlParser.USING, 0);
};

Simple_idContext.prototype.VAR = function() {
    return this.getToken(tsqlParser.VAR, 0);
};

Simple_idContext.prototype.VARP = function() {
    return this.getToken(tsqlParser.VARP, 0);
};

Simple_idContext.prototype.VIEW_METADATA = function() {
    return this.getToken(tsqlParser.VIEW_METADATA, 0);
};

Simple_idContext.prototype.VIEWS = function() {
    return this.getToken(tsqlParser.VIEWS, 0);
};

Simple_idContext.prototype.WORK = function() {
    return this.getToken(tsqlParser.WORK, 0);
};

Simple_idContext.prototype.XML = function() {
    return this.getToken(tsqlParser.XML, 0);
};

Simple_idContext.prototype.XMLNAMESPACES = function() {
    return this.getToken(tsqlParser.XMLNAMESPACES, 0);
};

Simple_idContext.prototype.enterRule = function(listener) {
    if(listener instanceof tsqlListener ) {
        listener.enterSimple_id(this);
	}
};

Simple_idContext.prototype.exitRule = function(listener) {
    if(listener instanceof tsqlListener ) {
        listener.exitSimple_id(this);
	}
};




tsqlParser.Simple_idContext = Simple_idContext;

tsqlParser.prototype.simple_id = function() {

    var localctx = new Simple_idContext(this, this._ctx, this.state);
    this.enterRule(localctx, 124, tsqlParser.RULE_simple_id);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1026;
        _la = this._input.LA(1);
        if(!(_la===tsqlParser.FORCESEEK || ((((_la - 192)) & ~0x1f) == 0 && ((1 << (_la - 192)) & ((1 << (tsqlParser.ABSOLUTE - 192)) | (1 << (tsqlParser.APPLY - 192)) | (1 << (tsqlParser.AUTO - 192)) | (1 << (tsqlParser.AVG - 192)) | (1 << (tsqlParser.BASE64 - 192)) | (1 << (tsqlParser.CALLER - 192)) | (1 << (tsqlParser.CAST - 192)) | (1 << (tsqlParser.CATCH - 192)) | (1 << (tsqlParser.CHECKSUM_AGG - 192)) | (1 << (tsqlParser.COMMITTED - 192)) | (1 << (tsqlParser.CONCAT - 192)))) !== 0) || ((((_la - 224)) & ~0x1f) == 0 && ((1 << (_la - 224)) & ((1 << (tsqlParser.CONTROL - 224)) | (1 << (tsqlParser.COOKIE - 224)) | (1 << (tsqlParser.COUNT - 224)) | (1 << (tsqlParser.COUNT_BIG - 224)) | (1 << (tsqlParser.DELAY - 224)) | (1 << (tsqlParser.DELETED - 224)) | (1 << (tsqlParser.DENSE_RANK - 224)) | (1 << (tsqlParser.DISABLE - 224)) | (1 << (tsqlParser.DYNAMIC - 224)) | (1 << (tsqlParser.ENCRYPTION - 224)) | (1 << (tsqlParser.EXPAND - 224)) | (1 << (tsqlParser.FAST - 224)) | (1 << (tsqlParser.FAST_FORWARD - 224)))) !== 0) || ((((_la - 258)) & ~0x1f) == 0 && ((1 << (_la - 258)) & ((1 << (tsqlParser.FIRST - 258)) | (1 << (tsqlParser.FOLLOWING - 258)) | (1 << (tsqlParser.FORCE - 258)) | (1 << (tsqlParser.FORCED - 258)) | (1 << (tsqlParser.FORWARD_ONLY - 258)) | (1 << (tsqlParser.FULLSCAN - 258)) | (1 << (tsqlParser.GLOBAL - 258)) | (1 << (tsqlParser.GO - 258)) | (1 << (tsqlParser.GROUPING - 258)) | (1 << (tsqlParser.GROUPING_ID - 258)) | (1 << (tsqlParser.HASH - 258)) | (1 << (tsqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX - 258)) | (1 << (tsqlParser.IMPERSONATE - 258)) | (1 << (tsqlParser.INSENSITIVE - 258)) | (1 << (tsqlParser.INSERTED - 258)) | (1 << (tsqlParser.ISOLATION - 258)) | (1 << (tsqlParser.KEEP - 258)) | (1 << (tsqlParser.KEEPFIXED - 258)) | (1 << (tsqlParser.KEYSET - 258)) | (1 << (tsqlParser.LAST - 258)) | (1 << (tsqlParser.LEVEL - 258)) | (1 << (tsqlParser.LOCAL - 258)) | (1 << (tsqlParser.LOCK_ESCALATION - 258)) | (1 << (tsqlParser.LOGIN - 258)) | (1 << (tsqlParser.LOOP - 258)))) !== 0) || ((((_la - 290)) & ~0x1f) == 0 && ((1 << (_la - 290)) & ((1 << (tsqlParser.MARK - 290)) | (1 << (tsqlParser.MAX - 290)) | (1 << (tsqlParser.MAXDOP - 290)) | (1 << (tsqlParser.MAXRECURSION - 290)) | (1 << (tsqlParser.MIN - 290)) | (1 << (tsqlParser.MODIFY - 290)) | (1 << (tsqlParser.NAME - 290)) | (1 << (tsqlParser.NEXT - 290)) | (1 << (tsqlParser.NOCOUNT - 290)) | (1 << (tsqlParser.NOEXPAND - 290)) | (1 << (tsqlParser.NORECOMPUTE - 290)) | (1 << (tsqlParser.NTILE - 290)) | (1 << (tsqlParser.NUMBER - 290)) | (1 << (tsqlParser.OFFSET - 290)) | (1 << (tsqlParser.ONLINE - 290)) | (1 << (tsqlParser.ONLY - 290)) | (1 << (tsqlParser.OPTIMISTIC - 290)) | (1 << (tsqlParser.OPTIMIZE - 290)) | (1 << (tsqlParser.OUT - 290)))) !== 0) || ((((_la - 322)) & ~0x1f) == 0 && ((1 << (_la - 322)) & ((1 << (tsqlParser.OUTPUT - 322)) | (1 << (tsqlParser.OWNER - 322)) | (1 << (tsqlParser.PARAMETERIZATION - 322)) | (1 << (tsqlParser.PARTITION - 322)) | (1 << (tsqlParser.PATH - 322)) | (1 << (tsqlParser.PRECEDING - 322)) | (1 << (tsqlParser.PRIOR - 322)) | (1 << (tsqlParser.PRIVILEGES - 322)) | (1 << (tsqlParser.RANGE - 322)) | (1 << (tsqlParser.RANK - 322)) | (1 << (tsqlParser.READONLY - 322)) | (1 << (tsqlParser.READ_ONLY - 322)) | (1 << (tsqlParser.RECOMPILE - 322)) | (1 << (tsqlParser.RELATIVE - 322)) | (1 << (tsqlParser.REMOTE - 322)) | (1 << (tsqlParser.REPEATABLE - 322)) | (1 << (tsqlParser.ROBUST - 322)) | (1 << (tsqlParser.ROOT - 322)) | (1 << (tsqlParser.ROW - 322)) | (1 << (tsqlParser.ROWGUID - 322)) | (1 << (tsqlParser.ROWS - 322)) | (1 << (tsqlParser.ROW_NUMBER - 322)) | (1 << (tsqlParser.SAMPLE - 322)) | (1 << (tsqlParser.SCHEMABINDING - 322)) | (1 << (tsqlParser.SCROLL - 322)))) !== 0) || ((((_la - 354)) & ~0x1f) == 0 && ((1 << (_la - 354)) & ((1 << (tsqlParser.SCROLL_LOCKS - 354)) | (1 << (tsqlParser.SELF - 354)) | (1 << (tsqlParser.SERIALIZABLE - 354)) | (1 << (tsqlParser.SIMPLE - 354)) | (1 << (tsqlParser.SNAPSHOT - 354)) | (1 << (tsqlParser.SPATIAL_WINDOW_MAX_CELLS - 354)) | (1 << (tsqlParser.STATIC - 354)) | (1 << (tsqlParser.STATS_STREAM - 354)) | (1 << (tsqlParser.STDEV - 354)) | (1 << (tsqlParser.STDEVP - 354)) | (1 << (tsqlParser.SUM - 354)) | (1 << (tsqlParser.TEXTIMAGE_ON - 354)) | (1 << (tsqlParser.THROW - 354)) | (1 << (tsqlParser.TIES - 354)) | (1 << (tsqlParser.TIME - 354)) | (1 << (tsqlParser.TRY - 354)) | (1 << (tsqlParser.TYPE - 354)) | (1 << (tsqlParser.TYPE_WARNING - 354)) | (1 << (tsqlParser.UNBOUNDED - 354)) | (1 << (tsqlParser.UNCOMMITTED - 354)) | (1 << (tsqlParser.UNKNOWN - 354)))) !== 0) || ((((_la - 387)) & ~0x1f) == 0 && ((1 << (_la - 387)) & ((1 << (tsqlParser.USING - 387)) | (1 << (tsqlParser.VAR - 387)) | (1 << (tsqlParser.VARP - 387)) | (1 << (tsqlParser.VIEWS - 387)) | (1 << (tsqlParser.VIEW_METADATA - 387)) | (1 << (tsqlParser.WORK - 387)) | (1 << (tsqlParser.XML - 387)) | (1 << (tsqlParser.XMLNAMESPACES - 387)) | (1 << (tsqlParser.ID - 387)))) !== 0))) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Comparison_operatorContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = tsqlParser.RULE_comparison_operator;
    return this;
}

Comparison_operatorContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Comparison_operatorContext.prototype.constructor = Comparison_operatorContext;


Comparison_operatorContext.prototype.enterRule = function(listener) {
    if(listener instanceof tsqlListener ) {
        listener.enterComparison_operator(this);
	}
};

Comparison_operatorContext.prototype.exitRule = function(listener) {
    if(listener instanceof tsqlListener ) {
        listener.exitComparison_operator(this);
	}
};




tsqlParser.Comparison_operatorContext = Comparison_operatorContext;

tsqlParser.prototype.comparison_operator = function() {

    var localctx = new Comparison_operatorContext(this, this._ctx, this.state);
    this.enterRule(localctx, 126, tsqlParser.RULE_comparison_operator);
    try {
        this.state = 1043;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,114,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 1028;
            this.match(tsqlParser.EQUAL);
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 1029;
            this.match(tsqlParser.GREATER);
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 1030;
            this.match(tsqlParser.LESS);
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 1031;
            this.match(tsqlParser.LESS);
            this.state = 1032;
            this.match(tsqlParser.EQUAL);
            break;

        case 5:
            this.enterOuterAlt(localctx, 5);
            this.state = 1033;
            this.match(tsqlParser.GREATER);
            this.state = 1034;
            this.match(tsqlParser.EQUAL);
            break;

        case 6:
            this.enterOuterAlt(localctx, 6);
            this.state = 1035;
            this.match(tsqlParser.LESS);
            this.state = 1036;
            this.match(tsqlParser.GREATER);
            break;

        case 7:
            this.enterOuterAlt(localctx, 7);
            this.state = 1037;
            this.match(tsqlParser.EXCLAMATION);
            this.state = 1038;
            this.match(tsqlParser.EQUAL);
            break;

        case 8:
            this.enterOuterAlt(localctx, 8);
            this.state = 1039;
            this.match(tsqlParser.EXCLAMATION);
            this.state = 1040;
            this.match(tsqlParser.GREATER);
            break;

        case 9:
            this.enterOuterAlt(localctx, 9);
            this.state = 1041;
            this.match(tsqlParser.EXCLAMATION);
            this.state = 1042;
            this.match(tsqlParser.LESS);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Assignment_operatorContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = tsqlParser.RULE_assignment_operator;
    return this;
}

Assignment_operatorContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Assignment_operatorContext.prototype.constructor = Assignment_operatorContext;


Assignment_operatorContext.prototype.enterRule = function(listener) {
    if(listener instanceof tsqlListener ) {
        listener.enterAssignment_operator(this);
	}
};

Assignment_operatorContext.prototype.exitRule = function(listener) {
    if(listener instanceof tsqlListener ) {
        listener.exitAssignment_operator(this);
	}
};




tsqlParser.Assignment_operatorContext = Assignment_operatorContext;

tsqlParser.prototype.assignment_operator = function() {

    var localctx = new Assignment_operatorContext(this, this._ctx, this.state);
    this.enterRule(localctx, 128, tsqlParser.RULE_assignment_operator);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1045;
        _la = this._input.LA(1);
        if(!(((((_la - 412)) & ~0x1f) == 0 && ((1 << (_la - 412)) & ((1 << (tsqlParser.PLUS_ASSIGN - 412)) | (1 << (tsqlParser.MINUS_ASSIGN - 412)) | (1 << (tsqlParser.MULT_ASSIGN - 412)) | (1 << (tsqlParser.DIV_ASSIGN - 412)) | (1 << (tsqlParser.MOD_ASSIGN - 412)) | (1 << (tsqlParser.AND_ASSIGN - 412)) | (1 << (tsqlParser.XOR_ASSIGN - 412)) | (1 << (tsqlParser.OR_ASSIGN - 412)))) !== 0))) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function File_sizeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = tsqlParser.RULE_file_size;
    return this;
}

File_sizeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
File_sizeContext.prototype.constructor = File_sizeContext;

File_sizeContext.prototype.DECIMAL = function() {
    return this.getToken(tsqlParser.DECIMAL, 0);
};

File_sizeContext.prototype.KB = function() {
    return this.getToken(tsqlParser.KB, 0);
};

File_sizeContext.prototype.MB = function() {
    return this.getToken(tsqlParser.MB, 0);
};

File_sizeContext.prototype.GB = function() {
    return this.getToken(tsqlParser.GB, 0);
};

File_sizeContext.prototype.TB = function() {
    return this.getToken(tsqlParser.TB, 0);
};

File_sizeContext.prototype.enterRule = function(listener) {
    if(listener instanceof tsqlListener ) {
        listener.enterFile_size(this);
	}
};

File_sizeContext.prototype.exitRule = function(listener) {
    if(listener instanceof tsqlListener ) {
        listener.exitFile_size(this);
	}
};




tsqlParser.File_sizeContext = File_sizeContext;

tsqlParser.prototype.file_size = function() {

    var localctx = new File_sizeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 130, tsqlParser.RULE_file_size);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1047;
        this.match(tsqlParser.DECIMAL);
        this.state = 1049;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(((((_la - 264)) & ~0x1f) == 0 && ((1 << (_la - 264)) & ((1 << (tsqlParser.GB - 264)) | (1 << (tsqlParser.KB - 264)) | (1 << (tsqlParser.MB - 264)))) !== 0) || _la===tsqlParser.TB || _la===tsqlParser.MODULE) {
            this.state = 1048;
            _la = this._input.LA(1);
            if(!(((((_la - 264)) & ~0x1f) == 0 && ((1 << (_la - 264)) & ((1 << (tsqlParser.GB - 264)) | (1 << (tsqlParser.KB - 264)) | (1 << (tsqlParser.MB - 264)))) !== 0) || _la===tsqlParser.TB || _la===tsqlParser.MODULE)) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


tsqlParser.prototype.sempred = function(localctx, ruleIndex, predIndex) {
	switch(ruleIndex) {
	case 7:
			return this.expression_sempred(localctx, predIndex);
    default:
        throw "No predicate with index:" + ruleIndex;
   }
};

tsqlParser.prototype.expression_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 0:
			return this.precpred(this._ctx, 5);
		case 1:
			return this.precpred(this._ctx, 3);
		case 2:
			return this.precpred(this._ctx, 2);
		case 3:
			return this.precpred(this._ctx, 12);
		default:
			throw "No predicate with index:" + predIndex;
	}
};


exports.tsqlParser = tsqlParser;
